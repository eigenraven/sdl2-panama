// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class SDL2 extends SDL2_2 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final OfAddress C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define __LINUX__ 1
     * }
     */
    public static int __LINUX__() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int __LINUX__ = __LINUX__();
    /**
     * {@snippet :
     * #define HAVE_STDARG_H 1
     * }
     */
    public static int HAVE_STDARG_H() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int HAVE_STDARG_H = HAVE_STDARG_H();
    /**
     * {@snippet :
     * #define HAVE_STDDEF_H 1
     * }
     */
    public static int HAVE_STDDEF_H() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int HAVE_STDDEF_H = HAVE_STDDEF_H();
    /**
     * {@snippet :
     * #define HAVE_STDINT_H 1
     * }
     */
    public static int HAVE_STDINT_H() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int HAVE_STDINT_H = HAVE_STDINT_H();
    /**
     * {@snippet :
     * #define HAVE_GCC_SYNC_LOCK_TEST_AND_SET 1
     * }
     */
    public static int HAVE_GCC_SYNC_LOCK_TEST_AND_SET() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int HAVE_GCC_SYNC_LOCK_TEST_AND_SET = HAVE_GCC_SYNC_LOCK_TEST_AND_SET();
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_DUMMY 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_DUMMY() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_AUDIO_DRIVER_DUMMY = SDL_AUDIO_DRIVER_DUMMY();
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_DISABLED 1
     * }
     */
    public static int SDL_JOYSTICK_DISABLED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_JOYSTICK_DISABLED = SDL_JOYSTICK_DISABLED();
    /**
     * {@snippet :
     * #define SDL_HAPTIC_DISABLED 1
     * }
     */
    public static int SDL_HAPTIC_DISABLED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_HAPTIC_DISABLED = SDL_HAPTIC_DISABLED();
    /**
     * {@snippet :
     * #define SDL_HIDAPI_DISABLED 1
     * }
     */
    public static int SDL_HIDAPI_DISABLED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_HIDAPI_DISABLED = SDL_HIDAPI_DISABLED();
    /**
     * {@snippet :
     * #define SDL_SENSOR_DISABLED 1
     * }
     */
    public static int SDL_SENSOR_DISABLED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_SENSOR_DISABLED = SDL_SENSOR_DISABLED();
    /**
     * {@snippet :
     * #define SDL_LOADSO_DISABLED 1
     * }
     */
    public static int SDL_LOADSO_DISABLED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_LOADSO_DISABLED = SDL_LOADSO_DISABLED();
    /**
     * {@snippet :
     * #define SDL_THREADS_DISABLED 1
     * }
     */
    public static int SDL_THREADS_DISABLED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_THREADS_DISABLED = SDL_THREADS_DISABLED();
    /**
     * {@snippet :
     * #define SDL_TIMERS_DISABLED 1
     * }
     */
    public static int SDL_TIMERS_DISABLED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_TIMERS_DISABLED = SDL_TIMERS_DISABLED();
    /**
     * {@snippet :
     * #define SDL_VIDEO_DRIVER_DUMMY 1
     * }
     */
    public static int SDL_VIDEO_DRIVER_DUMMY() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_VIDEO_DRIVER_DUMMY = SDL_VIDEO_DRIVER_DUMMY();
    /**
     * {@snippet :
     * #define SDL_FILESYSTEM_DUMMY 1
     * }
     */
    public static int SDL_FILESYSTEM_DUMMY() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_FILESYSTEM_DUMMY = SDL_FILESYSTEM_DUMMY();
    /**
     * {@snippet :
     * #define SDL_ASSERT_LEVEL 2
     * }
     */
    public static int SDL_ASSERT_LEVEL() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_ASSERT_LEVEL = SDL_ASSERT_LEVEL();
    /**
     * {@snippet :
     * #define SDL_LIL_ENDIAN 1234
     * }
     */
    public static int SDL_LIL_ENDIAN() {
        return (int)1234L;
    }
    /** (int)1234L */
    public static final int SDL_LIL_ENDIAN = SDL_LIL_ENDIAN();
    /**
     * {@snippet :
     * #define SDL_BIG_ENDIAN 4321
     * }
     */
    public static int SDL_BIG_ENDIAN() {
        return (int)4321L;
    }
    /** (int)4321L */
    public static final int SDL_BIG_ENDIAN = SDL_BIG_ENDIAN();
    /**
     * {@snippet :
     * #define SDL_MUTEX_TIMEDOUT 1
     * }
     */
    public static int SDL_MUTEX_TIMEDOUT() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_MUTEX_TIMEDOUT = SDL_MUTEX_TIMEDOUT();
    /**
     * {@snippet :
     * #define RW_SEEK_SET 0
     * }
     */
    public static int RW_SEEK_SET() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int RW_SEEK_SET = RW_SEEK_SET();
    /**
     * {@snippet :
     * #define RW_SEEK_CUR 1
     * }
     */
    public static int RW_SEEK_CUR() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int RW_SEEK_CUR = RW_SEEK_CUR();
    /**
     * {@snippet :
     * #define RW_SEEK_END 2
     * }
     */
    public static int RW_SEEK_END() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int RW_SEEK_END = RW_SEEK_END();
    /**
     * {@snippet :
     * #define AUDIO_U8 8
     * }
     */
    public static int AUDIO_U8() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int AUDIO_U8 = AUDIO_U8();
    /**
     * {@snippet :
     * #define AUDIO_S8 32776
     * }
     */
    public static int AUDIO_S8() {
        return (int)32776L;
    }
    /** (int)32776L */
    public static final int AUDIO_S8 = AUDIO_S8();
    /**
     * {@snippet :
     * #define AUDIO_U16LSB 16
     * }
     */
    public static int AUDIO_U16LSB() {
        return (int)16L;
    }
    /** (int)16L */
    public static final int AUDIO_U16LSB = AUDIO_U16LSB();
    /**
     * {@snippet :
     * #define AUDIO_S16LSB 32784
     * }
     */
    public static int AUDIO_S16LSB() {
        return (int)32784L;
    }
    /** (int)32784L */
    public static final int AUDIO_S16LSB = AUDIO_S16LSB();
    /**
     * {@snippet :
     * #define AUDIO_U16MSB 4112
     * }
     */
    public static int AUDIO_U16MSB() {
        return (int)4112L;
    }
    /** (int)4112L */
    public static final int AUDIO_U16MSB = AUDIO_U16MSB();
    /**
     * {@snippet :
     * #define AUDIO_S16MSB 36880
     * }
     */
    public static int AUDIO_S16MSB() {
        return (int)36880L;
    }
    /** (int)36880L */
    public static final int AUDIO_S16MSB = AUDIO_S16MSB();
    /**
     * {@snippet :
     * #define AUDIO_S32LSB 32800
     * }
     */
    public static int AUDIO_S32LSB() {
        return (int)32800L;
    }
    /** (int)32800L */
    public static final int AUDIO_S32LSB = AUDIO_S32LSB();
    /**
     * {@snippet :
     * #define AUDIO_S32MSB 36896
     * }
     */
    public static int AUDIO_S32MSB() {
        return (int)36896L;
    }
    /** (int)36896L */
    public static final int AUDIO_S32MSB = AUDIO_S32MSB();
    /**
     * {@snippet :
     * #define AUDIO_F32LSB 33056
     * }
     */
    public static int AUDIO_F32LSB() {
        return (int)33056L;
    }
    /** (int)33056L */
    public static final int AUDIO_F32LSB = AUDIO_F32LSB();
    /**
     * {@snippet :
     * #define AUDIO_F32MSB 37152
     * }
     */
    public static int AUDIO_F32MSB() {
        return (int)37152L;
    }
    /** (int)37152L */
    public static final int AUDIO_F32MSB = AUDIO_F32MSB();
    /**
     * {@snippet :
     * #define SDL_AUDIO_ALLOW_FREQUENCY_CHANGE 1
     * }
     */
    public static int SDL_AUDIO_ALLOW_FREQUENCY_CHANGE() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = SDL_AUDIO_ALLOW_FREQUENCY_CHANGE();
    /**
     * {@snippet :
     * #define SDL_AUDIO_ALLOW_FORMAT_CHANGE 2
     * }
     */
    public static int SDL_AUDIO_ALLOW_FORMAT_CHANGE() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_AUDIO_ALLOW_FORMAT_CHANGE = SDL_AUDIO_ALLOW_FORMAT_CHANGE();
    /**
     * {@snippet :
     * #define SDL_AUDIO_ALLOW_CHANNELS_CHANGE 4
     * }
     */
    public static int SDL_AUDIO_ALLOW_CHANNELS_CHANGE() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_AUDIO_ALLOW_CHANNELS_CHANGE = SDL_AUDIO_ALLOW_CHANNELS_CHANGE();
    /**
     * {@snippet :
     * #define SDL_AUDIO_ALLOW_SAMPLES_CHANGE 8
     * }
     */
    public static int SDL_AUDIO_ALLOW_SAMPLES_CHANGE() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_AUDIO_ALLOW_SAMPLES_CHANGE = SDL_AUDIO_ALLOW_SAMPLES_CHANGE();
    /**
     * {@snippet :
     * #define SDL_AUDIOCVT_MAX_FILTERS 9
     * }
     */
    public static int SDL_AUDIOCVT_MAX_FILTERS() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDL_AUDIOCVT_MAX_FILTERS = SDL_AUDIOCVT_MAX_FILTERS();
    /**
     * {@snippet :
     * #define SDL_MIX_MAXVOLUME 128
     * }
     */
    public static int SDL_MIX_MAXVOLUME() {
        return (int)128L;
    }
    /** (int)128L */
    public static final int SDL_MIX_MAXVOLUME = SDL_MIX_MAXVOLUME();
    /**
     * {@snippet :
     * #define SDL_CACHELINE_SIZE 128
     * }
     */
    public static int SDL_CACHELINE_SIZE() {
        return (int)128L;
    }
    /** (int)128L */
    public static final int SDL_CACHELINE_SIZE = SDL_CACHELINE_SIZE();
    /**
     * {@snippet :
     * #define SDL_ALPHA_OPAQUE 255
     * }
     */
    public static int SDL_ALPHA_OPAQUE() {
        return (int)255L;
    }
    /** (int)255L */
    public static final int SDL_ALPHA_OPAQUE = SDL_ALPHA_OPAQUE();
    /**
     * {@snippet :
     * #define SDL_ALPHA_TRANSPARENT 0
     * }
     */
    public static int SDL_ALPHA_TRANSPARENT() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_ALPHA_TRANSPARENT = SDL_ALPHA_TRANSPARENT();
    /**
     * {@snippet :
     * #define SDL_SWSURFACE 0
     * }
     */
    public static int SDL_SWSURFACE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_SWSURFACE = SDL_SWSURFACE();
    /**
     * {@snippet :
     * #define SDL_PREALLOC 1
     * }
     */
    public static int SDL_PREALLOC() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_PREALLOC = SDL_PREALLOC();
    /**
     * {@snippet :
     * #define SDL_RLEACCEL 2
     * }
     */
    public static int SDL_RLEACCEL() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_RLEACCEL = SDL_RLEACCEL();
    /**
     * {@snippet :
     * #define SDL_DONTFREE 4
     * }
     */
    public static int SDL_DONTFREE() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_DONTFREE = SDL_DONTFREE();
    /**
     * {@snippet :
     * #define SDL_SIMD_ALIGNED 8
     * }
     */
    public static int SDL_SIMD_ALIGNED() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_SIMD_ALIGNED = SDL_SIMD_ALIGNED();
    /**
     * {@snippet :
     * #define SDL_BUTTON_LEFT 1
     * }
     */
    public static int SDL_BUTTON_LEFT() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_BUTTON_LEFT = SDL_BUTTON_LEFT();
    /**
     * {@snippet :
     * #define SDL_BUTTON_MIDDLE 2
     * }
     */
    public static int SDL_BUTTON_MIDDLE() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_BUTTON_MIDDLE = SDL_BUTTON_MIDDLE();
    /**
     * {@snippet :
     * #define SDL_BUTTON_RIGHT 3
     * }
     */
    public static int SDL_BUTTON_RIGHT() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_BUTTON_RIGHT = SDL_BUTTON_RIGHT();
    /**
     * {@snippet :
     * #define SDL_BUTTON_X1 4
     * }
     */
    public static int SDL_BUTTON_X1() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_BUTTON_X1 = SDL_BUTTON_X1();
    /**
     * {@snippet :
     * #define SDL_BUTTON_X2 5
     * }
     */
    public static int SDL_BUTTON_X2() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_BUTTON_X2 = SDL_BUTTON_X2();
    /**
     * {@snippet :
     * #define SDL_VIRTUAL_JOYSTICK_DESC_VERSION 1
     * }
     */
    public static int SDL_VIRTUAL_JOYSTICK_DESC_VERSION() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_VIRTUAL_JOYSTICK_DESC_VERSION = SDL_VIRTUAL_JOYSTICK_DESC_VERSION();
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_AXIS_MAX 32767
     * }
     */
    public static int SDL_JOYSTICK_AXIS_MAX() {
        return (int)32767L;
    }
    /** (int)32767L */
    public static final int SDL_JOYSTICK_AXIS_MAX = SDL_JOYSTICK_AXIS_MAX();
    /**
     * {@snippet :
     * #define SDL_HAT_CENTERED 0
     * }
     */
    public static int SDL_HAT_CENTERED() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_HAT_CENTERED = SDL_HAT_CENTERED();
    /**
     * {@snippet :
     * #define SDL_HAT_UP 1
     * }
     */
    public static int SDL_HAT_UP() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_HAT_UP = SDL_HAT_UP();
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHT 2
     * }
     */
    public static int SDL_HAT_RIGHT() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_HAT_RIGHT = SDL_HAT_RIGHT();
    /**
     * {@snippet :
     * #define SDL_HAT_DOWN 4
     * }
     */
    public static int SDL_HAT_DOWN() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_HAT_DOWN = SDL_HAT_DOWN();
    /**
     * {@snippet :
     * #define SDL_HAT_LEFT 8
     * }
     */
    public static int SDL_HAT_LEFT() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_HAT_LEFT = SDL_HAT_LEFT();
    /**
     * {@snippet :
     * #define SDL_RELEASED 0
     * }
     */
    public static int SDL_RELEASED() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_RELEASED = SDL_RELEASED();
    /**
     * {@snippet :
     * #define SDL_PRESSED 1
     * }
     */
    public static int SDL_PRESSED() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_PRESSED = SDL_PRESSED();
    /**
     * {@snippet :
     * #define SDL_IGNORE 0
     * }
     */
    public static int SDL_IGNORE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_IGNORE = SDL_IGNORE();
    /**
     * {@snippet :
     * #define SDL_DISABLE 0
     * }
     */
    public static int SDL_DISABLE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_DISABLE = SDL_DISABLE();
    /**
     * {@snippet :
     * #define SDL_ENABLE 1
     * }
     */
    public static int SDL_ENABLE() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_ENABLE = SDL_ENABLE();
    /**
     * {@snippet :
     * #define SDL_HAPTIC_POLAR 0
     * }
     */
    public static int SDL_HAPTIC_POLAR() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_HAPTIC_POLAR = SDL_HAPTIC_POLAR();
    /**
     * {@snippet :
     * #define SDL_HAPTIC_CARTESIAN 1
     * }
     */
    public static int SDL_HAPTIC_CARTESIAN() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_HAPTIC_CARTESIAN = SDL_HAPTIC_CARTESIAN();
    /**
     * {@snippet :
     * #define SDL_HAPTIC_SPHERICAL 2
     * }
     */
    public static int SDL_HAPTIC_SPHERICAL() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_HAPTIC_SPHERICAL = SDL_HAPTIC_SPHERICAL();
    /**
     * {@snippet :
     * #define SDL_HAPTIC_STEERING_AXIS 3
     * }
     */
    public static int SDL_HAPTIC_STEERING_AXIS() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_HAPTIC_STEERING_AXIS = SDL_HAPTIC_STEERING_AXIS();
    /**
     * {@snippet :
     * #define SDL_MAX_LOG_MESSAGE 4096
     * }
     */
    public static int SDL_MAX_LOG_MESSAGE() {
        return (int)4096L;
    }
    /** (int)4096L */
    public static final int SDL_MAX_LOG_MESSAGE = SDL_MAX_LOG_MESSAGE();
    /**
     * {@snippet :
     * #define SDL_MAJOR_VERSION 2
     * }
     */
    public static int SDL_MAJOR_VERSION() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_MAJOR_VERSION = SDL_MAJOR_VERSION();
    /**
     * {@snippet :
     * #define SDL_MINOR_VERSION 26
     * }
     */
    public static int SDL_MINOR_VERSION() {
        return (int)26L;
    }
    /** (int)26L */
    public static final int SDL_MINOR_VERSION = SDL_MINOR_VERSION();
    /**
     * {@snippet :
     * #define SDL_PATCHLEVEL 5
     * }
     */
    public static int SDL_PATCHLEVEL() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_PATCHLEVEL = SDL_PATCHLEVEL();
    public static MethodHandle SDL_GetPlatform$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"SDL_GetPlatform");
    }
    /**
     * {@snippet :
     * char* SDL_GetPlatform();
     * }
     */
    public static MemorySegment SDL_GetPlatform() {
        var mh$ = SDL_GetPlatform$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_ASSERTION_RETRY = 0;
     * }
     */
    public static int SDL_ASSERTION_RETRY() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_ASSERTION_RETRY = SDL_ASSERTION_RETRY();
    /**
     * {@snippet :
     * enum .SDL_ASSERTION_BREAK = 1;
     * }
     */
    public static int SDL_ASSERTION_BREAK() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_ASSERTION_BREAK = SDL_ASSERTION_BREAK();
    /**
     * {@snippet :
     * enum .SDL_ASSERTION_ABORT = 2;
     * }
     */
    public static int SDL_ASSERTION_ABORT() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_ASSERTION_ABORT = SDL_ASSERTION_ABORT();
    /**
     * {@snippet :
     * enum .SDL_ASSERTION_IGNORE = 3;
     * }
     */
    public static int SDL_ASSERTION_IGNORE() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_ASSERTION_IGNORE = SDL_ASSERTION_IGNORE();
    /**
     * {@snippet :
     * enum .SDL_ASSERTION_ALWAYS_IGNORE = 4;
     * }
     */
    public static int SDL_ASSERTION_ALWAYS_IGNORE() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_ASSERTION_ALWAYS_IGNORE = SDL_ASSERTION_ALWAYS_IGNORE();
    public static MethodHandle SDL_ReportAssertion$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$5,"SDL_ReportAssertion");
    }
    /**
     * {@snippet :
     * SDL_AssertState SDL_ReportAssertion(SDL_AssertData*, char*, char*, int);
     * }
     */
    public static int SDL_ReportAssertion(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = SDL_ReportAssertion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetAssertionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"SDL_SetAssertionHandler");
    }
    /**
     * {@snippet :
     * void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void* userdata);
     * }
     */
    public static void SDL_SetAssertionHandler(MemorySegment handler, MemorySegment userdata) {
        var mh$ = SDL_SetAssertionHandler$MH();
        try {
            mh$.invokeExact(handler, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDefaultAssertionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$5,"SDL_GetDefaultAssertionHandler");
    }
    /**
     * {@snippet :
     * SDL_AssertionHandler SDL_GetDefaultAssertionHandler();
     * }
     */
    public static MemorySegment SDL_GetDefaultAssertionHandler() {
        var mh$ = SDL_GetDefaultAssertionHandler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetAssertionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"SDL_GetAssertionHandler");
    }
    /**
     * {@snippet :
     * SDL_AssertionHandler SDL_GetAssertionHandler(void** puserdata);
     * }
     */
    public static MemorySegment SDL_GetAssertionHandler(MemorySegment puserdata) {
        var mh$ = SDL_GetAssertionHandler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(puserdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetAssertionReport$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$2,"SDL_GetAssertionReport");
    }
    /**
     * {@snippet :
     * const SDL_AssertData* SDL_GetAssertionReport();
     * }
     */
    public static MemorySegment SDL_GetAssertionReport() {
        var mh$ = SDL_GetAssertionReport$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ResetAssertionReport$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$4,"SDL_ResetAssertionReport");
    }
    /**
     * {@snippet :
     * void SDL_ResetAssertionReport();
     * }
     */
    public static void SDL_ResetAssertionReport() {
        var mh$ = SDL_ResetAssertionReport$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_SpinLock;
     * }
     */
    public static final OfInt SDL_SpinLock = JAVA_INT;
    public static MethodHandle SDL_AtomicTryLock$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$6,"SDL_AtomicTryLock");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_AtomicTryLock(SDL_SpinLock* lock);
     * }
     */
    public static int SDL_AtomicTryLock(MemorySegment lock) {
        var mh$ = SDL_AtomicTryLock$MH();
        try {
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicLock$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"SDL_AtomicLock");
    }
    /**
     * {@snippet :
     * void SDL_AtomicLock(SDL_SpinLock* lock);
     * }
     */
    public static void SDL_AtomicLock(MemorySegment lock) {
        var mh$ = SDL_AtomicLock$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"SDL_AtomicUnlock");
    }
    /**
     * {@snippet :
     * void SDL_AtomicUnlock(SDL_SpinLock* lock);
     * }
     */
    public static void SDL_AtomicUnlock(MemorySegment lock) {
        var mh$ = SDL_AtomicUnlock$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MemoryBarrierReleaseFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"SDL_MemoryBarrierReleaseFunction");
    }
    /**
     * {@snippet :
     * void SDL_MemoryBarrierReleaseFunction();
     * }
     */
    public static void SDL_MemoryBarrierReleaseFunction() {
        var mh$ = SDL_MemoryBarrierReleaseFunction$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MemoryBarrierAcquireFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"SDL_MemoryBarrierAcquireFunction");
    }
    /**
     * {@snippet :
     * void SDL_MemoryBarrierAcquireFunction();
     * }
     */
    public static void SDL_MemoryBarrierAcquireFunction() {
        var mh$ = SDL_MemoryBarrierAcquireFunction$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicCAS$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$2,"SDL_AtomicCAS");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_AtomicCAS(SDL_atomic_t* a, int oldval, int newval);
     * }
     */
    public static int SDL_AtomicCAS(MemorySegment a, int oldval, int newval) {
        var mh$ = SDL_AtomicCAS$MH();
        try {
            return (int)mh$.invokeExact(a, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicSet$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$4,"SDL_AtomicSet");
    }
    /**
     * {@snippet :
     * int SDL_AtomicSet(SDL_atomic_t* a, int v);
     * }
     */
    public static int SDL_AtomicSet(MemorySegment a, int v) {
        var mh$ = SDL_AtomicSet$MH();
        try {
            return (int)mh$.invokeExact(a, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicGet$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"SDL_AtomicGet");
    }
    /**
     * {@snippet :
     * int SDL_AtomicGet(SDL_atomic_t* a);
     * }
     */
    public static int SDL_AtomicGet(MemorySegment a) {
        var mh$ = SDL_AtomicGet$MH();
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$0,"SDL_AtomicAdd");
    }
    /**
     * {@snippet :
     * int SDL_AtomicAdd(SDL_atomic_t* a, int v);
     * }
     */
    public static int SDL_AtomicAdd(MemorySegment a, int v) {
        var mh$ = SDL_AtomicAdd$MH();
        try {
            return (int)mh$.invokeExact(a, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicCASPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"SDL_AtomicCASPtr");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_AtomicCASPtr(void** a, void* oldval, void* newval);
     * }
     */
    public static int SDL_AtomicCASPtr(MemorySegment a, MemorySegment oldval, MemorySegment newval) {
        var mh$ = SDL_AtomicCASPtr$MH();
        try {
            return (int)mh$.invokeExact(a, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicSetPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"SDL_AtomicSetPtr");
    }
    /**
     * {@snippet :
     * void* SDL_AtomicSetPtr(void** a, void* v);
     * }
     */
    public static MemorySegment SDL_AtomicSetPtr(MemorySegment a, MemorySegment v) {
        var mh$ = SDL_AtomicSetPtr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AtomicGetPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$5,"SDL_AtomicGetPtr");
    }
    /**
     * {@snippet :
     * void* SDL_AtomicGetPtr(void** a);
     * }
     */
    public static MemorySegment SDL_AtomicGetPtr(MemorySegment a) {
        var mh$ = SDL_AtomicGetPtr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetError$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$0,"SDL_SetError");
    }
    /**
     * {@snippet :
     * int SDL_SetError(char* fmt,...);
     * }
     */
    public static int SDL_SetError(MemorySegment fmt, Object... x1) {
        var mh$ = SDL_SetError$MH();
        try {
            return (int)mh$.invokeExact(fmt, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetError$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"SDL_GetError");
    }
    /**
     * {@snippet :
     * char* SDL_GetError();
     * }
     */
    public static MemorySegment SDL_GetError() {
        var mh$ = SDL_GetError$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetErrorMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"SDL_GetErrorMsg");
    }
    /**
     * {@snippet :
     * char* SDL_GetErrorMsg(char* errstr, int maxlen);
     * }
     */
    public static MemorySegment SDL_GetErrorMsg(MemorySegment errstr, int maxlen) {
        var mh$ = SDL_GetErrorMsg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(errstr, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ClearError$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"SDL_ClearError");
    }
    /**
     * {@snippet :
     * void SDL_ClearError();
     * }
     */
    public static void SDL_ClearError() {
        var mh$ = SDL_ClearError$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_ENOMEM = 0;
     * }
     */
    public static int SDL_ENOMEM() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_ENOMEM = SDL_ENOMEM();
    /**
     * {@snippet :
     * enum .SDL_EFREAD = 1;
     * }
     */
    public static int SDL_EFREAD() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_EFREAD = SDL_EFREAD();
    /**
     * {@snippet :
     * enum .SDL_EFWRITE = 2;
     * }
     */
    public static int SDL_EFWRITE() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_EFWRITE = SDL_EFWRITE();
    /**
     * {@snippet :
     * enum .SDL_EFSEEK = 3;
     * }
     */
    public static int SDL_EFSEEK() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_EFSEEK = SDL_EFSEEK();
    /**
     * {@snippet :
     * enum .SDL_UNSUPPORTED = 4;
     * }
     */
    public static int SDL_UNSUPPORTED() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_UNSUPPORTED = SDL_UNSUPPORTED();
    /**
     * {@snippet :
     * enum .SDL_LASTERROR = 5;
     * }
     */
    public static int SDL_LASTERROR() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_LASTERROR = SDL_LASTERROR();
    public static MethodHandle SDL_Error$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$6,"SDL_Error");
    }
    /**
     * {@snippet :
     * int SDL_Error(SDL_errorcode code);
     * }
     */
    public static int SDL_Error(int code) {
        var mh$ = SDL_Error$MH();
        try {
            return (int)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$0,"SDL_CreateMutex");
    }
    /**
     * {@snippet :
     * SDL_mutex* SDL_CreateMutex();
     * }
     */
    public static MemorySegment SDL_CreateMutex() {
        var mh$ = SDL_CreateMutex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"SDL_LockMutex");
    }
    /**
     * {@snippet :
     * int SDL_LockMutex(SDL_mutex* mutex);
     * }
     */
    public static int SDL_LockMutex(MemorySegment mutex) {
        var mh$ = SDL_LockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_TryLockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2,"SDL_TryLockMutex");
    }
    /**
     * {@snippet :
     * int SDL_TryLockMutex(SDL_mutex* mutex);
     * }
     */
    public static int SDL_TryLockMutex(MemorySegment mutex) {
        var mh$ = SDL_TryLockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$3,"SDL_UnlockMutex");
    }
    /**
     * {@snippet :
     * int SDL_UnlockMutex(SDL_mutex* mutex);
     * }
     */
    public static int SDL_UnlockMutex(MemorySegment mutex) {
        var mh$ = SDL_UnlockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"SDL_DestroyMutex");
    }
    /**
     * {@snippet :
     * void SDL_DestroyMutex(SDL_mutex* mutex);
     * }
     */
    public static void SDL_DestroyMutex(MemorySegment mutex) {
        var mh$ = SDL_DestroyMutex$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$6,"SDL_CreateSemaphore");
    }
    /**
     * {@snippet :
     * SDL_sem* SDL_CreateSemaphore(Uint32 initial_value);
     * }
     */
    public static MemorySegment SDL_CreateSemaphore(int initial_value) {
        var mh$ = SDL_CreateSemaphore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(initial_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroySemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"SDL_DestroySemaphore");
    }
    /**
     * {@snippet :
     * void SDL_DestroySemaphore(SDL_sem* sem);
     * }
     */
    public static void SDL_DestroySemaphore(MemorySegment sem) {
        var mh$ = SDL_DestroySemaphore$MH();
        try {
            mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemWait$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"SDL_SemWait");
    }
    /**
     * {@snippet :
     * int SDL_SemWait(SDL_sem* sem);
     * }
     */
    public static int SDL_SemWait(MemorySegment sem) {
        var mh$ = SDL_SemWait$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemTryWait$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"SDL_SemTryWait");
    }
    /**
     * {@snippet :
     * int SDL_SemTryWait(SDL_sem* sem);
     * }
     */
    public static int SDL_SemTryWait(MemorySegment sem) {
        var mh$ = SDL_SemTryWait$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemWaitTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"SDL_SemWaitTimeout");
    }
    /**
     * {@snippet :
     * int SDL_SemWaitTimeout(SDL_sem* sem, Uint32 ms);
     * }
     */
    public static int SDL_SemWaitTimeout(MemorySegment sem, int ms) {
        var mh$ = SDL_SemWaitTimeout$MH();
        try {
            return (int)mh$.invokeExact(sem, ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemPost$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"SDL_SemPost");
    }
    /**
     * {@snippet :
     * int SDL_SemPost(SDL_sem* sem);
     * }
     */
    public static int SDL_SemPost(MemorySegment sem) {
        var mh$ = SDL_SemPost$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemValue$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"SDL_SemValue");
    }
    /**
     * {@snippet :
     * Uint32 SDL_SemValue(SDL_sem* sem);
     * }
     */
    public static int SDL_SemValue(MemorySegment sem) {
        var mh$ = SDL_SemValue$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateCond$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"SDL_CreateCond");
    }
    /**
     * {@snippet :
     * SDL_cond* SDL_CreateCond();
     * }
     */
    public static MemorySegment SDL_CreateCond() {
        var mh$ = SDL_CreateCond$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyCond$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"SDL_DestroyCond");
    }
    /**
     * {@snippet :
     * void SDL_DestroyCond(SDL_cond* cond);
     * }
     */
    public static void SDL_DestroyCond(MemorySegment cond) {
        var mh$ = SDL_DestroyCond$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondSignal$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"SDL_CondSignal");
    }
    /**
     * {@snippet :
     * int SDL_CondSignal(SDL_cond* cond);
     * }
     */
    public static int SDL_CondSignal(MemorySegment cond) {
        var mh$ = SDL_CondSignal$MH();
        try {
            return (int)mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondBroadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3,"SDL_CondBroadcast");
    }
    /**
     * {@snippet :
     * int SDL_CondBroadcast(SDL_cond* cond);
     * }
     */
    public static int SDL_CondBroadcast(MemorySegment cond) {
        var mh$ = SDL_CondBroadcast$MH();
        try {
            return (int)mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondWait$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"SDL_CondWait");
    }
    /**
     * {@snippet :
     * int SDL_CondWait(SDL_cond* cond, SDL_mutex* mutex);
     * }
     */
    public static int SDL_CondWait(MemorySegment cond, MemorySegment mutex) {
        var mh$ = SDL_CondWait$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondWaitTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$6,"SDL_CondWaitTimeout");
    }
    /**
     * {@snippet :
     * int SDL_CondWaitTimeout(SDL_cond* cond, SDL_mutex* mutex, Uint32 ms);
     * }
     */
    public static int SDL_CondWaitTimeout(MemorySegment cond, MemorySegment mutex, int ms) {
        var mh$ = SDL_CondWaitTimeout$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex, ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long SDL_threadID;
     * }
     */
    public static final OfLong SDL_threadID = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int SDL_TLSID;
     * }
     */
    public static final OfInt SDL_TLSID = JAVA_INT;
    /**
     * {@snippet :
     * enum .SDL_THREAD_PRIORITY_LOW = 0;
     * }
     */
    public static int SDL_THREAD_PRIORITY_LOW() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_THREAD_PRIORITY_LOW = SDL_THREAD_PRIORITY_LOW();
    /**
     * {@snippet :
     * enum .SDL_THREAD_PRIORITY_NORMAL = 1;
     * }
     */
    public static int SDL_THREAD_PRIORITY_NORMAL() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_THREAD_PRIORITY_NORMAL = SDL_THREAD_PRIORITY_NORMAL();
    /**
     * {@snippet :
     * enum .SDL_THREAD_PRIORITY_HIGH = 2;
     * }
     */
    public static int SDL_THREAD_PRIORITY_HIGH() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_THREAD_PRIORITY_HIGH = SDL_THREAD_PRIORITY_HIGH();
    /**
     * {@snippet :
     * enum .SDL_THREAD_PRIORITY_TIME_CRITICAL = 3;
     * }
     */
    public static int SDL_THREAD_PRIORITY_TIME_CRITICAL() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_THREAD_PRIORITY_TIME_CRITICAL = SDL_THREAD_PRIORITY_TIME_CRITICAL();
    public static MethodHandle SDL_CreateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"SDL_CreateThread");
    }
    /**
     * {@snippet :
     * SDL_Thread* SDL_CreateThread(SDL_ThreadFunction fn, char* name, void* data);
     * }
     */
    public static MemorySegment SDL_CreateThread(MemorySegment fn, MemorySegment name, MemorySegment data) {
        var mh$ = SDL_CreateThread$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fn, name, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateThreadWithStackSize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"SDL_CreateThreadWithStackSize");
    }
    /**
     * {@snippet :
     * SDL_Thread* SDL_CreateThreadWithStackSize(SDL_ThreadFunction fn, char* name, const size_t stacksize, void* data);
     * }
     */
    public static MemorySegment SDL_CreateThreadWithStackSize(MemorySegment fn, MemorySegment name, long stacksize, MemorySegment data) {
        var mh$ = SDL_CreateThreadWithStackSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fn, name, stacksize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetThreadName$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$0,"SDL_GetThreadName");
    }
    /**
     * {@snippet :
     * char* SDL_GetThreadName(SDL_Thread* thread);
     * }
     */
    public static MemorySegment SDL_GetThreadName(MemorySegment thread) {
        var mh$ = SDL_GetThreadName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ThreadID$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"SDL_ThreadID");
    }
    /**
     * {@snippet :
     * SDL_threadID SDL_ThreadID();
     * }
     */
    public static long SDL_ThreadID() {
        var mh$ = SDL_ThreadID$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetThreadID$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4,"SDL_GetThreadID");
    }
    /**
     * {@snippet :
     * SDL_threadID SDL_GetThreadID(SDL_Thread* thread);
     * }
     */
    public static long SDL_GetThreadID(MemorySegment thread) {
        var mh$ = SDL_GetThreadID$MH();
        try {
            return (long)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"SDL_SetThreadPriority");
    }
    /**
     * {@snippet :
     * int SDL_SetThreadPriority(SDL_ThreadPriority priority);
     * }
     */
    public static int SDL_SetThreadPriority(int priority) {
        var mh$ = SDL_SetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WaitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"SDL_WaitThread");
    }
    /**
     * {@snippet :
     * void SDL_WaitThread(SDL_Thread* thread, int* status);
     * }
     */
    public static void SDL_WaitThread(MemorySegment thread, MemorySegment status) {
        var mh$ = SDL_WaitThread$MH();
        try {
            mh$.invokeExact(thread, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DetachThread$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"SDL_DetachThread");
    }
    /**
     * {@snippet :
     * void SDL_DetachThread(SDL_Thread* thread);
     * }
     */
    public static void SDL_DetachThread(MemorySegment thread) {
        var mh$ = SDL_DetachThread$MH();
        try {
            mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_TLSCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"SDL_TLSCreate");
    }
    /**
     * {@snippet :
     * SDL_TLSID SDL_TLSCreate();
     * }
     */
    public static int SDL_TLSCreate() {
        var mh$ = SDL_TLSCreate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_TLSGet$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"SDL_TLSGet");
    }
    /**
     * {@snippet :
     * void* SDL_TLSGet(SDL_TLSID id);
     * }
     */
    public static MemorySegment SDL_TLSGet(int id) {
        var mh$ = SDL_TLSGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_TLSSet$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"SDL_TLSSet");
    }
    /**
     * {@snippet :
     * int SDL_TLSSet(SDL_TLSID id, void* value, void (*destructor)(void*));
     * }
     */
    public static int SDL_TLSSet(int id, MemorySegment value, MemorySegment destructor) {
        var mh$ = SDL_TLSSet$MH();
        try {
            return (int)mh$.invokeExact(id, value, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_TLSCleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"SDL_TLSCleanup");
    }
    /**
     * {@snippet :
     * void SDL_TLSCleanup();
     * }
     */
    public static void SDL_TLSCleanup() {
        var mh$ = SDL_TLSCleanup$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"SDL_RWFromFile");
    }
    /**
     * {@snippet :
     * SDL_RWops* SDL_RWFromFile(char* file, char* mode);
     * }
     */
    public static MemorySegment SDL_RWFromFile(MemorySegment file, MemorySegment mode) {
        var mh$ = SDL_RWFromFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromFP$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"SDL_RWFromFP");
    }
    /**
     * {@snippet :
     * SDL_RWops* SDL_RWFromFP(void* fp, SDL_bool autoclose);
     * }
     */
    public static MemorySegment SDL_RWFromFP(MemorySegment fp, int autoclose) {
        var mh$ = SDL_RWFromFP$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fp, autoclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromMem$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"SDL_RWFromMem");
    }
    /**
     * {@snippet :
     * SDL_RWops* SDL_RWFromMem(void* mem, int size);
     * }
     */
    public static MemorySegment SDL_RWFromMem(MemorySegment mem, int size) {
        var mh$ = SDL_RWFromMem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromConstMem$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"SDL_RWFromConstMem");
    }
    /**
     * {@snippet :
     * SDL_RWops* SDL_RWFromConstMem(void* mem, int size);
     * }
     */
    public static MemorySegment SDL_RWFromConstMem(MemorySegment mem, int size) {
        var mh$ = SDL_RWFromConstMem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AllocRW$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"SDL_AllocRW");
    }
    /**
     * {@snippet :
     * SDL_RWops* SDL_AllocRW();
     * }
     */
    public static MemorySegment SDL_AllocRW() {
        var mh$ = SDL_AllocRW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeRW$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"SDL_FreeRW");
    }
    /**
     * {@snippet :
     * void SDL_FreeRW(SDL_RWops* area);
     * }
     */
    public static void SDL_FreeRW(MemorySegment area) {
        var mh$ = SDL_FreeRW$MH();
        try {
            mh$.invokeExact(area);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWsize$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"SDL_RWsize");
    }
    /**
     * {@snippet :
     * Sint64 SDL_RWsize(SDL_RWops* context);
     * }
     */
    public static long SDL_RWsize(MemorySegment context) {
        var mh$ = SDL_RWsize$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWseek$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"SDL_RWseek");
    }
    /**
     * {@snippet :
     * Sint64 SDL_RWseek(SDL_RWops* context, Sint64 offset, int whence);
     * }
     */
    public static long SDL_RWseek(MemorySegment context, long offset, int whence) {
        var mh$ = SDL_RWseek$MH();
        try {
            return (long)mh$.invokeExact(context, offset, whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWtell$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"SDL_RWtell");
    }
    /**
     * {@snippet :
     * Sint64 SDL_RWtell(SDL_RWops* context);
     * }
     */
    public static long SDL_RWtell(MemorySegment context) {
        var mh$ = SDL_RWtell$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWread$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"SDL_RWread");
    }
    /**
     * {@snippet :
     * size_t SDL_RWread(SDL_RWops* context, void* ptr, size_t size, size_t maxnum);
     * }
     */
    public static long SDL_RWread(MemorySegment context, MemorySegment ptr, long size, long maxnum) {
        var mh$ = SDL_RWread$MH();
        try {
            return (long)mh$.invokeExact(context, ptr, size, maxnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"SDL_RWwrite");
    }
    /**
     * {@snippet :
     * size_t SDL_RWwrite(SDL_RWops* context, void* ptr, size_t size, size_t num);
     * }
     */
    public static long SDL_RWwrite(MemorySegment context, MemorySegment ptr, long size, long num) {
        var mh$ = SDL_RWwrite$MH();
        try {
            return (long)mh$.invokeExact(context, ptr, size, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWclose$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"SDL_RWclose");
    }
    /**
     * {@snippet :
     * int SDL_RWclose(SDL_RWops* context);
     * }
     */
    public static int SDL_RWclose(MemorySegment context) {
        var mh$ = SDL_RWclose$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadFile_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$6,"SDL_LoadFile_RW");
    }
    /**
     * {@snippet :
     * void* SDL_LoadFile_RW(SDL_RWops* src, size_t* datasize, int freesrc);
     * }
     */
    public static MemorySegment SDL_LoadFile_RW(MemorySegment src, MemorySegment datasize, int freesrc) {
        var mh$ = SDL_LoadFile_RW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, datasize, freesrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadFile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"SDL_LoadFile");
    }
    /**
     * {@snippet :
     * void* SDL_LoadFile(char* file, size_t* datasize);
     * }
     */
    public static MemorySegment SDL_LoadFile(MemorySegment file, MemorySegment datasize) {
        var mh$ = SDL_LoadFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file, datasize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadU8$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"SDL_ReadU8");
    }
    /**
     * {@snippet :
     * Uint8 SDL_ReadU8(SDL_RWops* src);
     * }
     */
    public static byte SDL_ReadU8(MemorySegment src) {
        var mh$ = SDL_ReadU8$MH();
        try {
            return (byte)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE16$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"SDL_ReadLE16");
    }
    /**
     * {@snippet :
     * Uint16 SDL_ReadLE16(SDL_RWops* src);
     * }
     */
    public static short SDL_ReadLE16(MemorySegment src) {
        var mh$ = SDL_ReadLE16$MH();
        try {
            return (short)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE16$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"SDL_ReadBE16");
    }
    /**
     * {@snippet :
     * Uint16 SDL_ReadBE16(SDL_RWops* src);
     * }
     */
    public static short SDL_ReadBE16(MemorySegment src) {
        var mh$ = SDL_ReadBE16$MH();
        try {
            return (short)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE32$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"SDL_ReadLE32");
    }
    /**
     * {@snippet :
     * Uint32 SDL_ReadLE32(SDL_RWops* src);
     * }
     */
    public static int SDL_ReadLE32(MemorySegment src) {
        var mh$ = SDL_ReadLE32$MH();
        try {
            return (int)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE32$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"SDL_ReadBE32");
    }
    /**
     * {@snippet :
     * Uint32 SDL_ReadBE32(SDL_RWops* src);
     * }
     */
    public static int SDL_ReadBE32(MemorySegment src) {
        var mh$ = SDL_ReadBE32$MH();
        try {
            return (int)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE64$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"SDL_ReadLE64");
    }
    /**
     * {@snippet :
     * Uint64 SDL_ReadLE64(SDL_RWops* src);
     * }
     */
    public static long SDL_ReadLE64(MemorySegment src) {
        var mh$ = SDL_ReadLE64$MH();
        try {
            return (long)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE64$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"SDL_ReadBE64");
    }
    /**
     * {@snippet :
     * Uint64 SDL_ReadBE64(SDL_RWops* src);
     * }
     */
    public static long SDL_ReadBE64(MemorySegment src) {
        var mh$ = SDL_ReadBE64$MH();
        try {
            return (long)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteU8$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"SDL_WriteU8");
    }
    /**
     * {@snippet :
     * size_t SDL_WriteU8(SDL_RWops* dst, Uint8 value);
     * }
     */
    public static long SDL_WriteU8(MemorySegment dst, byte value) {
        var mh$ = SDL_WriteU8$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE16$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"SDL_WriteLE16");
    }
    /**
     * {@snippet :
     * size_t SDL_WriteLE16(SDL_RWops* dst, Uint16 value);
     * }
     */
    public static long SDL_WriteLE16(MemorySegment dst, short value) {
        var mh$ = SDL_WriteLE16$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE16$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"SDL_WriteBE16");
    }
    /**
     * {@snippet :
     * size_t SDL_WriteBE16(SDL_RWops* dst, Uint16 value);
     * }
     */
    public static long SDL_WriteBE16(MemorySegment dst, short value) {
        var mh$ = SDL_WriteBE16$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE32$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"SDL_WriteLE32");
    }
    /**
     * {@snippet :
     * size_t SDL_WriteLE32(SDL_RWops* dst, Uint32 value);
     * }
     */
    public static long SDL_WriteLE32(MemorySegment dst, int value) {
        var mh$ = SDL_WriteLE32$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE32$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"SDL_WriteBE32");
    }
    /**
     * {@snippet :
     * size_t SDL_WriteBE32(SDL_RWops* dst, Uint32 value);
     * }
     */
    public static long SDL_WriteBE32(MemorySegment dst, int value) {
        var mh$ = SDL_WriteBE32$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE64$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"SDL_WriteLE64");
    }
    /**
     * {@snippet :
     * size_t SDL_WriteLE64(SDL_RWops* dst, Uint64 value);
     * }
     */
    public static long SDL_WriteLE64(MemorySegment dst, long value) {
        var mh$ = SDL_WriteLE64$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE64$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"SDL_WriteBE64");
    }
    /**
     * {@snippet :
     * size_t SDL_WriteBE64(SDL_RWops* dst, Uint64 value);
     * }
     */
    public static long SDL_WriteBE64(MemorySegment dst, long value) {
        var mh$ = SDL_WriteBE64$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned short SDL_AudioFormat;
     * }
     */
    public static final OfShort SDL_AudioFormat = JAVA_SHORT;
    public static MethodHandle SDL_GetNumAudioDrivers$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"SDL_GetNumAudioDrivers");
    }
    /**
     * {@snippet :
     * int SDL_GetNumAudioDrivers();
     * }
     */
    public static int SDL_GetNumAudioDrivers() {
        var mh$ = SDL_GetNumAudioDrivers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetAudioDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"SDL_GetAudioDriver");
    }
    /**
     * {@snippet :
     * char* SDL_GetAudioDriver(int index);
     * }
     */
    public static MemorySegment SDL_GetAudioDriver(int index) {
        var mh$ = SDL_GetAudioDriver$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AudioInit$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"SDL_AudioInit");
    }
    /**
     * {@snippet :
     * int SDL_AudioInit(char* driver_name);
     * }
     */
    public static int SDL_AudioInit(MemorySegment driver_name) {
        var mh$ = SDL_AudioInit$MH();
        try {
            return (int)mh$.invokeExact(driver_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AudioQuit$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"SDL_AudioQuit");
    }
    /**
     * {@snippet :
     * void SDL_AudioQuit();
     * }
     */
    public static void SDL_AudioQuit() {
        var mh$ = SDL_AudioQuit$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCurrentAudioDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4,"SDL_GetCurrentAudioDriver");
    }
    /**
     * {@snippet :
     * char* SDL_GetCurrentAudioDriver();
     * }
     */
    public static MemorySegment SDL_GetCurrentAudioDriver() {
        var mh$ = SDL_GetCurrentAudioDriver$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OpenAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"SDL_OpenAudio");
    }
    /**
     * {@snippet :
     * int SDL_OpenAudio(SDL_AudioSpec* desired, SDL_AudioSpec* obtained);
     * }
     */
    public static int SDL_OpenAudio(MemorySegment desired, MemorySegment obtained) {
        var mh$ = SDL_OpenAudio$MH();
        try {
            return (int)mh$.invokeExact(desired, obtained);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int SDL_AudioDeviceID;
     * }
     */
    public static final OfInt SDL_AudioDeviceID = JAVA_INT;
    public static MethodHandle SDL_GetNumAudioDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"SDL_GetNumAudioDevices");
    }
    /**
     * {@snippet :
     * int SDL_GetNumAudioDevices(int iscapture);
     * }
     */
    public static int SDL_GetNumAudioDevices(int iscapture) {
        var mh$ = SDL_GetNumAudioDevices$MH();
        try {
            return (int)mh$.invokeExact(iscapture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetAudioDeviceName$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"SDL_GetAudioDeviceName");
    }
    /**
     * {@snippet :
     * char* SDL_GetAudioDeviceName(int index, int iscapture);
     * }
     */
    public static MemorySegment SDL_GetAudioDeviceName(int index, int iscapture) {
        var mh$ = SDL_GetAudioDeviceName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(index, iscapture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetAudioDeviceSpec$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"SDL_GetAudioDeviceSpec");
    }
    /**
     * {@snippet :
     * int SDL_GetAudioDeviceSpec(int index, int iscapture, SDL_AudioSpec* spec);
     * }
     */
    public static int SDL_GetAudioDeviceSpec(int index, int iscapture, MemorySegment spec) {
        var mh$ = SDL_GetAudioDeviceSpec$MH();
        try {
            return (int)mh$.invokeExact(index, iscapture, spec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDefaultAudioInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"SDL_GetDefaultAudioInfo");
    }
    /**
     * {@snippet :
     * int SDL_GetDefaultAudioInfo(char** name, SDL_AudioSpec* spec, int iscapture);
     * }
     */
    public static int SDL_GetDefaultAudioInfo(MemorySegment name, MemorySegment spec, int iscapture) {
        var mh$ = SDL_GetDefaultAudioInfo$MH();
        try {
            return (int)mh$.invokeExact(name, spec, iscapture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OpenAudioDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"SDL_OpenAudioDevice");
    }
    /**
     * {@snippet :
     * SDL_AudioDeviceID SDL_OpenAudioDevice(char* device, int iscapture, const SDL_AudioSpec* desired, SDL_AudioSpec* obtained, int allowed_changes);
     * }
     */
    public static int SDL_OpenAudioDevice(MemorySegment device, int iscapture, MemorySegment desired, MemorySegment obtained, int allowed_changes) {
        var mh$ = SDL_OpenAudioDevice$MH();
        try {
            return (int)mh$.invokeExact(device, iscapture, desired, obtained, allowed_changes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_AUDIO_STOPPED = 0;
     * }
     */
    public static int SDL_AUDIO_STOPPED() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_AUDIO_STOPPED = SDL_AUDIO_STOPPED();
    /**
     * {@snippet :
     * enum .SDL_AUDIO_PLAYING = 1;
     * }
     */
    public static int SDL_AUDIO_PLAYING() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_AUDIO_PLAYING = SDL_AUDIO_PLAYING();
    /**
     * {@snippet :
     * enum .SDL_AUDIO_PAUSED = 2;
     * }
     */
    public static int SDL_AUDIO_PAUSED() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_AUDIO_PAUSED = SDL_AUDIO_PAUSED();
    public static MethodHandle SDL_GetAudioStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"SDL_GetAudioStatus");
    }
    /**
     * {@snippet :
     * SDL_AudioStatus SDL_GetAudioStatus();
     * }
     */
    public static int SDL_GetAudioStatus() {
        var mh$ = SDL_GetAudioStatus$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetAudioDeviceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"SDL_GetAudioDeviceStatus");
    }
    /**
     * {@snippet :
     * SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);
     * }
     */
    public static int SDL_GetAudioDeviceStatus(int dev) {
        var mh$ = SDL_GetAudioDeviceStatus$MH();
        try {
            return (int)mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PauseAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"SDL_PauseAudio");
    }
    /**
     * {@snippet :
     * void SDL_PauseAudio(int pause_on);
     * }
     */
    public static void SDL_PauseAudio(int pause_on) {
        var mh$ = SDL_PauseAudio$MH();
        try {
            mh$.invokeExact(pause_on);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PauseAudioDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"SDL_PauseAudioDevice");
    }
    /**
     * {@snippet :
     * void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on);
     * }
     */
    public static void SDL_PauseAudioDevice(int dev, int pause_on) {
        var mh$ = SDL_PauseAudioDevice$MH();
        try {
            mh$.invokeExact(dev, pause_on);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadWAV_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"SDL_LoadWAV_RW");
    }
    /**
     * {@snippet :
     * SDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops* src, int freesrc, SDL_AudioSpec* spec, Uint8** audio_buf, Uint32* audio_len);
     * }
     */
    public static MemorySegment SDL_LoadWAV_RW(MemorySegment src, int freesrc, MemorySegment spec, MemorySegment audio_buf, MemorySegment audio_len) {
        var mh$ = SDL_LoadWAV_RW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, freesrc, spec, audio_buf, audio_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeWAV$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"SDL_FreeWAV");
    }
    /**
     * {@snippet :
     * void SDL_FreeWAV(Uint8* audio_buf);
     * }
     */
    public static void SDL_FreeWAV(MemorySegment audio_buf) {
        var mh$ = SDL_FreeWAV$MH();
        try {
            mh$.invokeExact(audio_buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_BuildAudioCVT$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$6,"SDL_BuildAudioCVT");
    }
    /**
     * {@snippet :
     * int SDL_BuildAudioCVT(SDL_AudioCVT* cvt, SDL_AudioFormat src_format, Uint8 src_channels, int src_rate, SDL_AudioFormat dst_format, Uint8 dst_channels, int dst_rate);
     * }
     */
    public static int SDL_BuildAudioCVT(MemorySegment cvt, short src_format, byte src_channels, int src_rate, short dst_format, byte dst_channels, int dst_rate) {
        var mh$ = SDL_BuildAudioCVT$MH();
        try {
            return (int)mh$.invokeExact(cvt, src_format, src_channels, src_rate, dst_format, dst_channels, dst_rate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ConvertAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"SDL_ConvertAudio");
    }
    /**
     * {@snippet :
     * int SDL_ConvertAudio(SDL_AudioCVT* cvt);
     * }
     */
    public static int SDL_ConvertAudio(MemorySegment cvt) {
        var mh$ = SDL_ConvertAudio$MH();
        try {
            return (int)mh$.invokeExact(cvt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NewAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"SDL_NewAudioStream");
    }
    /**
     * {@snippet :
     * SDL_AudioStream* SDL_NewAudioStream(const SDL_AudioFormat src_format, const Uint8 src_channels, int src_rate, const SDL_AudioFormat dst_format, const Uint8 dst_channels, int dst_rate);
     * }
     */
    public static MemorySegment SDL_NewAudioStream(short src_format, byte src_channels, int src_rate, short dst_format, byte dst_channels, int dst_rate) {
        var mh$ = SDL_NewAudioStream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src_format, src_channels, src_rate, dst_format, dst_channels, dst_rate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AudioStreamPut$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"SDL_AudioStreamPut");
    }
    /**
     * {@snippet :
     * int SDL_AudioStreamPut(SDL_AudioStream* stream, void* buf, int len);
     * }
     */
    public static int SDL_AudioStreamPut(MemorySegment stream, MemorySegment buf, int len) {
        var mh$ = SDL_AudioStreamPut$MH();
        try {
            return (int)mh$.invokeExact(stream, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AudioStreamGet$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"SDL_AudioStreamGet");
    }
    /**
     * {@snippet :
     * int SDL_AudioStreamGet(SDL_AudioStream* stream, void* buf, int len);
     * }
     */
    public static int SDL_AudioStreamGet(MemorySegment stream, MemorySegment buf, int len) {
        var mh$ = SDL_AudioStreamGet$MH();
        try {
            return (int)mh$.invokeExact(stream, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AudioStreamAvailable$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"SDL_AudioStreamAvailable");
    }
    /**
     * {@snippet :
     * int SDL_AudioStreamAvailable(SDL_AudioStream* stream);
     * }
     */
    public static int SDL_AudioStreamAvailable(MemorySegment stream) {
        var mh$ = SDL_AudioStreamAvailable$MH();
        try {
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AudioStreamFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"SDL_AudioStreamFlush");
    }
    /**
     * {@snippet :
     * int SDL_AudioStreamFlush(SDL_AudioStream* stream);
     * }
     */
    public static int SDL_AudioStreamFlush(MemorySegment stream) {
        var mh$ = SDL_AudioStreamFlush$MH();
        try {
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AudioStreamClear$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"SDL_AudioStreamClear");
    }
    /**
     * {@snippet :
     * void SDL_AudioStreamClear(SDL_AudioStream* stream);
     * }
     */
    public static void SDL_AudioStreamClear(MemorySegment stream) {
        var mh$ = SDL_AudioStreamClear$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"SDL_FreeAudioStream");
    }
    /**
     * {@snippet :
     * void SDL_FreeAudioStream(SDL_AudioStream* stream);
     * }
     */
    public static void SDL_FreeAudioStream(MemorySegment stream) {
        var mh$ = SDL_FreeAudioStream$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MixAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"SDL_MixAudio");
    }
    /**
     * {@snippet :
     * void SDL_MixAudio(Uint8* dst, const Uint8* src, Uint32 len, int volume);
     * }
     */
    public static void SDL_MixAudio(MemorySegment dst, MemorySegment src, int len, int volume) {
        var mh$ = SDL_MixAudio$MH();
        try {
            mh$.invokeExact(dst, src, len, volume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MixAudioFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$6,"SDL_MixAudioFormat");
    }
    /**
     * {@snippet :
     * void SDL_MixAudioFormat(Uint8* dst, const Uint8* src, SDL_AudioFormat format, Uint32 len, int volume);
     * }
     */
    public static void SDL_MixAudioFormat(MemorySegment dst, MemorySegment src, short format, int len, int volume) {
        var mh$ = SDL_MixAudioFormat$MH();
        try {
            mh$.invokeExact(dst, src, format, len, volume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_QueueAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"SDL_QueueAudio");
    }
    /**
     * {@snippet :
     * int SDL_QueueAudio(SDL_AudioDeviceID dev, void* data, Uint32 len);
     * }
     */
    public static int SDL_QueueAudio(int dev, MemorySegment data, int len) {
        var mh$ = SDL_QueueAudio$MH();
        try {
            return (int)mh$.invokeExact(dev, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DequeueAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"SDL_DequeueAudio");
    }
    /**
     * {@snippet :
     * Uint32 SDL_DequeueAudio(SDL_AudioDeviceID dev, void* data, Uint32 len);
     * }
     */
    public static int SDL_DequeueAudio(int dev, MemorySegment data, int len) {
        var mh$ = SDL_DequeueAudio$MH();
        try {
            return (int)mh$.invokeExact(dev, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetQueuedAudioSize$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"SDL_GetQueuedAudioSize");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);
     * }
     */
    public static int SDL_GetQueuedAudioSize(int dev) {
        var mh$ = SDL_GetQueuedAudioSize$MH();
        try {
            return (int)mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ClearQueuedAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"SDL_ClearQueuedAudio");
    }
    /**
     * {@snippet :
     * void SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);
     * }
     */
    public static void SDL_ClearQueuedAudio(int dev) {
        var mh$ = SDL_ClearQueuedAudio$MH();
        try {
            mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"SDL_LockAudio");
    }
    /**
     * {@snippet :
     * void SDL_LockAudio();
     * }
     */
    public static void SDL_LockAudio() {
        var mh$ = SDL_LockAudio$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockAudioDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"SDL_LockAudioDevice");
    }
    /**
     * {@snippet :
     * void SDL_LockAudioDevice(SDL_AudioDeviceID dev);
     * }
     */
    public static void SDL_LockAudioDevice(int dev) {
        var mh$ = SDL_LockAudioDevice$MH();
        try {
            mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"SDL_UnlockAudio");
    }
    /**
     * {@snippet :
     * void SDL_UnlockAudio();
     * }
     */
    public static void SDL_UnlockAudio() {
        var mh$ = SDL_UnlockAudio$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockAudioDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"SDL_UnlockAudioDevice");
    }
    /**
     * {@snippet :
     * void SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);
     * }
     */
    public static void SDL_UnlockAudioDevice(int dev) {
        var mh$ = SDL_UnlockAudioDevice$MH();
        try {
            mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CloseAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"SDL_CloseAudio");
    }
    /**
     * {@snippet :
     * void SDL_CloseAudio();
     * }
     */
    public static void SDL_CloseAudio() {
        var mh$ = SDL_CloseAudio$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CloseAudioDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"SDL_CloseAudioDevice");
    }
    /**
     * {@snippet :
     * void SDL_CloseAudioDevice(SDL_AudioDeviceID dev);
     * }
     */
    public static void SDL_CloseAudioDevice(int dev) {
        var mh$ = SDL_CloseAudioDevice$MH();
        try {
            mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetClipboardText$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"SDL_SetClipboardText");
    }
    /**
     * {@snippet :
     * int SDL_SetClipboardText(char* text);
     * }
     */
    public static int SDL_SetClipboardText(MemorySegment text) {
        var mh$ = SDL_SetClipboardText$MH();
        try {
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetClipboardText$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"SDL_GetClipboardText");
    }
    /**
     * {@snippet :
     * char* SDL_GetClipboardText();
     * }
     */
    public static MemorySegment SDL_GetClipboardText() {
        var mh$ = SDL_GetClipboardText$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasClipboardText$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"SDL_HasClipboardText");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasClipboardText();
     * }
     */
    public static int SDL_HasClipboardText() {
        var mh$ = SDL_HasClipboardText$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetPrimarySelectionText$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"SDL_SetPrimarySelectionText");
    }
    /**
     * {@snippet :
     * int SDL_SetPrimarySelectionText(char* text);
     * }
     */
    public static int SDL_SetPrimarySelectionText(MemorySegment text) {
        var mh$ = SDL_SetPrimarySelectionText$MH();
        try {
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetPrimarySelectionText$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"SDL_GetPrimarySelectionText");
    }
    /**
     * {@snippet :
     * char* SDL_GetPrimarySelectionText();
     * }
     */
    public static MemorySegment SDL_GetPrimarySelectionText() {
        var mh$ = SDL_GetPrimarySelectionText$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasPrimarySelectionText$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"SDL_HasPrimarySelectionText");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasPrimarySelectionText();
     * }
     */
    public static int SDL_HasPrimarySelectionText() {
        var mh$ = SDL_HasPrimarySelectionText$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCPUCount$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"SDL_GetCPUCount");
    }
    /**
     * {@snippet :
     * int SDL_GetCPUCount();
     * }
     */
    public static int SDL_GetCPUCount() {
        var mh$ = SDL_GetCPUCount$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCPUCacheLineSize$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"SDL_GetCPUCacheLineSize");
    }
    /**
     * {@snippet :
     * int SDL_GetCPUCacheLineSize();
     * }
     */
    public static int SDL_GetCPUCacheLineSize() {
        var mh$ = SDL_GetCPUCacheLineSize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasRDTSC$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"SDL_HasRDTSC");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasRDTSC();
     * }
     */
    public static int SDL_HasRDTSC() {
        var mh$ = SDL_HasRDTSC$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasAltiVec$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"SDL_HasAltiVec");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasAltiVec();
     * }
     */
    public static int SDL_HasAltiVec() {
        var mh$ = SDL_HasAltiVec$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasMMX$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"SDL_HasMMX");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasMMX();
     * }
     */
    public static int SDL_HasMMX() {
        var mh$ = SDL_HasMMX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Has3DNow$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"SDL_Has3DNow");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_Has3DNow();
     * }
     */
    public static int SDL_Has3DNow() {
        var mh$ = SDL_Has3DNow$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasSSE$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"SDL_HasSSE");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasSSE();
     * }
     */
    public static int SDL_HasSSE() {
        var mh$ = SDL_HasSSE$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasSSE2$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"SDL_HasSSE2");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasSSE2();
     * }
     */
    public static int SDL_HasSSE2() {
        var mh$ = SDL_HasSSE2$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasSSE3$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"SDL_HasSSE3");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasSSE3();
     * }
     */
    public static int SDL_HasSSE3() {
        var mh$ = SDL_HasSSE3$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasSSE41$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"SDL_HasSSE41");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasSSE41();
     * }
     */
    public static int SDL_HasSSE41() {
        var mh$ = SDL_HasSSE41$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasSSE42$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"SDL_HasSSE42");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasSSE42();
     * }
     */
    public static int SDL_HasSSE42() {
        var mh$ = SDL_HasSSE42$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasAVX$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"SDL_HasAVX");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasAVX();
     * }
     */
    public static int SDL_HasAVX() {
        var mh$ = SDL_HasAVX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasAVX2$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"SDL_HasAVX2");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasAVX2();
     * }
     */
    public static int SDL_HasAVX2() {
        var mh$ = SDL_HasAVX2$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasAVX512F$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"SDL_HasAVX512F");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasAVX512F();
     * }
     */
    public static int SDL_HasAVX512F() {
        var mh$ = SDL_HasAVX512F$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasARMSIMD$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"SDL_HasARMSIMD");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasARMSIMD();
     * }
     */
    public static int SDL_HasARMSIMD() {
        var mh$ = SDL_HasARMSIMD$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasNEON$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"SDL_HasNEON");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasNEON();
     * }
     */
    public static int SDL_HasNEON() {
        var mh$ = SDL_HasNEON$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasLSX$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"SDL_HasLSX");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasLSX();
     * }
     */
    public static int SDL_HasLSX() {
        var mh$ = SDL_HasLSX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasLASX$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"SDL_HasLASX");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasLASX();
     * }
     */
    public static int SDL_HasLASX() {
        var mh$ = SDL_HasLASX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetSystemRAM$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"SDL_GetSystemRAM");
    }
    /**
     * {@snippet :
     * int SDL_GetSystemRAM();
     * }
     */
    public static int SDL_GetSystemRAM() {
        var mh$ = SDL_GetSystemRAM$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SIMDGetAlignment$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"SDL_SIMDGetAlignment");
    }
    /**
     * {@snippet :
     * size_t SDL_SIMDGetAlignment();
     * }
     */
    public static long SDL_SIMDGetAlignment() {
        var mh$ = SDL_SIMDGetAlignment$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SIMDAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"SDL_SIMDAlloc");
    }
    /**
     * {@snippet :
     * void* SDL_SIMDAlloc(const size_t len);
     * }
     */
    public static MemorySegment SDL_SIMDAlloc(long len) {
        var mh$ = SDL_SIMDAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SIMDRealloc$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"SDL_SIMDRealloc");
    }
    /**
     * {@snippet :
     * void* SDL_SIMDRealloc(void* mem, const size_t len);
     * }
     */
    public static MemorySegment SDL_SIMDRealloc(MemorySegment mem, long len) {
        var mh$ = SDL_SIMDRealloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SIMDFree$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"SDL_SIMDFree");
    }
    /**
     * {@snippet :
     * void SDL_SIMDFree(void* ptr);
     * }
     */
    public static void SDL_SIMDFree(MemorySegment ptr) {
        var mh$ = SDL_SIMDFree$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_PIXELTYPE_UNKNOWN() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_PIXELTYPE_UNKNOWN = SDL_PIXELTYPE_UNKNOWN();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_INDEX1 = 1;
     * }
     */
    public static int SDL_PIXELTYPE_INDEX1() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_PIXELTYPE_INDEX1 = SDL_PIXELTYPE_INDEX1();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_INDEX4 = 2;
     * }
     */
    public static int SDL_PIXELTYPE_INDEX4() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_PIXELTYPE_INDEX4 = SDL_PIXELTYPE_INDEX4();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_INDEX8 = 3;
     * }
     */
    public static int SDL_PIXELTYPE_INDEX8() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_PIXELTYPE_INDEX8 = SDL_PIXELTYPE_INDEX8();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_PACKED8 = 4;
     * }
     */
    public static int SDL_PIXELTYPE_PACKED8() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_PIXELTYPE_PACKED8 = SDL_PIXELTYPE_PACKED8();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_PACKED16 = 5;
     * }
     */
    public static int SDL_PIXELTYPE_PACKED16() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_PIXELTYPE_PACKED16 = SDL_PIXELTYPE_PACKED16();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_PACKED32 = 6;
     * }
     */
    public static int SDL_PIXELTYPE_PACKED32() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_PIXELTYPE_PACKED32 = SDL_PIXELTYPE_PACKED32();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_ARRAYU8 = 7;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYU8() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_PIXELTYPE_ARRAYU8 = SDL_PIXELTYPE_ARRAYU8();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_ARRAYU16 = 8;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYU16() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_PIXELTYPE_ARRAYU16 = SDL_PIXELTYPE_ARRAYU16();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_ARRAYU32 = 9;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYU32() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDL_PIXELTYPE_ARRAYU32 = SDL_PIXELTYPE_ARRAYU32();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_ARRAYF16 = 10;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYF16() {
        return (int)10L;
    }
    /** (int)10L */
    public static final int SDL_PIXELTYPE_ARRAYF16 = SDL_PIXELTYPE_ARRAYF16();
    /**
     * {@snippet :
     * enum .SDL_PIXELTYPE_ARRAYF32 = 11;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYF32() {
        return (int)11L;
    }
    /** (int)11L */
    public static final int SDL_PIXELTYPE_ARRAYF32 = SDL_PIXELTYPE_ARRAYF32();
    /**
     * {@snippet :
     * enum .SDL_BITMAPORDER_NONE = 0;
     * }
     */
    public static int SDL_BITMAPORDER_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_BITMAPORDER_NONE = SDL_BITMAPORDER_NONE();
    /**
     * {@snippet :
     * enum .SDL_BITMAPORDER_4321 = 1;
     * }
     */
    public static int SDL_BITMAPORDER_4321() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_BITMAPORDER_4321 = SDL_BITMAPORDER_4321();
    /**
     * {@snippet :
     * enum .SDL_BITMAPORDER_1234 = 2;
     * }
     */
    public static int SDL_BITMAPORDER_1234() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_BITMAPORDER_1234 = SDL_BITMAPORDER_1234();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_NONE = 0;
     * }
     */
    public static int SDL_PACKEDORDER_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_PACKEDORDER_NONE = SDL_PACKEDORDER_NONE();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_XRGB = 1;
     * }
     */
    public static int SDL_PACKEDORDER_XRGB() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_PACKEDORDER_XRGB = SDL_PACKEDORDER_XRGB();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_RGBX = 2;
     * }
     */
    public static int SDL_PACKEDORDER_RGBX() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_PACKEDORDER_RGBX = SDL_PACKEDORDER_RGBX();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_ARGB = 3;
     * }
     */
    public static int SDL_PACKEDORDER_ARGB() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_PACKEDORDER_ARGB = SDL_PACKEDORDER_ARGB();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_RGBA = 4;
     * }
     */
    public static int SDL_PACKEDORDER_RGBA() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_PACKEDORDER_RGBA = SDL_PACKEDORDER_RGBA();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_XBGR = 5;
     * }
     */
    public static int SDL_PACKEDORDER_XBGR() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_PACKEDORDER_XBGR = SDL_PACKEDORDER_XBGR();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_BGRX = 6;
     * }
     */
    public static int SDL_PACKEDORDER_BGRX() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_PACKEDORDER_BGRX = SDL_PACKEDORDER_BGRX();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_ABGR = 7;
     * }
     */
    public static int SDL_PACKEDORDER_ABGR() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_PACKEDORDER_ABGR = SDL_PACKEDORDER_ABGR();
    /**
     * {@snippet :
     * enum .SDL_PACKEDORDER_BGRA = 8;
     * }
     */
    public static int SDL_PACKEDORDER_BGRA() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_PACKEDORDER_BGRA = SDL_PACKEDORDER_BGRA();
    /**
     * {@snippet :
     * enum .SDL_ARRAYORDER_NONE = 0;
     * }
     */
    public static int SDL_ARRAYORDER_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_ARRAYORDER_NONE = SDL_ARRAYORDER_NONE();
    /**
     * {@snippet :
     * enum .SDL_ARRAYORDER_RGB = 1;
     * }
     */
    public static int SDL_ARRAYORDER_RGB() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_ARRAYORDER_RGB = SDL_ARRAYORDER_RGB();
    /**
     * {@snippet :
     * enum .SDL_ARRAYORDER_RGBA = 2;
     * }
     */
    public static int SDL_ARRAYORDER_RGBA() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_ARRAYORDER_RGBA = SDL_ARRAYORDER_RGBA();
    /**
     * {@snippet :
     * enum .SDL_ARRAYORDER_ARGB = 3;
     * }
     */
    public static int SDL_ARRAYORDER_ARGB() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_ARRAYORDER_ARGB = SDL_ARRAYORDER_ARGB();
    /**
     * {@snippet :
     * enum .SDL_ARRAYORDER_BGR = 4;
     * }
     */
    public static int SDL_ARRAYORDER_BGR() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_ARRAYORDER_BGR = SDL_ARRAYORDER_BGR();
    /**
     * {@snippet :
     * enum .SDL_ARRAYORDER_BGRA = 5;
     * }
     */
    public static int SDL_ARRAYORDER_BGRA() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_ARRAYORDER_BGRA = SDL_ARRAYORDER_BGRA();
    /**
     * {@snippet :
     * enum .SDL_ARRAYORDER_ABGR = 6;
     * }
     */
    public static int SDL_ARRAYORDER_ABGR() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_ARRAYORDER_ABGR = SDL_ARRAYORDER_ABGR();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_NONE = 0;
     * }
     */
    public static int SDL_PACKEDLAYOUT_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_PACKEDLAYOUT_NONE = SDL_PACKEDLAYOUT_NONE();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_332 = 1;
     * }
     */
    public static int SDL_PACKEDLAYOUT_332() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_PACKEDLAYOUT_332 = SDL_PACKEDLAYOUT_332();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_4444 = 2;
     * }
     */
    public static int SDL_PACKEDLAYOUT_4444() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_PACKEDLAYOUT_4444 = SDL_PACKEDLAYOUT_4444();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_1555 = 3;
     * }
     */
    public static int SDL_PACKEDLAYOUT_1555() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_PACKEDLAYOUT_1555 = SDL_PACKEDLAYOUT_1555();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_5551 = 4;
     * }
     */
    public static int SDL_PACKEDLAYOUT_5551() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_PACKEDLAYOUT_5551 = SDL_PACKEDLAYOUT_5551();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_565 = 5;
     * }
     */
    public static int SDL_PACKEDLAYOUT_565() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_PACKEDLAYOUT_565 = SDL_PACKEDLAYOUT_565();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_8888 = 6;
     * }
     */
    public static int SDL_PACKEDLAYOUT_8888() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_PACKEDLAYOUT_8888 = SDL_PACKEDLAYOUT_8888();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_2101010 = 7;
     * }
     */
    public static int SDL_PACKEDLAYOUT_2101010() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_PACKEDLAYOUT_2101010 = SDL_PACKEDLAYOUT_2101010();
    /**
     * {@snippet :
     * enum .SDL_PACKEDLAYOUT_1010102 = 8;
     * }
     */
    public static int SDL_PACKEDLAYOUT_1010102() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_PACKEDLAYOUT_1010102 = SDL_PACKEDLAYOUT_1010102();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_UNKNOWN = 0;
     * }
     */
    public static int SDL_PIXELFORMAT_UNKNOWN() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_PIXELFORMAT_UNKNOWN = SDL_PIXELFORMAT_UNKNOWN();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_INDEX1LSB = 286261504;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX1LSB() {
        return (int)286261504L;
    }
    /** (int)286261504L */
    public static final int SDL_PIXELFORMAT_INDEX1LSB = SDL_PIXELFORMAT_INDEX1LSB();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_INDEX1MSB = 287310080;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX1MSB() {
        return (int)287310080L;
    }
    /** (int)287310080L */
    public static final int SDL_PIXELFORMAT_INDEX1MSB = SDL_PIXELFORMAT_INDEX1MSB();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_INDEX4LSB = 303039488;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX4LSB() {
        return (int)303039488L;
    }
    /** (int)303039488L */
    public static final int SDL_PIXELFORMAT_INDEX4LSB = SDL_PIXELFORMAT_INDEX4LSB();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_INDEX4MSB = 304088064;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX4MSB() {
        return (int)304088064L;
    }
    /** (int)304088064L */
    public static final int SDL_PIXELFORMAT_INDEX4MSB = SDL_PIXELFORMAT_INDEX4MSB();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_INDEX8 = 318769153;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX8() {
        return (int)318769153L;
    }
    /** (int)318769153L */
    public static final int SDL_PIXELFORMAT_INDEX8 = SDL_PIXELFORMAT_INDEX8();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGB332 = 336660481;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB332() {
        return (int)336660481L;
    }
    /** (int)336660481L */
    public static final int SDL_PIXELFORMAT_RGB332 = SDL_PIXELFORMAT_RGB332();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_XRGB4444 = 353504258;
     * }
     */
    public static int SDL_PIXELFORMAT_XRGB4444() {
        return (int)353504258L;
    }
    /** (int)353504258L */
    public static final int SDL_PIXELFORMAT_XRGB4444 = SDL_PIXELFORMAT_XRGB4444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGB444 = 353504258;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB444() {
        return (int)353504258L;
    }
    /** (int)353504258L */
    public static final int SDL_PIXELFORMAT_RGB444 = SDL_PIXELFORMAT_RGB444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_XBGR4444 = 357698562;
     * }
     */
    public static int SDL_PIXELFORMAT_XBGR4444() {
        return (int)357698562L;
    }
    /** (int)357698562L */
    public static final int SDL_PIXELFORMAT_XBGR4444 = SDL_PIXELFORMAT_XBGR4444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGR444 = 357698562;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR444() {
        return (int)357698562L;
    }
    /** (int)357698562L */
    public static final int SDL_PIXELFORMAT_BGR444 = SDL_PIXELFORMAT_BGR444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_XRGB1555 = 353570562;
     * }
     */
    public static int SDL_PIXELFORMAT_XRGB1555() {
        return (int)353570562L;
    }
    /** (int)353570562L */
    public static final int SDL_PIXELFORMAT_XRGB1555 = SDL_PIXELFORMAT_XRGB1555();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGB555 = 353570562;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB555() {
        return (int)353570562L;
    }
    /** (int)353570562L */
    public static final int SDL_PIXELFORMAT_RGB555 = SDL_PIXELFORMAT_RGB555();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_XBGR1555 = 357764866;
     * }
     */
    public static int SDL_PIXELFORMAT_XBGR1555() {
        return (int)357764866L;
    }
    /** (int)357764866L */
    public static final int SDL_PIXELFORMAT_XBGR1555 = SDL_PIXELFORMAT_XBGR1555();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGR555 = 357764866;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR555() {
        return (int)357764866L;
    }
    /** (int)357764866L */
    public static final int SDL_PIXELFORMAT_BGR555 = SDL_PIXELFORMAT_BGR555();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ARGB4444 = 355602434;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB4444() {
        return (int)355602434L;
    }
    /** (int)355602434L */
    public static final int SDL_PIXELFORMAT_ARGB4444 = SDL_PIXELFORMAT_ARGB4444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGBA4444 = 356651010;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA4444() {
        return (int)356651010L;
    }
    /** (int)356651010L */
    public static final int SDL_PIXELFORMAT_RGBA4444 = SDL_PIXELFORMAT_RGBA4444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ABGR4444 = 359796738;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR4444() {
        return (int)359796738L;
    }
    /** (int)359796738L */
    public static final int SDL_PIXELFORMAT_ABGR4444 = SDL_PIXELFORMAT_ABGR4444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGRA4444 = 360845314;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA4444() {
        return (int)360845314L;
    }
    /** (int)360845314L */
    public static final int SDL_PIXELFORMAT_BGRA4444 = SDL_PIXELFORMAT_BGRA4444();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ARGB1555 = 355667970;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB1555() {
        return (int)355667970L;
    }
    /** (int)355667970L */
    public static final int SDL_PIXELFORMAT_ARGB1555 = SDL_PIXELFORMAT_ARGB1555();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGBA5551 = 356782082;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA5551() {
        return (int)356782082L;
    }
    /** (int)356782082L */
    public static final int SDL_PIXELFORMAT_RGBA5551 = SDL_PIXELFORMAT_RGBA5551();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ABGR1555 = 359862274;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR1555() {
        return (int)359862274L;
    }
    /** (int)359862274L */
    public static final int SDL_PIXELFORMAT_ABGR1555 = SDL_PIXELFORMAT_ABGR1555();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGRA5551 = 360976386;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA5551() {
        return (int)360976386L;
    }
    /** (int)360976386L */
    public static final int SDL_PIXELFORMAT_BGRA5551 = SDL_PIXELFORMAT_BGRA5551();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGB565 = 353701890;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB565() {
        return (int)353701890L;
    }
    /** (int)353701890L */
    public static final int SDL_PIXELFORMAT_RGB565 = SDL_PIXELFORMAT_RGB565();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGR565 = 357896194;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR565() {
        return (int)357896194L;
    }
    /** (int)357896194L */
    public static final int SDL_PIXELFORMAT_BGR565 = SDL_PIXELFORMAT_BGR565();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGB24 = 386930691;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB24() {
        return (int)386930691L;
    }
    /** (int)386930691L */
    public static final int SDL_PIXELFORMAT_RGB24 = SDL_PIXELFORMAT_RGB24();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGR24 = 390076419;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR24() {
        return (int)390076419L;
    }
    /** (int)390076419L */
    public static final int SDL_PIXELFORMAT_BGR24 = SDL_PIXELFORMAT_BGR24();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_XRGB8888 = 370546692;
     * }
     */
    public static int SDL_PIXELFORMAT_XRGB8888() {
        return (int)370546692L;
    }
    /** (int)370546692L */
    public static final int SDL_PIXELFORMAT_XRGB8888 = SDL_PIXELFORMAT_XRGB8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGB888 = 370546692;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB888() {
        return (int)370546692L;
    }
    /** (int)370546692L */
    public static final int SDL_PIXELFORMAT_RGB888 = SDL_PIXELFORMAT_RGB888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGBX8888 = 371595268;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBX8888() {
        return (int)371595268L;
    }
    /** (int)371595268L */
    public static final int SDL_PIXELFORMAT_RGBX8888 = SDL_PIXELFORMAT_RGBX8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_XBGR8888 = 374740996;
     * }
     */
    public static int SDL_PIXELFORMAT_XBGR8888() {
        return (int)374740996L;
    }
    /** (int)374740996L */
    public static final int SDL_PIXELFORMAT_XBGR8888 = SDL_PIXELFORMAT_XBGR8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGR888 = 374740996;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR888() {
        return (int)374740996L;
    }
    /** (int)374740996L */
    public static final int SDL_PIXELFORMAT_BGR888 = SDL_PIXELFORMAT_BGR888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGRX8888 = 375789572;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRX8888() {
        return (int)375789572L;
    }
    /** (int)375789572L */
    public static final int SDL_PIXELFORMAT_BGRX8888 = SDL_PIXELFORMAT_BGRX8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ARGB8888 = 372645892;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB8888() {
        return (int)372645892L;
    }
    /** (int)372645892L */
    public static final int SDL_PIXELFORMAT_ARGB8888 = SDL_PIXELFORMAT_ARGB8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGBA8888 = 373694468;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA8888() {
        return (int)373694468L;
    }
    /** (int)373694468L */
    public static final int SDL_PIXELFORMAT_RGBA8888 = SDL_PIXELFORMAT_RGBA8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ABGR8888 = 376840196;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR8888() {
        return (int)376840196L;
    }
    /** (int)376840196L */
    public static final int SDL_PIXELFORMAT_ABGR8888 = SDL_PIXELFORMAT_ABGR8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGRA8888 = 377888772;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA8888() {
        return (int)377888772L;
    }
    /** (int)377888772L */
    public static final int SDL_PIXELFORMAT_BGRA8888 = SDL_PIXELFORMAT_BGRA8888();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ARGB2101010 = 372711428;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB2101010() {
        return (int)372711428L;
    }
    /** (int)372711428L */
    public static final int SDL_PIXELFORMAT_ARGB2101010 = SDL_PIXELFORMAT_ARGB2101010();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_RGBA32 = 376840196;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA32() {
        return (int)376840196L;
    }
    /** (int)376840196L */
    public static final int SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA32();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ARGB32 = 377888772;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB32() {
        return (int)377888772L;
    }
    /** (int)377888772L */
    public static final int SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB32();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_BGRA32 = 372645892;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA32() {
        return (int)372645892L;
    }
    /** (int)372645892L */
    public static final int SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA32();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_ABGR32 = 373694468;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR32() {
        return (int)373694468L;
    }
    /** (int)373694468L */
    public static final int SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR32();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_YV12 = 842094169;
     * }
     */
    public static int SDL_PIXELFORMAT_YV12() {
        return (int)842094169L;
    }
    /** (int)842094169L */
    public static final int SDL_PIXELFORMAT_YV12 = SDL_PIXELFORMAT_YV12();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_IYUV = 1448433993;
     * }
     */
    public static int SDL_PIXELFORMAT_IYUV() {
        return (int)1448433993L;
    }
    /** (int)1448433993L */
    public static final int SDL_PIXELFORMAT_IYUV = SDL_PIXELFORMAT_IYUV();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_YUY2 = 844715353;
     * }
     */
    public static int SDL_PIXELFORMAT_YUY2() {
        return (int)844715353L;
    }
    /** (int)844715353L */
    public static final int SDL_PIXELFORMAT_YUY2 = SDL_PIXELFORMAT_YUY2();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_UYVY = 1498831189;
     * }
     */
    public static int SDL_PIXELFORMAT_UYVY() {
        return (int)1498831189L;
    }
    /** (int)1498831189L */
    public static final int SDL_PIXELFORMAT_UYVY = SDL_PIXELFORMAT_UYVY();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_YVYU = 1431918169;
     * }
     */
    public static int SDL_PIXELFORMAT_YVYU() {
        return (int)1431918169L;
    }
    /** (int)1431918169L */
    public static final int SDL_PIXELFORMAT_YVYU = SDL_PIXELFORMAT_YVYU();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_NV12 = 842094158;
     * }
     */
    public static int SDL_PIXELFORMAT_NV12() {
        return (int)842094158L;
    }
    /** (int)842094158L */
    public static final int SDL_PIXELFORMAT_NV12 = SDL_PIXELFORMAT_NV12();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_NV21 = 825382478;
     * }
     */
    public static int SDL_PIXELFORMAT_NV21() {
        return (int)825382478L;
    }
    /** (int)825382478L */
    public static final int SDL_PIXELFORMAT_NV21 = SDL_PIXELFORMAT_NV21();
    /**
     * {@snippet :
     * enum .SDL_PIXELFORMAT_EXTERNAL_OES = 542328143;
     * }
     */
    public static int SDL_PIXELFORMAT_EXTERNAL_OES() {
        return (int)542328143L;
    }
    /** (int)542328143L */
    public static final int SDL_PIXELFORMAT_EXTERNAL_OES = SDL_PIXELFORMAT_EXTERNAL_OES();
    public static MethodHandle SDL_GetPixelFormatName$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"SDL_GetPixelFormatName");
    }
    /**
     * {@snippet :
     * char* SDL_GetPixelFormatName(Uint32 format);
     * }
     */
    public static MemorySegment SDL_GetPixelFormatName(int format) {
        var mh$ = SDL_GetPixelFormatName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PixelFormatEnumToMasks$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"SDL_PixelFormatEnumToMasks");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_PixelFormatEnumToMasks(Uint32 format, int* bpp, Uint32* Rmask, Uint32* Gmask, Uint32* Bmask, Uint32* Amask);
     * }
     */
    public static int SDL_PixelFormatEnumToMasks(int format, MemorySegment bpp, MemorySegment Rmask, MemorySegment Gmask, MemorySegment Bmask, MemorySegment Amask) {
        var mh$ = SDL_PixelFormatEnumToMasks$MH();
        try {
            return (int)mh$.invokeExact(format, bpp, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MasksToPixelFormatEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"SDL_MasksToPixelFormatEnum");
    }
    /**
     * {@snippet :
     * Uint32 SDL_MasksToPixelFormatEnum(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
     * }
     */
    public static int SDL_MasksToPixelFormatEnum(int bpp, int Rmask, int Gmask, int Bmask, int Amask) {
        var mh$ = SDL_MasksToPixelFormatEnum$MH();
        try {
            return (int)mh$.invokeExact(bpp, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AllocFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"SDL_AllocFormat");
    }
    /**
     * {@snippet :
     * SDL_PixelFormat* SDL_AllocFormat(Uint32 pixel_format);
     * }
     */
    public static MemorySegment SDL_AllocFormat(int pixel_format) {
        var mh$ = SDL_AllocFormat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixel_format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"SDL_FreeFormat");
    }
    /**
     * {@snippet :
     * void SDL_FreeFormat(SDL_PixelFormat* format);
     * }
     */
    public static void SDL_FreeFormat(MemorySegment format) {
        var mh$ = SDL_FreeFormat$MH();
        try {
            mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AllocPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0,"SDL_AllocPalette");
    }
    /**
     * {@snippet :
     * SDL_Palette* SDL_AllocPalette(int ncolors);
     * }
     */
    public static MemorySegment SDL_AllocPalette(int ncolors) {
        var mh$ = SDL_AllocPalette$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ncolors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetPixelFormatPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"SDL_SetPixelFormatPalette");
    }
    /**
     * {@snippet :
     * int SDL_SetPixelFormatPalette(SDL_PixelFormat* format, SDL_Palette* palette);
     * }
     */
    public static int SDL_SetPixelFormatPalette(MemorySegment format, MemorySegment palette) {
        var mh$ = SDL_SetPixelFormatPalette$MH();
        try {
            return (int)mh$.invokeExact(format, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetPaletteColors$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"SDL_SetPaletteColors");
    }
    /**
     * {@snippet :
     * int SDL_SetPaletteColors(SDL_Palette* palette, const SDL_Color* colors, int firstcolor, int ncolors);
     * }
     */
    public static int SDL_SetPaletteColors(MemorySegment palette, MemorySegment colors, int firstcolor, int ncolors) {
        var mh$ = SDL_SetPaletteColors$MH();
        try {
            return (int)mh$.invokeExact(palette, colors, firstcolor, ncolors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"SDL_FreePalette");
    }
    /**
     * {@snippet :
     * void SDL_FreePalette(SDL_Palette* palette);
     * }
     */
    public static void SDL_FreePalette(MemorySegment palette) {
        var mh$ = SDL_FreePalette$MH();
        try {
            mh$.invokeExact(palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MapRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$6,"SDL_MapRGB");
    }
    /**
     * {@snippet :
     * Uint32 SDL_MapRGB(const SDL_PixelFormat* format, Uint8 r, Uint8 g, Uint8 b);
     * }
     */
    public static int SDL_MapRGB(MemorySegment format, byte r, byte g, byte b) {
        var mh$ = SDL_MapRGB$MH();
        try {
            return (int)mh$.invokeExact(format, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MapRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"SDL_MapRGBA");
    }
    /**
     * {@snippet :
     * Uint32 SDL_MapRGBA(const SDL_PixelFormat* format, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
     * }
     */
    public static int SDL_MapRGBA(MemorySegment format, byte r, byte g, byte b, byte a) {
        var mh$ = SDL_MapRGBA$MH();
        try {
            return (int)mh$.invokeExact(format, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"SDL_GetRGB");
    }
    /**
     * {@snippet :
     * void SDL_GetRGB(Uint32 pixel, const SDL_PixelFormat* format, Uint8* r, Uint8* g, Uint8* b);
     * }
     */
    public static void SDL_GetRGB(int pixel, MemorySegment format, MemorySegment r, MemorySegment g, MemorySegment b) {
        var mh$ = SDL_GetRGB$MH();
        try {
            mh$.invokeExact(pixel, format, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"SDL_GetRGBA");
    }
    /**
     * {@snippet :
     * void SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormat* format, Uint8* r, Uint8* g, Uint8* b, Uint8* a);
     * }
     */
    public static void SDL_GetRGBA(int pixel, MemorySegment format, MemorySegment r, MemorySegment g, MemorySegment b, MemorySegment a) {
        var mh$ = SDL_GetRGBA$MH();
        try {
            mh$.invokeExact(pixel, format, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CalculateGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"SDL_CalculateGammaRamp");
    }
    /**
     * {@snippet :
     * void SDL_CalculateGammaRamp(float gamma, Uint16* ramp);
     * }
     */
    public static void SDL_CalculateGammaRamp(float gamma, MemorySegment ramp) {
        var mh$ = SDL_CalculateGammaRamp$MH();
        try {
            mh$.invokeExact(gamma, ramp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasIntersection$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"SDL_HasIntersection");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasIntersection(const SDL_Rect* A, const SDL_Rect* B);
     * }
     */
    public static int SDL_HasIntersection(MemorySegment A, MemorySegment B) {
        var mh$ = SDL_HasIntersection$MH();
        try {
            return (int)mh$.invokeExact(A, B);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectRect$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"SDL_IntersectRect");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IntersectRect(const SDL_Rect* A, const SDL_Rect* B, SDL_Rect* result);
     * }
     */
    public static int SDL_IntersectRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_IntersectRect$MH();
        try {
            return (int)mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnionRect$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"SDL_UnionRect");
    }
    /**
     * {@snippet :
     * void SDL_UnionRect(const SDL_Rect* A, const SDL_Rect* B, SDL_Rect* result);
     * }
     */
    public static void SDL_UnionRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_UnionRect$MH();
        try {
            mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EnclosePoints$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"SDL_EnclosePoints");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_EnclosePoints(const SDL_Point* points, int count, const SDL_Rect* clip, SDL_Rect* result);
     * }
     */
    public static int SDL_EnclosePoints(MemorySegment points, int count, MemorySegment clip, MemorySegment result) {
        var mh$ = SDL_EnclosePoints$MH();
        try {
            return (int)mh$.invokeExact(points, count, clip, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectRectAndLine$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"SDL_IntersectRectAndLine");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IntersectRectAndLine(const SDL_Rect* rect, int* X1, int* Y1, int* X2, int* Y2);
     * }
     */
    public static int SDL_IntersectRectAndLine(MemorySegment rect, MemorySegment X1, MemorySegment Y1, MemorySegment X2, MemorySegment Y2) {
        var mh$ = SDL_IntersectRectAndLine$MH();
        try {
            return (int)mh$.invokeExact(rect, X1, Y1, X2, Y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasIntersectionF$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"SDL_HasIntersectionF");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasIntersectionF(const SDL_FRect* A, const SDL_FRect* B);
     * }
     */
    public static int SDL_HasIntersectionF(MemorySegment A, MemorySegment B) {
        var mh$ = SDL_HasIntersectionF$MH();
        try {
            return (int)mh$.invokeExact(A, B);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectFRect$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"SDL_IntersectFRect");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IntersectFRect(const SDL_FRect* A, const SDL_FRect* B, SDL_FRect* result);
     * }
     */
    public static int SDL_IntersectFRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_IntersectFRect$MH();
        try {
            return (int)mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnionFRect$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"SDL_UnionFRect");
    }
    /**
     * {@snippet :
     * void SDL_UnionFRect(const SDL_FRect* A, const SDL_FRect* B, SDL_FRect* result);
     * }
     */
    public static void SDL_UnionFRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_UnionFRect$MH();
        try {
            mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EncloseFPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"SDL_EncloseFPoints");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_EncloseFPoints(const SDL_FPoint* points, int count, const SDL_FRect* clip, SDL_FRect* result);
     * }
     */
    public static int SDL_EncloseFPoints(MemorySegment points, int count, MemorySegment clip, MemorySegment result) {
        var mh$ = SDL_EncloseFPoints$MH();
        try {
            return (int)mh$.invokeExact(points, count, clip, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectFRectAndLine$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"SDL_IntersectFRectAndLine");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IntersectFRectAndLine(const SDL_FRect* rect, float* X1, float* Y1, float* X2, float* Y2);
     * }
     */
    public static int SDL_IntersectFRectAndLine(MemorySegment rect, MemorySegment X1, MemorySegment Y1, MemorySegment X2, MemorySegment Y2) {
        var mh$ = SDL_IntersectFRectAndLine$MH();
        try {
            return (int)mh$.invokeExact(rect, X1, Y1, X2, Y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_BLENDMODE_NONE = 0;
     * }
     */
    public static int SDL_BLENDMODE_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_BLENDMODE_NONE = SDL_BLENDMODE_NONE();
    /**
     * {@snippet :
     * enum .SDL_BLENDMODE_BLEND = 1;
     * }
     */
    public static int SDL_BLENDMODE_BLEND() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_BLENDMODE_BLEND = SDL_BLENDMODE_BLEND();
    /**
     * {@snippet :
     * enum .SDL_BLENDMODE_ADD = 2;
     * }
     */
    public static int SDL_BLENDMODE_ADD() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_BLENDMODE_ADD = SDL_BLENDMODE_ADD();
    /**
     * {@snippet :
     * enum .SDL_BLENDMODE_MOD = 4;
     * }
     */
    public static int SDL_BLENDMODE_MOD() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_BLENDMODE_MOD = SDL_BLENDMODE_MOD();
    /**
     * {@snippet :
     * enum .SDL_BLENDMODE_MUL = 8;
     * }
     */
    public static int SDL_BLENDMODE_MUL() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_BLENDMODE_MUL = SDL_BLENDMODE_MUL();
    /**
     * {@snippet :
     * enum .SDL_BLENDMODE_INVALID = 2147483647;
     * }
     */
    public static int SDL_BLENDMODE_INVALID() {
        return (int)2147483647L;
    }
    /** (int)2147483647L */
    public static final int SDL_BLENDMODE_INVALID = SDL_BLENDMODE_INVALID();
    /**
     * {@snippet :
     * enum .SDL_BLENDOPERATION_ADD = 1;
     * }
     */
    public static int SDL_BLENDOPERATION_ADD() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_BLENDOPERATION_ADD = SDL_BLENDOPERATION_ADD();
    /**
     * {@snippet :
     * enum .SDL_BLENDOPERATION_SUBTRACT = 2;
     * }
     */
    public static int SDL_BLENDOPERATION_SUBTRACT() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_BLENDOPERATION_SUBTRACT = SDL_BLENDOPERATION_SUBTRACT();
    /**
     * {@snippet :
     * enum .SDL_BLENDOPERATION_REV_SUBTRACT = 3;
     * }
     */
    public static int SDL_BLENDOPERATION_REV_SUBTRACT() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_BLENDOPERATION_REV_SUBTRACT = SDL_BLENDOPERATION_REV_SUBTRACT();
    /**
     * {@snippet :
     * enum .SDL_BLENDOPERATION_MINIMUM = 4;
     * }
     */
    public static int SDL_BLENDOPERATION_MINIMUM() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_BLENDOPERATION_MINIMUM = SDL_BLENDOPERATION_MINIMUM();
    /**
     * {@snippet :
     * enum .SDL_BLENDOPERATION_MAXIMUM = 5;
     * }
     */
    public static int SDL_BLENDOPERATION_MAXIMUM() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_BLENDOPERATION_MAXIMUM = SDL_BLENDOPERATION_MAXIMUM();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_ZERO = 1;
     * }
     */
    public static int SDL_BLENDFACTOR_ZERO() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_BLENDFACTOR_ZERO = SDL_BLENDFACTOR_ZERO();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_ONE = 2;
     * }
     */
    public static int SDL_BLENDFACTOR_ONE() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_BLENDFACTOR_ONE = SDL_BLENDFACTOR_ONE();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_SRC_COLOR = 3;
     * }
     */
    public static int SDL_BLENDFACTOR_SRC_COLOR() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_BLENDFACTOR_SRC_COLOR = SDL_BLENDFACTOR_SRC_COLOR();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;
     * }
     */
    public static int SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_SRC_ALPHA = 5;
     * }
     */
    public static int SDL_BLENDFACTOR_SRC_ALPHA() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_BLENDFACTOR_SRC_ALPHA = SDL_BLENDFACTOR_SRC_ALPHA();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6;
     * }
     */
    public static int SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_DST_COLOR = 7;
     * }
     */
    public static int SDL_BLENDFACTOR_DST_COLOR() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_BLENDFACTOR_DST_COLOR = SDL_BLENDFACTOR_DST_COLOR();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8;
     * }
     */
    public static int SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_DST_ALPHA = 9;
     * }
     */
    public static int SDL_BLENDFACTOR_DST_ALPHA() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDL_BLENDFACTOR_DST_ALPHA = SDL_BLENDFACTOR_DST_ALPHA();
    /**
     * {@snippet :
     * enum .SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;
     * }
     */
    public static int SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA() {
        return (int)10L;
    }
    /** (int)10L */
    public static final int SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA();
    public static MethodHandle SDL_ComposeCustomBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"SDL_ComposeCustomBlendMode");
    }
    /**
     * {@snippet :
     * SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);
     * }
     */
    public static int SDL_ComposeCustomBlendMode(int srcColorFactor, int dstColorFactor, int colorOperation, int srcAlphaFactor, int dstAlphaFactor, int alphaOperation) {
        var mh$ = SDL_ComposeCustomBlendMode$MH();
        try {
            return (int)mh$.invokeExact(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_YUV_CONVERSION_JPEG = 0;
     * }
     */
    public static int SDL_YUV_CONVERSION_JPEG() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_YUV_CONVERSION_JPEG = SDL_YUV_CONVERSION_JPEG();
    /**
     * {@snippet :
     * enum .SDL_YUV_CONVERSION_BT601 = 1;
     * }
     */
    public static int SDL_YUV_CONVERSION_BT601() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_YUV_CONVERSION_BT601 = SDL_YUV_CONVERSION_BT601();
    /**
     * {@snippet :
     * enum .SDL_YUV_CONVERSION_BT709 = 2;
     * }
     */
    public static int SDL_YUV_CONVERSION_BT709() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_YUV_CONVERSION_BT709 = SDL_YUV_CONVERSION_BT709();
    /**
     * {@snippet :
     * enum .SDL_YUV_CONVERSION_AUTOMATIC = 3;
     * }
     */
    public static int SDL_YUV_CONVERSION_AUTOMATIC() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_YUV_CONVERSION_AUTOMATIC = SDL_YUV_CONVERSION_AUTOMATIC();
    public static MethodHandle SDL_CreateRGBSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"SDL_CreateRGBSurface");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_CreateRGBSurface(Uint32 flags, int width, int height, int depth, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurface(int flags, int width, int height, int depth, int Rmask, int Gmask, int Bmask, int Amask) {
        var mh$ = SDL_CreateRGBSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, width, height, depth, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRGBSurfaceWithFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"SDL_CreateRGBSurfaceWithFormat");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth, Uint32 format);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurfaceWithFormat(int flags, int width, int height, int depth, int format) {
        var mh$ = SDL_CreateRGBSurfaceWithFormat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, width, height, depth, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRGBSurfaceFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"SDL_CreateRGBSurfaceFrom");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_CreateRGBSurfaceFrom(void* pixels, int width, int height, int depth, int pitch, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurfaceFrom(MemorySegment pixels, int width, int height, int depth, int pitch, int Rmask, int Gmask, int Bmask, int Amask) {
        var mh$ = SDL_CreateRGBSurfaceFrom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixels, width, height, depth, pitch, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRGBSurfaceWithFormatFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"SDL_CreateRGBSurfaceWithFormatFrom");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom(void* pixels, int width, int height, int depth, int pitch, Uint32 format);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurfaceWithFormatFrom(MemorySegment pixels, int width, int height, int depth, int pitch, int format) {
        var mh$ = SDL_CreateRGBSurfaceWithFormatFrom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixels, width, height, depth, pitch, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"SDL_FreeSurface");
    }
    /**
     * {@snippet :
     * void SDL_FreeSurface(SDL_Surface* surface);
     * }
     */
    public static void SDL_FreeSurface(MemorySegment surface) {
        var mh$ = SDL_FreeSurface$MH();
        try {
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfacePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3,"SDL_SetSurfacePalette");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);
     * }
     */
    public static int SDL_SetSurfacePalette(MemorySegment surface, MemorySegment palette) {
        var mh$ = SDL_SetSurfacePalette$MH();
        try {
            return (int)mh$.invokeExact(surface, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"SDL_LockSurface");
    }
    /**
     * {@snippet :
     * int SDL_LockSurface(SDL_Surface* surface);
     * }
     */
    public static int SDL_LockSurface(MemorySegment surface) {
        var mh$ = SDL_LockSurface$MH();
        try {
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"SDL_UnlockSurface");
    }
    /**
     * {@snippet :
     * void SDL_UnlockSurface(SDL_Surface* surface);
     * }
     */
    public static void SDL_UnlockSurface(MemorySegment surface) {
        var mh$ = SDL_UnlockSurface$MH();
        try {
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadBMP_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"SDL_LoadBMP_RW");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_LoadBMP_RW(SDL_RWops* src, int freesrc);
     * }
     */
    public static MemorySegment SDL_LoadBMP_RW(MemorySegment src, int freesrc) {
        var mh$ = SDL_LoadBMP_RW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, freesrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SaveBMP_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"SDL_SaveBMP_RW");
    }
    /**
     * {@snippet :
     * int SDL_SaveBMP_RW(SDL_Surface* surface, SDL_RWops* dst, int freedst);
     * }
     */
    public static int SDL_SaveBMP_RW(MemorySegment surface, MemorySegment dst, int freedst) {
        var mh$ = SDL_SaveBMP_RW$MH();
        try {
            return (int)mh$.invokeExact(surface, dst, freedst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceRLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"SDL_SetSurfaceRLE");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceRLE(SDL_Surface* surface, int flag);
     * }
     */
    public static int SDL_SetSurfaceRLE(MemorySegment surface, int flag) {
        var mh$ = SDL_SetSurfaceRLE$MH();
        try {
            return (int)mh$.invokeExact(surface, flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasSurfaceRLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"SDL_HasSurfaceRLE");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasSurfaceRLE(SDL_Surface* surface);
     * }
     */
    public static int SDL_HasSurfaceRLE(MemorySegment surface) {
        var mh$ = SDL_HasSurfaceRLE$MH();
        try {
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetColorKey$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"SDL_SetColorKey");
    }
    /**
     * {@snippet :
     * int SDL_SetColorKey(SDL_Surface* surface, int flag, Uint32 key);
     * }
     */
    public static int SDL_SetColorKey(MemorySegment surface, int flag, int key) {
        var mh$ = SDL_SetColorKey$MH();
        try {
            return (int)mh$.invokeExact(surface, flag, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasColorKey$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"SDL_HasColorKey");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasColorKey(SDL_Surface* surface);
     * }
     */
    public static int SDL_HasColorKey(MemorySegment surface) {
        var mh$ = SDL_HasColorKey$MH();
        try {
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetColorKey$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"SDL_GetColorKey");
    }
    /**
     * {@snippet :
     * int SDL_GetColorKey(SDL_Surface* surface, Uint32* key);
     * }
     */
    public static int SDL_GetColorKey(MemorySegment surface, MemorySegment key) {
        var mh$ = SDL_GetColorKey$MH();
        try {
            return (int)mh$.invokeExact(surface, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"SDL_SetSurfaceColorMod");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceColorMod(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b);
     * }
     */
    public static int SDL_SetSurfaceColorMod(MemorySegment surface, byte r, byte g, byte b) {
        var mh$ = SDL_SetSurfaceColorMod$MH();
        try {
            return (int)mh$.invokeExact(surface, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetSurfaceColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"SDL_GetSurfaceColorMod");
    }
    /**
     * {@snippet :
     * int SDL_GetSurfaceColorMod(SDL_Surface* surface, Uint8* r, Uint8* g, Uint8* b);
     * }
     */
    public static int SDL_GetSurfaceColorMod(MemorySegment surface, MemorySegment r, MemorySegment g, MemorySegment b) {
        var mh$ = SDL_GetSurfaceColorMod$MH();
        try {
            return (int)mh$.invokeExact(surface, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"SDL_SetSurfaceAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, Uint8 alpha);
     * }
     */
    public static int SDL_SetSurfaceAlphaMod(MemorySegment surface, byte alpha) {
        var mh$ = SDL_SetSurfaceAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(surface, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetSurfaceAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"SDL_GetSurfaceAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, Uint8* alpha);
     * }
     */
    public static int SDL_GetSurfaceAlphaMod(MemorySegment surface, MemorySegment alpha) {
        var mh$ = SDL_GetSurfaceAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(surface, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"SDL_SetSurfaceBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);
     * }
     */
    public static int SDL_SetSurfaceBlendMode(MemorySegment surface, int blendMode) {
        var mh$ = SDL_SetSurfaceBlendMode$MH();
        try {
            return (int)mh$.invokeExact(surface, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetSurfaceBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1,"SDL_GetSurfaceBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);
     * }
     */
    public static int SDL_GetSurfaceBlendMode(MemorySegment surface, MemorySegment blendMode) {
        var mh$ = SDL_GetSurfaceBlendMode$MH();
        try {
            return (int)mh$.invokeExact(surface, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"SDL_SetClipRect");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_SetClipRect(SDL_Surface* surface, const SDL_Rect* rect);
     * }
     */
    public static int SDL_SetClipRect(MemorySegment surface, MemorySegment rect) {
        var mh$ = SDL_SetClipRect$MH();
        try {
            return (int)mh$.invokeExact(surface, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"SDL_GetClipRect");
    }
    /**
     * {@snippet :
     * void SDL_GetClipRect(SDL_Surface* surface, SDL_Rect* rect);
     * }
     */
    public static void SDL_GetClipRect(MemorySegment surface, MemorySegment rect) {
        var mh$ = SDL_GetClipRect$MH();
        try {
            mh$.invokeExact(surface, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DuplicateSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"SDL_DuplicateSurface");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);
     * }
     */
    public static MemorySegment SDL_DuplicateSurface(MemorySegment surface) {
        var mh$ = SDL_DuplicateSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ConvertSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"SDL_ConvertSurface");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_ConvertSurface(SDL_Surface* src, const SDL_PixelFormat* fmt, Uint32 flags);
     * }
     */
    public static MemorySegment SDL_ConvertSurface(MemorySegment src, MemorySegment fmt, int flags) {
        var mh$ = SDL_ConvertSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, fmt, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ConvertSurfaceFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$1,"SDL_ConvertSurfaceFormat");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* src, Uint32 pixel_format, Uint32 flags);
     * }
     */
    public static MemorySegment SDL_ConvertSurfaceFormat(MemorySegment src, int pixel_format, int flags) {
        var mh$ = SDL_ConvertSurfaceFormat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, pixel_format, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ConvertPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3,"SDL_ConvertPixels");
    }
    /**
     * {@snippet :
     * int SDL_ConvertPixels(int width, int height, Uint32 src_format, void* src, int src_pitch, Uint32 dst_format, void* dst, int dst_pitch);
     * }
     */
    public static int SDL_ConvertPixels(int width, int height, int src_format, MemorySegment src, int src_pitch, int dst_format, MemorySegment dst, int dst_pitch) {
        var mh$ = SDL_ConvertPixels$MH();
        try {
            return (int)mh$.invokeExact(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PremultiplyAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"SDL_PremultiplyAlpha");
    }
    /**
     * {@snippet :
     * int SDL_PremultiplyAlpha(int width, int height, Uint32 src_format, void* src, int src_pitch, Uint32 dst_format, void* dst, int dst_pitch);
     * }
     */
    public static int SDL_PremultiplyAlpha(int width, int height, int src_format, MemorySegment src, int src_pitch, int dst_format, MemorySegment dst, int dst_pitch) {
        var mh$ = SDL_PremultiplyAlpha$MH();
        try {
            return (int)mh$.invokeExact(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FillRect$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"SDL_FillRect");
    }
    /**
     * {@snippet :
     * int SDL_FillRect(SDL_Surface* dst, const SDL_Rect* rect, Uint32 color);
     * }
     */
    public static int SDL_FillRect(MemorySegment dst, MemorySegment rect, int color) {
        var mh$ = SDL_FillRect$MH();
        try {
            return (int)mh$.invokeExact(dst, rect, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FillRects$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"SDL_FillRects");
    }
    /**
     * {@snippet :
     * int SDL_FillRects(SDL_Surface* dst, const SDL_Rect* rects, int count, Uint32 color);
     * }
     */
    public static int SDL_FillRects(MemorySegment dst, MemorySegment rects, int count, int color) {
        var mh$ = SDL_FillRects$MH();
        try {
            return (int)mh$.invokeExact(dst, rects, count, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpperBlit$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"SDL_UpperBlit");
    }
    /**
     * {@snippet :
     * int SDL_UpperBlit(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);
     * }
     */
    public static int SDL_UpperBlit(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_UpperBlit$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LowerBlit$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"SDL_LowerBlit");
    }
    /**
     * {@snippet :
     * int SDL_LowerBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);
     * }
     */
    public static int SDL_LowerBlit(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_LowerBlit$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SoftStretch$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"SDL_SoftStretch");
    }
    /**
     * {@snippet :
     * int SDL_SoftStretch(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, const SDL_Rect* dstrect);
     * }
     */
    public static int SDL_SoftStretch(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_SoftStretch$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SoftStretchLinear$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"SDL_SoftStretchLinear");
    }
    /**
     * {@snippet :
     * int SDL_SoftStretchLinear(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, const SDL_Rect* dstrect);
     * }
     */
    public static int SDL_SoftStretchLinear(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_SoftStretchLinear$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpperBlitScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$5,"SDL_UpperBlitScaled");
    }
    /**
     * {@snippet :
     * int SDL_UpperBlitScaled(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);
     * }
     */
    public static int SDL_UpperBlitScaled(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_UpperBlitScaled$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LowerBlitScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$0,"SDL_LowerBlitScaled");
    }
    /**
     * {@snippet :
     * int SDL_LowerBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);
     * }
     */
    public static int SDL_LowerBlitScaled(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_LowerBlitScaled$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetYUVConversionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"SDL_SetYUVConversionMode");
    }
    /**
     * {@snippet :
     * void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);
     * }
     */
    public static void SDL_SetYUVConversionMode(int mode) {
        var mh$ = SDL_SetYUVConversionMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetYUVConversionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$2,"SDL_GetYUVConversionMode");
    }
    /**
     * {@snippet :
     * SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode();
     * }
     */
    public static int SDL_GetYUVConversionMode() {
        var mh$ = SDL_GetYUVConversionMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetYUVConversionModeForResolution$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"SDL_GetYUVConversionModeForResolution");
    }
    /**
     * {@snippet :
     * SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);
     * }
     */
    public static int SDL_GetYUVConversionModeForResolution(int width, int height) {
        var mh$ = SDL_GetYUVConversionModeForResolution$MH();
        try {
            return (int)mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_WINDOW_FULLSCREEN = 1;
     * }
     */
    public static int SDL_WINDOW_FULLSCREEN() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_WINDOW_FULLSCREEN = SDL_WINDOW_FULLSCREEN();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_OPENGL = 2;
     * }
     */
    public static int SDL_WINDOW_OPENGL() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_WINDOW_OPENGL = SDL_WINDOW_OPENGL();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_SHOWN = 4;
     * }
     */
    public static int SDL_WINDOW_SHOWN() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_WINDOW_SHOWN = SDL_WINDOW_SHOWN();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_HIDDEN = 8;
     * }
     */
    public static int SDL_WINDOW_HIDDEN() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_WINDOW_HIDDEN = SDL_WINDOW_HIDDEN();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_BORDERLESS = 16;
     * }
     */
    public static int SDL_WINDOW_BORDERLESS() {
        return (int)16L;
    }
    /** (int)16L */
    public static final int SDL_WINDOW_BORDERLESS = SDL_WINDOW_BORDERLESS();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_RESIZABLE = 32;
     * }
     */
    public static int SDL_WINDOW_RESIZABLE() {
        return (int)32L;
    }
    /** (int)32L */
    public static final int SDL_WINDOW_RESIZABLE = SDL_WINDOW_RESIZABLE();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_MINIMIZED = 64;
     * }
     */
    public static int SDL_WINDOW_MINIMIZED() {
        return (int)64L;
    }
    /** (int)64L */
    public static final int SDL_WINDOW_MINIMIZED = SDL_WINDOW_MINIMIZED();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_MAXIMIZED = 128;
     * }
     */
    public static int SDL_WINDOW_MAXIMIZED() {
        return (int)128L;
    }
    /** (int)128L */
    public static final int SDL_WINDOW_MAXIMIZED = SDL_WINDOW_MAXIMIZED();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_MOUSE_GRABBED = 256;
     * }
     */
    public static int SDL_WINDOW_MOUSE_GRABBED() {
        return (int)256L;
    }
    /** (int)256L */
    public static final int SDL_WINDOW_MOUSE_GRABBED = SDL_WINDOW_MOUSE_GRABBED();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_INPUT_FOCUS = 512;
     * }
     */
    public static int SDL_WINDOW_INPUT_FOCUS() {
        return (int)512L;
    }
    /** (int)512L */
    public static final int SDL_WINDOW_INPUT_FOCUS = SDL_WINDOW_INPUT_FOCUS();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_MOUSE_FOCUS = 1024;
     * }
     */
    public static int SDL_WINDOW_MOUSE_FOCUS() {
        return (int)1024L;
    }
    /** (int)1024L */
    public static final int SDL_WINDOW_MOUSE_FOCUS = SDL_WINDOW_MOUSE_FOCUS();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_FULLSCREEN_DESKTOP = 4097;
     * }
     */
    public static int SDL_WINDOW_FULLSCREEN_DESKTOP() {
        return (int)4097L;
    }
    /** (int)4097L */
    public static final int SDL_WINDOW_FULLSCREEN_DESKTOP = SDL_WINDOW_FULLSCREEN_DESKTOP();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_FOREIGN = 2048;
     * }
     */
    public static int SDL_WINDOW_FOREIGN() {
        return (int)2048L;
    }
    /** (int)2048L */
    public static final int SDL_WINDOW_FOREIGN = SDL_WINDOW_FOREIGN();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_ALLOW_HIGHDPI = 8192;
     * }
     */
    public static int SDL_WINDOW_ALLOW_HIGHDPI() {
        return (int)8192L;
    }
    /** (int)8192L */
    public static final int SDL_WINDOW_ALLOW_HIGHDPI = SDL_WINDOW_ALLOW_HIGHDPI();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_MOUSE_CAPTURE = 16384;
     * }
     */
    public static int SDL_WINDOW_MOUSE_CAPTURE() {
        return (int)16384L;
    }
    /** (int)16384L */
    public static final int SDL_WINDOW_MOUSE_CAPTURE = SDL_WINDOW_MOUSE_CAPTURE();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_ALWAYS_ON_TOP = 32768;
     * }
     */
    public static int SDL_WINDOW_ALWAYS_ON_TOP() {
        return (int)32768L;
    }
    /** (int)32768L */
    public static final int SDL_WINDOW_ALWAYS_ON_TOP = SDL_WINDOW_ALWAYS_ON_TOP();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_SKIP_TASKBAR = 65536;
     * }
     */
    public static int SDL_WINDOW_SKIP_TASKBAR() {
        return (int)65536L;
    }
    /** (int)65536L */
    public static final int SDL_WINDOW_SKIP_TASKBAR = SDL_WINDOW_SKIP_TASKBAR();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_UTILITY = 131072;
     * }
     */
    public static int SDL_WINDOW_UTILITY() {
        return (int)131072L;
    }
    /** (int)131072L */
    public static final int SDL_WINDOW_UTILITY = SDL_WINDOW_UTILITY();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_TOOLTIP = 262144;
     * }
     */
    public static int SDL_WINDOW_TOOLTIP() {
        return (int)262144L;
    }
    /** (int)262144L */
    public static final int SDL_WINDOW_TOOLTIP = SDL_WINDOW_TOOLTIP();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_POPUP_MENU = 524288;
     * }
     */
    public static int SDL_WINDOW_POPUP_MENU() {
        return (int)524288L;
    }
    /** (int)524288L */
    public static final int SDL_WINDOW_POPUP_MENU = SDL_WINDOW_POPUP_MENU();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_KEYBOARD_GRABBED = 1048576;
     * }
     */
    public static int SDL_WINDOW_KEYBOARD_GRABBED() {
        return (int)1048576L;
    }
    /** (int)1048576L */
    public static final int SDL_WINDOW_KEYBOARD_GRABBED = SDL_WINDOW_KEYBOARD_GRABBED();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_VULKAN = 268435456;
     * }
     */
    public static int SDL_WINDOW_VULKAN() {
        return (int)268435456L;
    }
    /** (int)268435456L */
    public static final int SDL_WINDOW_VULKAN = SDL_WINDOW_VULKAN();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_METAL = 536870912;
     * }
     */
    public static int SDL_WINDOW_METAL() {
        return (int)536870912L;
    }
    /** (int)536870912L */
    public static final int SDL_WINDOW_METAL = SDL_WINDOW_METAL();
    /**
     * {@snippet :
     * enum .SDL_WINDOW_INPUT_GRABBED = 256;
     * }
     */
    public static int SDL_WINDOW_INPUT_GRABBED() {
        return (int)256L;
    }
    /** (int)256L */
    public static final int SDL_WINDOW_INPUT_GRABBED = SDL_WINDOW_INPUT_GRABBED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_NONE = 0;
     * }
     */
    public static int SDL_WINDOWEVENT_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_WINDOWEVENT_NONE = SDL_WINDOWEVENT_NONE();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_SHOWN = 1;
     * }
     */
    public static int SDL_WINDOWEVENT_SHOWN() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_WINDOWEVENT_SHOWN = SDL_WINDOWEVENT_SHOWN();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_HIDDEN = 2;
     * }
     */
    public static int SDL_WINDOWEVENT_HIDDEN() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_WINDOWEVENT_HIDDEN = SDL_WINDOWEVENT_HIDDEN();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_EXPOSED = 3;
     * }
     */
    public static int SDL_WINDOWEVENT_EXPOSED() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_WINDOWEVENT_EXPOSED = SDL_WINDOWEVENT_EXPOSED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_MOVED = 4;
     * }
     */
    public static int SDL_WINDOWEVENT_MOVED() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_WINDOWEVENT_MOVED = SDL_WINDOWEVENT_MOVED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_RESIZED = 5;
     * }
     */
    public static int SDL_WINDOWEVENT_RESIZED() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_WINDOWEVENT_RESIZED = SDL_WINDOWEVENT_RESIZED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_SIZE_CHANGED = 6;
     * }
     */
    public static int SDL_WINDOWEVENT_SIZE_CHANGED() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_WINDOWEVENT_SIZE_CHANGED = SDL_WINDOWEVENT_SIZE_CHANGED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_MINIMIZED = 7;
     * }
     */
    public static int SDL_WINDOWEVENT_MINIMIZED() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_WINDOWEVENT_MINIMIZED = SDL_WINDOWEVENT_MINIMIZED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_MAXIMIZED = 8;
     * }
     */
    public static int SDL_WINDOWEVENT_MAXIMIZED() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_WINDOWEVENT_MAXIMIZED = SDL_WINDOWEVENT_MAXIMIZED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_RESTORED = 9;
     * }
     */
    public static int SDL_WINDOWEVENT_RESTORED() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDL_WINDOWEVENT_RESTORED = SDL_WINDOWEVENT_RESTORED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_ENTER = 10;
     * }
     */
    public static int SDL_WINDOWEVENT_ENTER() {
        return (int)10L;
    }
    /** (int)10L */
    public static final int SDL_WINDOWEVENT_ENTER = SDL_WINDOWEVENT_ENTER();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_LEAVE = 11;
     * }
     */
    public static int SDL_WINDOWEVENT_LEAVE() {
        return (int)11L;
    }
    /** (int)11L */
    public static final int SDL_WINDOWEVENT_LEAVE = SDL_WINDOWEVENT_LEAVE();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_FOCUS_GAINED = 12;
     * }
     */
    public static int SDL_WINDOWEVENT_FOCUS_GAINED() {
        return (int)12L;
    }
    /** (int)12L */
    public static final int SDL_WINDOWEVENT_FOCUS_GAINED = SDL_WINDOWEVENT_FOCUS_GAINED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_FOCUS_LOST = 13;
     * }
     */
    public static int SDL_WINDOWEVENT_FOCUS_LOST() {
        return (int)13L;
    }
    /** (int)13L */
    public static final int SDL_WINDOWEVENT_FOCUS_LOST = SDL_WINDOWEVENT_FOCUS_LOST();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_CLOSE = 14;
     * }
     */
    public static int SDL_WINDOWEVENT_CLOSE() {
        return (int)14L;
    }
    /** (int)14L */
    public static final int SDL_WINDOWEVENT_CLOSE = SDL_WINDOWEVENT_CLOSE();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_TAKE_FOCUS = 15;
     * }
     */
    public static int SDL_WINDOWEVENT_TAKE_FOCUS() {
        return (int)15L;
    }
    /** (int)15L */
    public static final int SDL_WINDOWEVENT_TAKE_FOCUS = SDL_WINDOWEVENT_TAKE_FOCUS();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_HIT_TEST = 16;
     * }
     */
    public static int SDL_WINDOWEVENT_HIT_TEST() {
        return (int)16L;
    }
    /** (int)16L */
    public static final int SDL_WINDOWEVENT_HIT_TEST = SDL_WINDOWEVENT_HIT_TEST();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_ICCPROF_CHANGED = 17;
     * }
     */
    public static int SDL_WINDOWEVENT_ICCPROF_CHANGED() {
        return (int)17L;
    }
    /** (int)17L */
    public static final int SDL_WINDOWEVENT_ICCPROF_CHANGED = SDL_WINDOWEVENT_ICCPROF_CHANGED();
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT_DISPLAY_CHANGED = 18;
     * }
     */
    public static int SDL_WINDOWEVENT_DISPLAY_CHANGED() {
        return (int)18L;
    }
    /** (int)18L */
    public static final int SDL_WINDOWEVENT_DISPLAY_CHANGED = SDL_WINDOWEVENT_DISPLAY_CHANGED();
    /**
     * {@snippet :
     * enum .SDL_DISPLAYEVENT_NONE = 0;
     * }
     */
    public static int SDL_DISPLAYEVENT_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_DISPLAYEVENT_NONE = SDL_DISPLAYEVENT_NONE();
    /**
     * {@snippet :
     * enum .SDL_DISPLAYEVENT_ORIENTATION = 1;
     * }
     */
    public static int SDL_DISPLAYEVENT_ORIENTATION() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_DISPLAYEVENT_ORIENTATION = SDL_DISPLAYEVENT_ORIENTATION();
    /**
     * {@snippet :
     * enum .SDL_DISPLAYEVENT_CONNECTED = 2;
     * }
     */
    public static int SDL_DISPLAYEVENT_CONNECTED() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_DISPLAYEVENT_CONNECTED = SDL_DISPLAYEVENT_CONNECTED();
    /**
     * {@snippet :
     * enum .SDL_DISPLAYEVENT_DISCONNECTED = 3;
     * }
     */
    public static int SDL_DISPLAYEVENT_DISCONNECTED() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_DISPLAYEVENT_DISCONNECTED = SDL_DISPLAYEVENT_DISCONNECTED();
    /**
     * {@snippet :
     * enum .SDL_ORIENTATION_UNKNOWN = 0;
     * }
     */
    public static int SDL_ORIENTATION_UNKNOWN() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_ORIENTATION_UNKNOWN = SDL_ORIENTATION_UNKNOWN();
    /**
     * {@snippet :
     * enum .SDL_ORIENTATION_LANDSCAPE = 1;
     * }
     */
    public static int SDL_ORIENTATION_LANDSCAPE() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_ORIENTATION_LANDSCAPE = SDL_ORIENTATION_LANDSCAPE();
    /**
     * {@snippet :
     * enum .SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;
     * }
     */
    public static int SDL_ORIENTATION_LANDSCAPE_FLIPPED() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_ORIENTATION_LANDSCAPE_FLIPPED = SDL_ORIENTATION_LANDSCAPE_FLIPPED();
    /**
     * {@snippet :
     * enum .SDL_ORIENTATION_PORTRAIT = 3;
     * }
     */
    public static int SDL_ORIENTATION_PORTRAIT() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_ORIENTATION_PORTRAIT = SDL_ORIENTATION_PORTRAIT();
    /**
     * {@snippet :
     * enum .SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;
     * }
     */
    public static int SDL_ORIENTATION_PORTRAIT_FLIPPED() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_ORIENTATION_PORTRAIT_FLIPPED = SDL_ORIENTATION_PORTRAIT_FLIPPED();
    /**
     * {@snippet :
     * enum .SDL_FLASH_CANCEL = 0;
     * }
     */
    public static int SDL_FLASH_CANCEL() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_FLASH_CANCEL = SDL_FLASH_CANCEL();
    /**
     * {@snippet :
     * enum .SDL_FLASH_BRIEFLY = 1;
     * }
     */
    public static int SDL_FLASH_BRIEFLY() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_FLASH_BRIEFLY = SDL_FLASH_BRIEFLY();
    /**
     * {@snippet :
     * enum .SDL_FLASH_UNTIL_FOCUSED = 2;
     * }
     */
    public static int SDL_FLASH_UNTIL_FOCUSED() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_FLASH_UNTIL_FOCUSED = SDL_FLASH_UNTIL_FOCUSED();
    /**
     * {@snippet :
     * typedef void* SDL_GLContext;
     * }
     */
    public static final OfAddress SDL_GLContext = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .SDL_GL_RED_SIZE = 0;
     * }
     */
    public static int SDL_GL_RED_SIZE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_GL_RED_SIZE = SDL_GL_RED_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_GREEN_SIZE = 1;
     * }
     */
    public static int SDL_GL_GREEN_SIZE() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_GL_GREEN_SIZE = SDL_GL_GREEN_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_BLUE_SIZE = 2;
     * }
     */
    public static int SDL_GL_BLUE_SIZE() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_GL_BLUE_SIZE = SDL_GL_BLUE_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_ALPHA_SIZE = 3;
     * }
     */
    public static int SDL_GL_ALPHA_SIZE() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_GL_ALPHA_SIZE = SDL_GL_ALPHA_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_BUFFER_SIZE = 4;
     * }
     */
    public static int SDL_GL_BUFFER_SIZE() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_GL_BUFFER_SIZE = SDL_GL_BUFFER_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_DOUBLEBUFFER = 5;
     * }
     */
    public static int SDL_GL_DOUBLEBUFFER() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_GL_DOUBLEBUFFER = SDL_GL_DOUBLEBUFFER();
    /**
     * {@snippet :
     * enum .SDL_GL_DEPTH_SIZE = 6;
     * }
     */
    public static int SDL_GL_DEPTH_SIZE() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_GL_DEPTH_SIZE = SDL_GL_DEPTH_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_STENCIL_SIZE = 7;
     * }
     */
    public static int SDL_GL_STENCIL_SIZE() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_GL_STENCIL_SIZE = SDL_GL_STENCIL_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_ACCUM_RED_SIZE = 8;
     * }
     */
    public static int SDL_GL_ACCUM_RED_SIZE() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_GL_ACCUM_RED_SIZE = SDL_GL_ACCUM_RED_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_ACCUM_GREEN_SIZE = 9;
     * }
     */
    public static int SDL_GL_ACCUM_GREEN_SIZE() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDL_GL_ACCUM_GREEN_SIZE = SDL_GL_ACCUM_GREEN_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_ACCUM_BLUE_SIZE = 10;
     * }
     */
    public static int SDL_GL_ACCUM_BLUE_SIZE() {
        return (int)10L;
    }
    /** (int)10L */
    public static final int SDL_GL_ACCUM_BLUE_SIZE = SDL_GL_ACCUM_BLUE_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_ACCUM_ALPHA_SIZE = 11;
     * }
     */
    public static int SDL_GL_ACCUM_ALPHA_SIZE() {
        return (int)11L;
    }
    /** (int)11L */
    public static final int SDL_GL_ACCUM_ALPHA_SIZE = SDL_GL_ACCUM_ALPHA_SIZE();
    /**
     * {@snippet :
     * enum .SDL_GL_STEREO = 12;
     * }
     */
    public static int SDL_GL_STEREO() {
        return (int)12L;
    }
    /** (int)12L */
    public static final int SDL_GL_STEREO = SDL_GL_STEREO();
    /**
     * {@snippet :
     * enum .SDL_GL_MULTISAMPLEBUFFERS = 13;
     * }
     */
    public static int SDL_GL_MULTISAMPLEBUFFERS() {
        return (int)13L;
    }
    /** (int)13L */
    public static final int SDL_GL_MULTISAMPLEBUFFERS = SDL_GL_MULTISAMPLEBUFFERS();
    /**
     * {@snippet :
     * enum .SDL_GL_MULTISAMPLESAMPLES = 14;
     * }
     */
    public static int SDL_GL_MULTISAMPLESAMPLES() {
        return (int)14L;
    }
    /** (int)14L */
    public static final int SDL_GL_MULTISAMPLESAMPLES = SDL_GL_MULTISAMPLESAMPLES();
    /**
     * {@snippet :
     * enum .SDL_GL_ACCELERATED_VISUAL = 15;
     * }
     */
    public static int SDL_GL_ACCELERATED_VISUAL() {
        return (int)15L;
    }
    /** (int)15L */
    public static final int SDL_GL_ACCELERATED_VISUAL = SDL_GL_ACCELERATED_VISUAL();
    /**
     * {@snippet :
     * enum .SDL_GL_RETAINED_BACKING = 16;
     * }
     */
    public static int SDL_GL_RETAINED_BACKING() {
        return (int)16L;
    }
    /** (int)16L */
    public static final int SDL_GL_RETAINED_BACKING = SDL_GL_RETAINED_BACKING();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_MAJOR_VERSION = 17;
     * }
     */
    public static int SDL_GL_CONTEXT_MAJOR_VERSION() {
        return (int)17L;
    }
    /** (int)17L */
    public static final int SDL_GL_CONTEXT_MAJOR_VERSION = SDL_GL_CONTEXT_MAJOR_VERSION();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_MINOR_VERSION = 18;
     * }
     */
    public static int SDL_GL_CONTEXT_MINOR_VERSION() {
        return (int)18L;
    }
    /** (int)18L */
    public static final int SDL_GL_CONTEXT_MINOR_VERSION = SDL_GL_CONTEXT_MINOR_VERSION();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_EGL = 19;
     * }
     */
    public static int SDL_GL_CONTEXT_EGL() {
        return (int)19L;
    }
    /** (int)19L */
    public static final int SDL_GL_CONTEXT_EGL = SDL_GL_CONTEXT_EGL();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_FLAGS = 20;
     * }
     */
    public static int SDL_GL_CONTEXT_FLAGS() {
        return (int)20L;
    }
    /** (int)20L */
    public static final int SDL_GL_CONTEXT_FLAGS = SDL_GL_CONTEXT_FLAGS();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_PROFILE_MASK = 21;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_MASK() {
        return (int)21L;
    }
    /** (int)21L */
    public static final int SDL_GL_CONTEXT_PROFILE_MASK = SDL_GL_CONTEXT_PROFILE_MASK();
    /**
     * {@snippet :
     * enum .SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22;
     * }
     */
    public static int SDL_GL_SHARE_WITH_CURRENT_CONTEXT() {
        return (int)22L;
    }
    /** (int)22L */
    public static final int SDL_GL_SHARE_WITH_CURRENT_CONTEXT = SDL_GL_SHARE_WITH_CURRENT_CONTEXT();
    /**
     * {@snippet :
     * enum .SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23;
     * }
     */
    public static int SDL_GL_FRAMEBUFFER_SRGB_CAPABLE() {
        return (int)23L;
    }
    /** (int)23L */
    public static final int SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = SDL_GL_FRAMEBUFFER_SRGB_CAPABLE();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24;
     * }
     */
    public static int SDL_GL_CONTEXT_RELEASE_BEHAVIOR() {
        return (int)24L;
    }
    /** (int)24L */
    public static final int SDL_GL_CONTEXT_RELEASE_BEHAVIOR = SDL_GL_CONTEXT_RELEASE_BEHAVIOR();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_RESET_NOTIFICATION = 25;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_NOTIFICATION() {
        return (int)25L;
    }
    /** (int)25L */
    public static final int SDL_GL_CONTEXT_RESET_NOTIFICATION = SDL_GL_CONTEXT_RESET_NOTIFICATION();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_NO_ERROR = 26;
     * }
     */
    public static int SDL_GL_CONTEXT_NO_ERROR() {
        return (int)26L;
    }
    /** (int)26L */
    public static final int SDL_GL_CONTEXT_NO_ERROR = SDL_GL_CONTEXT_NO_ERROR();
    /**
     * {@snippet :
     * enum .SDL_GL_FLOATBUFFERS = 27;
     * }
     */
    public static int SDL_GL_FLOATBUFFERS() {
        return (int)27L;
    }
    /** (int)27L */
    public static final int SDL_GL_FLOATBUFFERS = SDL_GL_FLOATBUFFERS();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_PROFILE_CORE = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_CORE() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_GL_CONTEXT_PROFILE_CORE = SDL_GL_CONTEXT_PROFILE_CORE();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_COMPATIBILITY() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = SDL_GL_CONTEXT_PROFILE_COMPATIBILITY();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_PROFILE_ES = 4;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_ES() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_GL_CONTEXT_PROFILE_ES = SDL_GL_CONTEXT_PROFILE_ES();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_DEBUG_FLAG = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_DEBUG_FLAG() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_GL_CONTEXT_DEBUG_FLAG = SDL_GL_CONTEXT_DEBUG_FLAG();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2;
     * }
     */
    public static int SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4;
     * }
     */
    public static int SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_ISOLATION_FLAG() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = SDL_GL_CONTEXT_RESET_ISOLATION_FLAG();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0;
     * }
     */
    public static int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_NO_NOTIFICATION() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = SDL_GL_CONTEXT_RESET_NO_NOTIFICATION();
    /**
     * {@snippet :
     * enum .SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_LOSE_CONTEXT() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = SDL_GL_CONTEXT_RESET_LOSE_CONTEXT();
    public static MethodHandle SDL_GetNumVideoDrivers$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"SDL_GetNumVideoDrivers");
    }
    /**
     * {@snippet :
     * int SDL_GetNumVideoDrivers();
     * }
     */
    public static int SDL_GetNumVideoDrivers() {
        var mh$ = SDL_GetNumVideoDrivers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetVideoDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"SDL_GetVideoDriver");
    }
    /**
     * {@snippet :
     * char* SDL_GetVideoDriver(int index);
     * }
     */
    public static MemorySegment SDL_GetVideoDriver(int index) {
        var mh$ = SDL_GetVideoDriver$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_VideoInit$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"SDL_VideoInit");
    }
    /**
     * {@snippet :
     * int SDL_VideoInit(char* driver_name);
     * }
     */
    public static int SDL_VideoInit(MemorySegment driver_name) {
        var mh$ = SDL_VideoInit$MH();
        try {
            return (int)mh$.invokeExact(driver_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_VideoQuit$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"SDL_VideoQuit");
    }
    /**
     * {@snippet :
     * void SDL_VideoQuit();
     * }
     */
    public static void SDL_VideoQuit() {
        var mh$ = SDL_VideoQuit$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCurrentVideoDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"SDL_GetCurrentVideoDriver");
    }
    /**
     * {@snippet :
     * char* SDL_GetCurrentVideoDriver();
     * }
     */
    public static MemorySegment SDL_GetCurrentVideoDriver() {
        var mh$ = SDL_GetCurrentVideoDriver$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetNumVideoDisplays$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"SDL_GetNumVideoDisplays");
    }
    /**
     * {@snippet :
     * int SDL_GetNumVideoDisplays();
     * }
     */
    public static int SDL_GetNumVideoDisplays() {
        var mh$ = SDL_GetNumVideoDisplays$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayName$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"SDL_GetDisplayName");
    }
    /**
     * {@snippet :
     * char* SDL_GetDisplayName(int displayIndex);
     * }
     */
    public static MemorySegment SDL_GetDisplayName(int displayIndex) {
        var mh$ = SDL_GetDisplayName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(displayIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"SDL_GetDisplayBounds");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayBounds(int displayIndex, SDL_Rect* rect);
     * }
     */
    public static int SDL_GetDisplayBounds(int displayIndex, MemorySegment rect) {
        var mh$ = SDL_GetDisplayBounds$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayUsableBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$2,"SDL_GetDisplayUsableBounds");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect* rect);
     * }
     */
    public static int SDL_GetDisplayUsableBounds(int displayIndex, MemorySegment rect) {
        var mh$ = SDL_GetDisplayUsableBounds$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayDPI$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"SDL_GetDisplayDPI");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayDPI(int displayIndex, float* ddpi, float* hdpi, float* vdpi);
     * }
     */
    public static int SDL_GetDisplayDPI(int displayIndex, MemorySegment ddpi, MemorySegment hdpi, MemorySegment vdpi) {
        var mh$ = SDL_GetDisplayDPI$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, ddpi, hdpi, vdpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$5,"SDL_GetDisplayOrientation");
    }
    /**
     * {@snippet :
     * SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);
     * }
     */
    public static int SDL_GetDisplayOrientation(int displayIndex) {
        var mh$ = SDL_GetDisplayOrientation$MH();
        try {
            return (int)mh$.invokeExact(displayIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetNumDisplayModes$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"SDL_GetNumDisplayModes");
    }
    /**
     * {@snippet :
     * int SDL_GetNumDisplayModes(int displayIndex);
     * }
     */
    public static int SDL_GetNumDisplayModes(int displayIndex) {
        var mh$ = SDL_GetNumDisplayModes$MH();
        try {
            return (int)mh$.invokeExact(displayIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"SDL_GetDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayMode(int displayIndex, int modeIndex, SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetDisplayMode(int displayIndex, int modeIndex, MemorySegment mode) {
        var mh$ = SDL_GetDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, modeIndex, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDesktopDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"SDL_GetDesktopDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetDesktopDisplayMode(int displayIndex, MemorySegment mode) {
        var mh$ = SDL_GetDesktopDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCurrentDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$3,"SDL_GetCurrentDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetCurrentDisplayMode(int displayIndex, MemorySegment mode) {
        var mh$ = SDL_GetCurrentDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetClosestDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$5,"SDL_GetClosestDisplayMode");
    }
    /**
     * {@snippet :
     * SDL_DisplayMode* SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode* mode, SDL_DisplayMode* closest);
     * }
     */
    public static MemorySegment SDL_GetClosestDisplayMode(int displayIndex, MemorySegment mode, MemorySegment closest) {
        var mh$ = SDL_GetClosestDisplayMode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(displayIndex, mode, closest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetPointDisplayIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$0,"SDL_GetPointDisplayIndex");
    }
    /**
     * {@snippet :
     * int SDL_GetPointDisplayIndex(const SDL_Point* point);
     * }
     */
    public static int SDL_GetPointDisplayIndex(MemorySegment point) {
        var mh$ = SDL_GetPointDisplayIndex$MH();
        try {
            return (int)mh$.invokeExact(point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRectDisplayIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"SDL_GetRectDisplayIndex");
    }
    /**
     * {@snippet :
     * int SDL_GetRectDisplayIndex(const SDL_Rect* rect);
     * }
     */
    public static int SDL_GetRectDisplayIndex(MemorySegment rect) {
        var mh$ = SDL_GetRectDisplayIndex$MH();
        try {
            return (int)mh$.invokeExact(rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowDisplayIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"SDL_GetWindowDisplayIndex");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowDisplayIndex(SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowDisplayIndex(MemorySegment window) {
        var mh$ = SDL_GetWindowDisplayIndex$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$3,"SDL_SetWindowDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowDisplayMode(SDL_Window* window, const SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_SetWindowDisplayMode(MemorySegment window, MemorySegment mode) {
        var mh$ = SDL_SetWindowDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(window, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$4,"SDL_GetWindowDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetWindowDisplayMode(MemorySegment window, MemorySegment mode) {
        var mh$ = SDL_GetWindowDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(window, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowICCProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"SDL_GetWindowICCProfile");
    }
    /**
     * {@snippet :
     * void* SDL_GetWindowICCProfile(SDL_Window* window, size_t* size);
     * }
     */
    public static MemorySegment SDL_GetWindowICCProfile(MemorySegment window, MemorySegment size) {
        var mh$ = SDL_GetWindowICCProfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$0,"SDL_GetWindowPixelFormat");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetWindowPixelFormat(SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowPixelFormat(MemorySegment window) {
        var mh$ = SDL_GetWindowPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$1,"SDL_CreateWindow");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_CreateWindow(char* title, int x, int y, int w, int h, Uint32 flags);
     * }
     */
    public static MemorySegment SDL_CreateWindow(MemorySegment title, int x, int y, int w, int h, int flags) {
        var mh$ = SDL_CreateWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(title, x, y, w, h, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateWindowFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$2,"SDL_CreateWindowFrom");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_CreateWindowFrom(void* data);
     * }
     */
    public static MemorySegment SDL_CreateWindowFrom(MemorySegment data) {
        var mh$ = SDL_CreateWindowFrom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowID$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$3,"SDL_GetWindowID");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetWindowID(SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowID(MemorySegment window) {
        var mh$ = SDL_GetWindowID$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowFromID$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"SDL_GetWindowFromID");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_GetWindowFromID(Uint32 id);
     * }
     */
    public static MemorySegment SDL_GetWindowFromID(int id) {
        var mh$ = SDL_GetWindowFromID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$5,"SDL_GetWindowFlags");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetWindowFlags(SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowFlags(MemorySegment window) {
        var mh$ = SDL_GetWindowFlags$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$0,"SDL_SetWindowTitle");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowTitle(SDL_Window* window, char* title);
     * }
     */
    public static void SDL_SetWindowTitle(MemorySegment window, MemorySegment title) {
        var mh$ = SDL_SetWindowTitle$MH();
        try {
            mh$.invokeExact(window, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"SDL_GetWindowTitle");
    }
    /**
     * {@snippet :
     * char* SDL_GetWindowTitle(SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetWindowTitle(MemorySegment window) {
        var mh$ = SDL_GetWindowTitle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$2,"SDL_SetWindowIcon");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);
     * }
     */
    public static void SDL_SetWindowIcon(MemorySegment window, MemorySegment icon) {
        var mh$ = SDL_SetWindowIcon$MH();
        try {
            mh$.invokeExact(window, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowData$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$3,"SDL_SetWindowData");
    }
    /**
     * {@snippet :
     * void* SDL_SetWindowData(SDL_Window* window, char* name, void* userdata);
     * }
     */
    public static MemorySegment SDL_SetWindowData(MemorySegment window, MemorySegment name, MemorySegment userdata) {
        var mh$ = SDL_SetWindowData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, name, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowData$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$4,"SDL_GetWindowData");
    }
    /**
     * {@snippet :
     * void* SDL_GetWindowData(SDL_Window* window, char* name);
     * }
     */
    public static MemorySegment SDL_GetWindowData(MemorySegment window, MemorySegment name) {
        var mh$ = SDL_GetWindowData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$6,"SDL_SetWindowPosition");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowPosition(SDL_Window* window, int x, int y);
     * }
     */
    public static void SDL_SetWindowPosition(MemorySegment window, int x, int y) {
        var mh$ = SDL_SetWindowPosition$MH();
        try {
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$0,"SDL_GetWindowPosition");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowPosition(SDL_Window* window, int* x, int* y);
     * }
     */
    public static void SDL_GetWindowPosition(MemorySegment window, MemorySegment x, MemorySegment y) {
        var mh$ = SDL_GetWindowPosition$MH();
        try {
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"SDL_SetWindowSize");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowSize(SDL_Window* window, int w, int h);
     * }
     */
    public static void SDL_SetWindowSize(MemorySegment window, int w, int h) {
        var mh$ = SDL_SetWindowSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"SDL_GetWindowSize");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowSize(SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowBordersSize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$3,"SDL_GetWindowBordersSize");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowBordersSize(SDL_Window* window, int* top, int* left, int* bottom, int* right);
     * }
     */
    public static int SDL_GetWindowBordersSize(MemorySegment window, MemorySegment top, MemorySegment left, MemorySegment bottom, MemorySegment right) {
        var mh$ = SDL_GetWindowBordersSize$MH();
        try {
            return (int)mh$.invokeExact(window, top, left, bottom, right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowSizeInPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"SDL_GetWindowSizeInPixels");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowSizeInPixels(SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowSizeInPixels(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowSizeInPixels$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMinimumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"SDL_SetWindowMinimumSize");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);
     * }
     */
    public static void SDL_SetWindowMinimumSize(MemorySegment window, int min_w, int min_h) {
        var mh$ = SDL_SetWindowMinimumSize$MH();
        try {
            mh$.invokeExact(window, min_w, min_h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMinimumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"SDL_GetWindowMinimumSize");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowMinimumSize(SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowMinimumSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowMinimumSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMaximumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$1,"SDL_SetWindowMaximumSize");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);
     * }
     */
    public static void SDL_SetWindowMaximumSize(MemorySegment window, int max_w, int max_h) {
        var mh$ = SDL_SetWindowMaximumSize$MH();
        try {
            mh$.invokeExact(window, max_w, max_h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMaximumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"SDL_GetWindowMaximumSize");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowMaximumSize(SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowMaximumSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowMaximumSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowBordered$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$4,"SDL_SetWindowBordered");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowBordered(SDL_Window* window, SDL_bool bordered);
     * }
     */
    public static void SDL_SetWindowBordered(MemorySegment window, int bordered) {
        var mh$ = SDL_SetWindowBordered$MH();
        try {
            mh$.invokeExact(window, bordered);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowResizable$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"SDL_SetWindowResizable");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowResizable(SDL_Window* window, SDL_bool resizable);
     * }
     */
    public static void SDL_SetWindowResizable(MemorySegment window, int resizable) {
        var mh$ = SDL_SetWindowResizable$MH();
        try {
            mh$.invokeExact(window, resizable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowAlwaysOnTop$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"SDL_SetWindowAlwaysOnTop");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowAlwaysOnTop(SDL_Window* window, SDL_bool on_top);
     * }
     */
    public static void SDL_SetWindowAlwaysOnTop(MemorySegment window, int on_top) {
        var mh$ = SDL_SetWindowAlwaysOnTop$MH();
        try {
            mh$.invokeExact(window, on_top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"SDL_ShowWindow");
    }
    /**
     * {@snippet :
     * void SDL_ShowWindow(SDL_Window* window);
     * }
     */
    public static void SDL_ShowWindow(MemorySegment window) {
        var mh$ = SDL_ShowWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HideWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"SDL_HideWindow");
    }
    /**
     * {@snippet :
     * void SDL_HideWindow(SDL_Window* window);
     * }
     */
    public static void SDL_HideWindow(MemorySegment window) {
        var mh$ = SDL_HideWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RaiseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"SDL_RaiseWindow");
    }
    /**
     * {@snippet :
     * void SDL_RaiseWindow(SDL_Window* window);
     * }
     */
    public static void SDL_RaiseWindow(MemorySegment window) {
        var mh$ = SDL_RaiseWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MaximizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$4,"SDL_MaximizeWindow");
    }
    /**
     * {@snippet :
     * void SDL_MaximizeWindow(SDL_Window* window);
     * }
     */
    public static void SDL_MaximizeWindow(MemorySegment window) {
        var mh$ = SDL_MaximizeWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MinimizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"SDL_MinimizeWindow");
    }
    /**
     * {@snippet :
     * void SDL_MinimizeWindow(SDL_Window* window);
     * }
     */
    public static void SDL_MinimizeWindow(MemorySegment window) {
        var mh$ = SDL_MinimizeWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RestoreWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$0,"SDL_RestoreWindow");
    }
    /**
     * {@snippet :
     * void SDL_RestoreWindow(SDL_Window* window);
     * }
     */
    public static void SDL_RestoreWindow(MemorySegment window) {
        var mh$ = SDL_RestoreWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowFullscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"SDL_SetWindowFullscreen");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowFullscreen(SDL_Window* window, Uint32 flags);
     * }
     */
    public static int SDL_SetWindowFullscreen(MemorySegment window, int flags) {
        var mh$ = SDL_SetWindowFullscreen$MH();
        try {
            return (int)mh$.invokeExact(window, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"SDL_GetWindowSurface");
    }
    /**
     * {@snippet :
     * SDL_Surface* SDL_GetWindowSurface(SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetWindowSurface(MemorySegment window) {
        var mh$ = SDL_GetWindowSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateWindowSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$3,"SDL_UpdateWindowSurface");
    }
    /**
     * {@snippet :
     * int SDL_UpdateWindowSurface(SDL_Window* window);
     * }
     */
    public static int SDL_UpdateWindowSurface(MemorySegment window) {
        var mh$ = SDL_UpdateWindowSurface$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateWindowSurfaceRects$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"SDL_UpdateWindowSurfaceRects");
    }
    /**
     * {@snippet :
     * int SDL_UpdateWindowSurfaceRects(SDL_Window* window, const SDL_Rect* rects, int numrects);
     * }
     */
    public static int SDL_UpdateWindowSurfaceRects(MemorySegment window, MemorySegment rects, int numrects) {
        var mh$ = SDL_UpdateWindowSurfaceRects$MH();
        try {
            return (int)mh$.invokeExact(window, rects, numrects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$5,"SDL_SetWindowGrab");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowGrab(SDL_Window* window, SDL_bool grabbed);
     * }
     */
    public static void SDL_SetWindowGrab(MemorySegment window, int grabbed) {
        var mh$ = SDL_SetWindowGrab$MH();
        try {
            mh$.invokeExact(window, grabbed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowKeyboardGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$0,"SDL_SetWindowKeyboardGrab");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowKeyboardGrab(SDL_Window* window, SDL_bool grabbed);
     * }
     */
    public static void SDL_SetWindowKeyboardGrab(MemorySegment window, int grabbed) {
        var mh$ = SDL_SetWindowKeyboardGrab$MH();
        try {
            mh$.invokeExact(window, grabbed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMouseGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$1,"SDL_SetWindowMouseGrab");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowMouseGrab(SDL_Window* window, SDL_bool grabbed);
     * }
     */
    public static void SDL_SetWindowMouseGrab(MemorySegment window, int grabbed) {
        var mh$ = SDL_SetWindowMouseGrab$MH();
        try {
            mh$.invokeExact(window, grabbed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"SDL_GetWindowGrab");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GetWindowGrab(SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowGrab(MemorySegment window) {
        var mh$ = SDL_GetWindowGrab$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowKeyboardGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$3,"SDL_GetWindowKeyboardGrab");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GetWindowKeyboardGrab(SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowKeyboardGrab(MemorySegment window) {
        var mh$ = SDL_GetWindowKeyboardGrab$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMouseGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$4,"SDL_GetWindowMouseGrab");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GetWindowMouseGrab(SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowMouseGrab(MemorySegment window) {
        var mh$ = SDL_GetWindowMouseGrab$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetGrabbedWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$5,"SDL_GetGrabbedWindow");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_GetGrabbedWindow();
     * }
     */
    public static MemorySegment SDL_GetGrabbedWindow() {
        var mh$ = SDL_GetGrabbedWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMouseRect$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$0,"SDL_SetWindowMouseRect");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowMouseRect(SDL_Window* window, const SDL_Rect* rect);
     * }
     */
    public static int SDL_SetWindowMouseRect(MemorySegment window, MemorySegment rect) {
        var mh$ = SDL_SetWindowMouseRect$MH();
        try {
            return (int)mh$.invokeExact(window, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMouseRect$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$1,"SDL_GetWindowMouseRect");
    }
    /**
     * {@snippet :
     * const SDL_Rect* SDL_GetWindowMouseRect(SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetWindowMouseRect(MemorySegment window) {
        var mh$ = SDL_GetWindowMouseRect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowBrightness$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"SDL_SetWindowBrightness");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowBrightness(SDL_Window* window, float brightness);
     * }
     */
    public static int SDL_SetWindowBrightness(MemorySegment window, float brightness) {
        var mh$ = SDL_SetWindowBrightness$MH();
        try {
            return (int)mh$.invokeExact(window, brightness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowBrightness$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$5,"SDL_GetWindowBrightness");
    }
    /**
     * {@snippet :
     * float SDL_GetWindowBrightness(SDL_Window* window);
     * }
     */
    public static float SDL_GetWindowBrightness(MemorySegment window) {
        var mh$ = SDL_GetWindowBrightness$MH();
        try {
            return (float)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowOpacity$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$0,"SDL_SetWindowOpacity");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowOpacity(SDL_Window* window, float opacity);
     * }
     */
    public static int SDL_SetWindowOpacity(MemorySegment window, float opacity) {
        var mh$ = SDL_SetWindowOpacity$MH();
        try {
            return (int)mh$.invokeExact(window, opacity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowOpacity$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"SDL_GetWindowOpacity");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowOpacity(SDL_Window* window, float* out_opacity);
     * }
     */
    public static int SDL_GetWindowOpacity(MemorySegment window, MemorySegment out_opacity) {
        var mh$ = SDL_GetWindowOpacity$MH();
        try {
            return (int)mh$.invokeExact(window, out_opacity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowModalFor$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"SDL_SetWindowModalFor");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window);
     * }
     */
    public static int SDL_SetWindowModalFor(MemorySegment modal_window, MemorySegment parent_window) {
        var mh$ = SDL_SetWindowModalFor$MH();
        try {
            return (int)mh$.invokeExact(modal_window, parent_window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$3,"SDL_SetWindowInputFocus");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowInputFocus(SDL_Window* window);
     * }
     */
    public static int SDL_SetWindowInputFocus(MemorySegment window) {
        var mh$ = SDL_SetWindowInputFocus$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"SDL_SetWindowGammaRamp");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowGammaRamp(SDL_Window* window, const Uint16* red, const Uint16* green, const Uint16* blue);
     * }
     */
    public static int SDL_SetWindowGammaRamp(MemorySegment window, MemorySegment red, MemorySegment green, MemorySegment blue) {
        var mh$ = SDL_SetWindowGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(window, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$5,"SDL_GetWindowGammaRamp");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowGammaRamp(SDL_Window* window, Uint16* red, Uint16* green, Uint16* blue);
     * }
     */
    public static int SDL_GetWindowGammaRamp(MemorySegment window, MemorySegment red, MemorySegment green, MemorySegment blue) {
        var mh$ = SDL_GetWindowGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(window, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_HITTEST_NORMAL = 0;
     * }
     */
    public static int SDL_HITTEST_NORMAL() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_HITTEST_NORMAL = SDL_HITTEST_NORMAL();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_DRAGGABLE = 1;
     * }
     */
    public static int SDL_HITTEST_DRAGGABLE() {
        return (int)1L;
    }
    /** (int)1L */
    public static final int SDL_HITTEST_DRAGGABLE = SDL_HITTEST_DRAGGABLE();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_TOPLEFT = 2;
     * }
     */
    public static int SDL_HITTEST_RESIZE_TOPLEFT() {
        return (int)2L;
    }
    /** (int)2L */
    public static final int SDL_HITTEST_RESIZE_TOPLEFT = SDL_HITTEST_RESIZE_TOPLEFT();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_TOP = 3;
     * }
     */
    public static int SDL_HITTEST_RESIZE_TOP() {
        return (int)3L;
    }
    /** (int)3L */
    public static final int SDL_HITTEST_RESIZE_TOP = SDL_HITTEST_RESIZE_TOP();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_TOPRIGHT = 4;
     * }
     */
    public static int SDL_HITTEST_RESIZE_TOPRIGHT() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_HITTEST_RESIZE_TOPRIGHT = SDL_HITTEST_RESIZE_TOPRIGHT();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_RIGHT = 5;
     * }
     */
    public static int SDL_HITTEST_RESIZE_RIGHT() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_HITTEST_RESIZE_RIGHT = SDL_HITTEST_RESIZE_RIGHT();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
     * }
     */
    public static int SDL_HITTEST_RESIZE_BOTTOMRIGHT() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_HITTEST_RESIZE_BOTTOMRIGHT = SDL_HITTEST_RESIZE_BOTTOMRIGHT();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_BOTTOM = 7;
     * }
     */
    public static int SDL_HITTEST_RESIZE_BOTTOM() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_HITTEST_RESIZE_BOTTOM = SDL_HITTEST_RESIZE_BOTTOM();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
     * }
     */
    public static int SDL_HITTEST_RESIZE_BOTTOMLEFT() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_HITTEST_RESIZE_BOTTOMLEFT = SDL_HITTEST_RESIZE_BOTTOMLEFT();
    /**
     * {@snippet :
     * enum .SDL_HITTEST_RESIZE_LEFT = 9;
     * }
     */
    public static int SDL_HITTEST_RESIZE_LEFT() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDL_HITTEST_RESIZE_LEFT = SDL_HITTEST_RESIZE_LEFT();
    public static MethodHandle SDL_SetWindowHitTest$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$2,"SDL_SetWindowHitTest");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data);
     * }
     */
    public static int SDL_SetWindowHitTest(MemorySegment window, MemorySegment callback, MemorySegment callback_data) {
        var mh$ = SDL_SetWindowHitTest$MH();
        try {
            return (int)mh$.invokeExact(window, callback, callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FlashWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$3,"SDL_FlashWindow");
    }
    /**
     * {@snippet :
     * int SDL_FlashWindow(SDL_Window* window, SDL_FlashOperation operation);
     * }
     */
    public static int SDL_FlashWindow(MemorySegment window, int operation) {
        var mh$ = SDL_FlashWindow$MH();
        try {
            return (int)mh$.invokeExact(window, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$4,"SDL_DestroyWindow");
    }
    /**
     * {@snippet :
     * void SDL_DestroyWindow(SDL_Window* window);
     * }
     */
    public static void SDL_DestroyWindow(MemorySegment window) {
        var mh$ = SDL_DestroyWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsScreenSaverEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$5,"SDL_IsScreenSaverEnabled");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IsScreenSaverEnabled();
     * }
     */
    public static int SDL_IsScreenSaverEnabled() {
        var mh$ = SDL_IsScreenSaverEnabled$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EnableScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$0,"SDL_EnableScreenSaver");
    }
    /**
     * {@snippet :
     * void SDL_EnableScreenSaver();
     * }
     */
    public static void SDL_EnableScreenSaver() {
        var mh$ = SDL_EnableScreenSaver$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DisableScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$1,"SDL_DisableScreenSaver");
    }
    /**
     * {@snippet :
     * void SDL_DisableScreenSaver();
     * }
     */
    public static void SDL_DisableScreenSaver() {
        var mh$ = SDL_DisableScreenSaver$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_LoadLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$2,"SDL_GL_LoadLibrary");
    }
    /**
     * {@snippet :
     * int SDL_GL_LoadLibrary(char* path);
     * }
     */
    public static int SDL_GL_LoadLibrary(MemorySegment path) {
        var mh$ = SDL_GL_LoadLibrary$MH();
        try {
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$3,"SDL_GL_GetProcAddress");
    }
    /**
     * {@snippet :
     * void* SDL_GL_GetProcAddress(char* proc);
     * }
     */
    public static MemorySegment SDL_GL_GetProcAddress(MemorySegment proc) {
        var mh$ = SDL_GL_GetProcAddress$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(proc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_UnloadLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$4,"SDL_GL_UnloadLibrary");
    }
    /**
     * {@snippet :
     * void SDL_GL_UnloadLibrary();
     * }
     */
    public static void SDL_GL_UnloadLibrary() {
        var mh$ = SDL_GL_UnloadLibrary$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_ExtensionSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$5,"SDL_GL_ExtensionSupported");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GL_ExtensionSupported(char* extension);
     * }
     */
    public static int SDL_GL_ExtensionSupported(MemorySegment extension) {
        var mh$ = SDL_GL_ExtensionSupported$MH();
        try {
            return (int)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_ResetAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$0,"SDL_GL_ResetAttributes");
    }
    /**
     * {@snippet :
     * void SDL_GL_ResetAttributes();
     * }
     */
    public static void SDL_GL_ResetAttributes() {
        var mh$ = SDL_GL_ResetAttributes$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_SetAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$1,"SDL_GL_SetAttribute");
    }
    /**
     * {@snippet :
     * int SDL_GL_SetAttribute(SDL_GLattr attr, int value);
     * }
     */
    public static int SDL_GL_SetAttribute(int attr, int value) {
        var mh$ = SDL_GL_SetAttribute$MH();
        try {
            return (int)mh$.invokeExact(attr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$2,"SDL_GL_GetAttribute");
    }
    /**
     * {@snippet :
     * int SDL_GL_GetAttribute(SDL_GLattr attr, int* value);
     * }
     */
    public static int SDL_GL_GetAttribute(int attr, MemorySegment value) {
        var mh$ = SDL_GL_GetAttribute$MH();
        try {
            return (int)mh$.invokeExact(attr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_CreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$3,"SDL_GL_CreateContext");
    }
    /**
     * {@snippet :
     * SDL_GLContext SDL_GL_CreateContext(SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GL_CreateContext(MemorySegment window) {
        var mh$ = SDL_GL_CreateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_MakeCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$4,"SDL_GL_MakeCurrent");
    }
    /**
     * {@snippet :
     * int SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context);
     * }
     */
    public static int SDL_GL_MakeCurrent(MemorySegment window, MemorySegment context) {
        var mh$ = SDL_GL_MakeCurrent$MH();
        try {
            return (int)mh$.invokeExact(window, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetCurrentWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$5,"SDL_GL_GetCurrentWindow");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_GL_GetCurrentWindow();
     * }
     */
    public static MemorySegment SDL_GL_GetCurrentWindow() {
        var mh$ = SDL_GL_GetCurrentWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$0,"SDL_GL_GetCurrentContext");
    }
    /**
     * {@snippet :
     * SDL_GLContext SDL_GL_GetCurrentContext();
     * }
     */
    public static MemorySegment SDL_GL_GetCurrentContext() {
        var mh$ = SDL_GL_GetCurrentContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetDrawableSize$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$1,"SDL_GL_GetDrawableSize");
    }
    /**
     * {@snippet :
     * void SDL_GL_GetDrawableSize(SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GL_GetDrawableSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GL_GetDrawableSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_SetSwapInterval$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$2,"SDL_GL_SetSwapInterval");
    }
    /**
     * {@snippet :
     * int SDL_GL_SetSwapInterval(int interval);
     * }
     */
    public static int SDL_GL_SetSwapInterval(int interval) {
        var mh$ = SDL_GL_SetSwapInterval$MH();
        try {
            return (int)mh$.invokeExact(interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetSwapInterval$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$3,"SDL_GL_GetSwapInterval");
    }
    /**
     * {@snippet :
     * int SDL_GL_GetSwapInterval();
     * }
     */
    public static int SDL_GL_GetSwapInterval() {
        var mh$ = SDL_GL_GetSwapInterval$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_SwapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$4,"SDL_GL_SwapWindow");
    }
    /**
     * {@snippet :
     * void SDL_GL_SwapWindow(SDL_Window* window);
     * }
     */
    public static void SDL_GL_SwapWindow(MemorySegment window) {
        var mh$ = SDL_GL_SwapWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_DeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$5,"SDL_GL_DeleteContext");
    }
    /**
     * {@snippet :
     * void SDL_GL_DeleteContext(SDL_GLContext context);
     * }
     */
    public static void SDL_GL_DeleteContext(MemorySegment context) {
        var mh$ = SDL_GL_DeleteContext$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_UNKNOWN = 0;
     * }
     */
    public static int SDL_SCANCODE_UNKNOWN() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDL_SCANCODE_UNKNOWN = SDL_SCANCODE_UNKNOWN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_A = 4;
     * }
     */
    public static int SDL_SCANCODE_A() {
        return (int)4L;
    }
    /** (int)4L */
    public static final int SDL_SCANCODE_A = SDL_SCANCODE_A();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_B = 5;
     * }
     */
    public static int SDL_SCANCODE_B() {
        return (int)5L;
    }
    /** (int)5L */
    public static final int SDL_SCANCODE_B = SDL_SCANCODE_B();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_C = 6;
     * }
     */
    public static int SDL_SCANCODE_C() {
        return (int)6L;
    }
    /** (int)6L */
    public static final int SDL_SCANCODE_C = SDL_SCANCODE_C();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_D = 7;
     * }
     */
    public static int SDL_SCANCODE_D() {
        return (int)7L;
    }
    /** (int)7L */
    public static final int SDL_SCANCODE_D = SDL_SCANCODE_D();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_E = 8;
     * }
     */
    public static int SDL_SCANCODE_E() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDL_SCANCODE_E = SDL_SCANCODE_E();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F = 9;
     * }
     */
    public static int SDL_SCANCODE_F() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDL_SCANCODE_F = SDL_SCANCODE_F();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_G = 10;
     * }
     */
    public static int SDL_SCANCODE_G() {
        return (int)10L;
    }
    /** (int)10L */
    public static final int SDL_SCANCODE_G = SDL_SCANCODE_G();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_H = 11;
     * }
     */
    public static int SDL_SCANCODE_H() {
        return (int)11L;
    }
    /** (int)11L */
    public static final int SDL_SCANCODE_H = SDL_SCANCODE_H();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_I = 12;
     * }
     */
    public static int SDL_SCANCODE_I() {
        return (int)12L;
    }
    /** (int)12L */
    public static final int SDL_SCANCODE_I = SDL_SCANCODE_I();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_J = 13;
     * }
     */
    public static int SDL_SCANCODE_J() {
        return (int)13L;
    }
    /** (int)13L */
    public static final int SDL_SCANCODE_J = SDL_SCANCODE_J();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_K = 14;
     * }
     */
    public static int SDL_SCANCODE_K() {
        return (int)14L;
    }
    /** (int)14L */
    public static final int SDL_SCANCODE_K = SDL_SCANCODE_K();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_L = 15;
     * }
     */
    public static int SDL_SCANCODE_L() {
        return (int)15L;
    }
    /** (int)15L */
    public static final int SDL_SCANCODE_L = SDL_SCANCODE_L();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_M = 16;
     * }
     */
    public static int SDL_SCANCODE_M() {
        return (int)16L;
    }
    /** (int)16L */
    public static final int SDL_SCANCODE_M = SDL_SCANCODE_M();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_N = 17;
     * }
     */
    public static int SDL_SCANCODE_N() {
        return (int)17L;
    }
    /** (int)17L */
    public static final int SDL_SCANCODE_N = SDL_SCANCODE_N();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_O = 18;
     * }
     */
    public static int SDL_SCANCODE_O() {
        return (int)18L;
    }
    /** (int)18L */
    public static final int SDL_SCANCODE_O = SDL_SCANCODE_O();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_P = 19;
     * }
     */
    public static int SDL_SCANCODE_P() {
        return (int)19L;
    }
    /** (int)19L */
    public static final int SDL_SCANCODE_P = SDL_SCANCODE_P();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_Q = 20;
     * }
     */
    public static int SDL_SCANCODE_Q() {
        return (int)20L;
    }
    /** (int)20L */
    public static final int SDL_SCANCODE_Q = SDL_SCANCODE_Q();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_R = 21;
     * }
     */
    public static int SDL_SCANCODE_R() {
        return (int)21L;
    }
    /** (int)21L */
    public static final int SDL_SCANCODE_R = SDL_SCANCODE_R();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_S = 22;
     * }
     */
    public static int SDL_SCANCODE_S() {
        return (int)22L;
    }
    /** (int)22L */
    public static final int SDL_SCANCODE_S = SDL_SCANCODE_S();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_T = 23;
     * }
     */
    public static int SDL_SCANCODE_T() {
        return (int)23L;
    }
    /** (int)23L */
    public static final int SDL_SCANCODE_T = SDL_SCANCODE_T();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_U = 24;
     * }
     */
    public static int SDL_SCANCODE_U() {
        return (int)24L;
    }
    /** (int)24L */
    public static final int SDL_SCANCODE_U = SDL_SCANCODE_U();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_V = 25;
     * }
     */
    public static int SDL_SCANCODE_V() {
        return (int)25L;
    }
    /** (int)25L */
    public static final int SDL_SCANCODE_V = SDL_SCANCODE_V();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_W = 26;
     * }
     */
    public static int SDL_SCANCODE_W() {
        return (int)26L;
    }
    /** (int)26L */
    public static final int SDL_SCANCODE_W = SDL_SCANCODE_W();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_X = 27;
     * }
     */
    public static int SDL_SCANCODE_X() {
        return (int)27L;
    }
    /** (int)27L */
    public static final int SDL_SCANCODE_X = SDL_SCANCODE_X();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_Y = 28;
     * }
     */
    public static int SDL_SCANCODE_Y() {
        return (int)28L;
    }
    /** (int)28L */
    public static final int SDL_SCANCODE_Y = SDL_SCANCODE_Y();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_Z = 29;
     * }
     */
    public static int SDL_SCANCODE_Z() {
        return (int)29L;
    }
    /** (int)29L */
    public static final int SDL_SCANCODE_Z = SDL_SCANCODE_Z();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_1 = 30;
     * }
     */
    public static int SDL_SCANCODE_1() {
        return (int)30L;
    }
    /** (int)30L */
    public static final int SDL_SCANCODE_1 = SDL_SCANCODE_1();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_2 = 31;
     * }
     */
    public static int SDL_SCANCODE_2() {
        return (int)31L;
    }
    /** (int)31L */
    public static final int SDL_SCANCODE_2 = SDL_SCANCODE_2();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_3 = 32;
     * }
     */
    public static int SDL_SCANCODE_3() {
        return (int)32L;
    }
    /** (int)32L */
    public static final int SDL_SCANCODE_3 = SDL_SCANCODE_3();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_4 = 33;
     * }
     */
    public static int SDL_SCANCODE_4() {
        return (int)33L;
    }
    /** (int)33L */
    public static final int SDL_SCANCODE_4 = SDL_SCANCODE_4();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_5 = 34;
     * }
     */
    public static int SDL_SCANCODE_5() {
        return (int)34L;
    }
    /** (int)34L */
    public static final int SDL_SCANCODE_5 = SDL_SCANCODE_5();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_6 = 35;
     * }
     */
    public static int SDL_SCANCODE_6() {
        return (int)35L;
    }
    /** (int)35L */
    public static final int SDL_SCANCODE_6 = SDL_SCANCODE_6();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_7 = 36;
     * }
     */
    public static int SDL_SCANCODE_7() {
        return (int)36L;
    }
    /** (int)36L */
    public static final int SDL_SCANCODE_7 = SDL_SCANCODE_7();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_8 = 37;
     * }
     */
    public static int SDL_SCANCODE_8() {
        return (int)37L;
    }
    /** (int)37L */
    public static final int SDL_SCANCODE_8 = SDL_SCANCODE_8();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_9 = 38;
     * }
     */
    public static int SDL_SCANCODE_9() {
        return (int)38L;
    }
    /** (int)38L */
    public static final int SDL_SCANCODE_9 = SDL_SCANCODE_9();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_0 = 39;
     * }
     */
    public static int SDL_SCANCODE_0() {
        return (int)39L;
    }
    /** (int)39L */
    public static final int SDL_SCANCODE_0 = SDL_SCANCODE_0();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RETURN = 40;
     * }
     */
    public static int SDL_SCANCODE_RETURN() {
        return (int)40L;
    }
    /** (int)40L */
    public static final int SDL_SCANCODE_RETURN = SDL_SCANCODE_RETURN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_ESCAPE = 41;
     * }
     */
    public static int SDL_SCANCODE_ESCAPE() {
        return (int)41L;
    }
    /** (int)41L */
    public static final int SDL_SCANCODE_ESCAPE = SDL_SCANCODE_ESCAPE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_BACKSPACE = 42;
     * }
     */
    public static int SDL_SCANCODE_BACKSPACE() {
        return (int)42L;
    }
    /** (int)42L */
    public static final int SDL_SCANCODE_BACKSPACE = SDL_SCANCODE_BACKSPACE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_TAB = 43;
     * }
     */
    public static int SDL_SCANCODE_TAB() {
        return (int)43L;
    }
    /** (int)43L */
    public static final int SDL_SCANCODE_TAB = SDL_SCANCODE_TAB();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SPACE = 44;
     * }
     */
    public static int SDL_SCANCODE_SPACE() {
        return (int)44L;
    }
    /** (int)44L */
    public static final int SDL_SCANCODE_SPACE = SDL_SCANCODE_SPACE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_MINUS = 45;
     * }
     */
    public static int SDL_SCANCODE_MINUS() {
        return (int)45L;
    }
    /** (int)45L */
    public static final int SDL_SCANCODE_MINUS = SDL_SCANCODE_MINUS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_EQUALS = 46;
     * }
     */
    public static int SDL_SCANCODE_EQUALS() {
        return (int)46L;
    }
    /** (int)46L */
    public static final int SDL_SCANCODE_EQUALS = SDL_SCANCODE_EQUALS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LEFTBRACKET = 47;
     * }
     */
    public static int SDL_SCANCODE_LEFTBRACKET() {
        return (int)47L;
    }
    /** (int)47L */
    public static final int SDL_SCANCODE_LEFTBRACKET = SDL_SCANCODE_LEFTBRACKET();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RIGHTBRACKET = 48;
     * }
     */
    public static int SDL_SCANCODE_RIGHTBRACKET() {
        return (int)48L;
    }
    /** (int)48L */
    public static final int SDL_SCANCODE_RIGHTBRACKET = SDL_SCANCODE_RIGHTBRACKET();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_BACKSLASH = 49;
     * }
     */
    public static int SDL_SCANCODE_BACKSLASH() {
        return (int)49L;
    }
    /** (int)49L */
    public static final int SDL_SCANCODE_BACKSLASH = SDL_SCANCODE_BACKSLASH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_NONUSHASH = 50;
     * }
     */
    public static int SDL_SCANCODE_NONUSHASH() {
        return (int)50L;
    }
    /** (int)50L */
    public static final int SDL_SCANCODE_NONUSHASH = SDL_SCANCODE_NONUSHASH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SEMICOLON = 51;
     * }
     */
    public static int SDL_SCANCODE_SEMICOLON() {
        return (int)51L;
    }
    /** (int)51L */
    public static final int SDL_SCANCODE_SEMICOLON = SDL_SCANCODE_SEMICOLON();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_APOSTROPHE = 52;
     * }
     */
    public static int SDL_SCANCODE_APOSTROPHE() {
        return (int)52L;
    }
    /** (int)52L */
    public static final int SDL_SCANCODE_APOSTROPHE = SDL_SCANCODE_APOSTROPHE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_GRAVE = 53;
     * }
     */
    public static int SDL_SCANCODE_GRAVE() {
        return (int)53L;
    }
    /** (int)53L */
    public static final int SDL_SCANCODE_GRAVE = SDL_SCANCODE_GRAVE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_COMMA = 54;
     * }
     */
    public static int SDL_SCANCODE_COMMA() {
        return (int)54L;
    }
    /** (int)54L */
    public static final int SDL_SCANCODE_COMMA = SDL_SCANCODE_COMMA();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_PERIOD = 55;
     * }
     */
    public static int SDL_SCANCODE_PERIOD() {
        return (int)55L;
    }
    /** (int)55L */
    public static final int SDL_SCANCODE_PERIOD = SDL_SCANCODE_PERIOD();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SLASH = 56;
     * }
     */
    public static int SDL_SCANCODE_SLASH() {
        return (int)56L;
    }
    /** (int)56L */
    public static final int SDL_SCANCODE_SLASH = SDL_SCANCODE_SLASH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CAPSLOCK = 57;
     * }
     */
    public static int SDL_SCANCODE_CAPSLOCK() {
        return (int)57L;
    }
    /** (int)57L */
    public static final int SDL_SCANCODE_CAPSLOCK = SDL_SCANCODE_CAPSLOCK();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F1 = 58;
     * }
     */
    public static int SDL_SCANCODE_F1() {
        return (int)58L;
    }
    /** (int)58L */
    public static final int SDL_SCANCODE_F1 = SDL_SCANCODE_F1();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F2 = 59;
     * }
     */
    public static int SDL_SCANCODE_F2() {
        return (int)59L;
    }
    /** (int)59L */
    public static final int SDL_SCANCODE_F2 = SDL_SCANCODE_F2();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F3 = 60;
     * }
     */
    public static int SDL_SCANCODE_F3() {
        return (int)60L;
    }
    /** (int)60L */
    public static final int SDL_SCANCODE_F3 = SDL_SCANCODE_F3();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F4 = 61;
     * }
     */
    public static int SDL_SCANCODE_F4() {
        return (int)61L;
    }
    /** (int)61L */
    public static final int SDL_SCANCODE_F4 = SDL_SCANCODE_F4();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F5 = 62;
     * }
     */
    public static int SDL_SCANCODE_F5() {
        return (int)62L;
    }
    /** (int)62L */
    public static final int SDL_SCANCODE_F5 = SDL_SCANCODE_F5();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F6 = 63;
     * }
     */
    public static int SDL_SCANCODE_F6() {
        return (int)63L;
    }
    /** (int)63L */
    public static final int SDL_SCANCODE_F6 = SDL_SCANCODE_F6();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F7 = 64;
     * }
     */
    public static int SDL_SCANCODE_F7() {
        return (int)64L;
    }
    /** (int)64L */
    public static final int SDL_SCANCODE_F7 = SDL_SCANCODE_F7();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F8 = 65;
     * }
     */
    public static int SDL_SCANCODE_F8() {
        return (int)65L;
    }
    /** (int)65L */
    public static final int SDL_SCANCODE_F8 = SDL_SCANCODE_F8();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F9 = 66;
     * }
     */
    public static int SDL_SCANCODE_F9() {
        return (int)66L;
    }
    /** (int)66L */
    public static final int SDL_SCANCODE_F9 = SDL_SCANCODE_F9();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F10 = 67;
     * }
     */
    public static int SDL_SCANCODE_F10() {
        return (int)67L;
    }
    /** (int)67L */
    public static final int SDL_SCANCODE_F10 = SDL_SCANCODE_F10();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F11 = 68;
     * }
     */
    public static int SDL_SCANCODE_F11() {
        return (int)68L;
    }
    /** (int)68L */
    public static final int SDL_SCANCODE_F11 = SDL_SCANCODE_F11();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F12 = 69;
     * }
     */
    public static int SDL_SCANCODE_F12() {
        return (int)69L;
    }
    /** (int)69L */
    public static final int SDL_SCANCODE_F12 = SDL_SCANCODE_F12();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_PRINTSCREEN = 70;
     * }
     */
    public static int SDL_SCANCODE_PRINTSCREEN() {
        return (int)70L;
    }
    /** (int)70L */
    public static final int SDL_SCANCODE_PRINTSCREEN = SDL_SCANCODE_PRINTSCREEN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SCROLLLOCK = 71;
     * }
     */
    public static int SDL_SCANCODE_SCROLLLOCK() {
        return (int)71L;
    }
    /** (int)71L */
    public static final int SDL_SCANCODE_SCROLLLOCK = SDL_SCANCODE_SCROLLLOCK();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_PAUSE = 72;
     * }
     */
    public static int SDL_SCANCODE_PAUSE() {
        return (int)72L;
    }
    /** (int)72L */
    public static final int SDL_SCANCODE_PAUSE = SDL_SCANCODE_PAUSE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INSERT = 73;
     * }
     */
    public static int SDL_SCANCODE_INSERT() {
        return (int)73L;
    }
    /** (int)73L */
    public static final int SDL_SCANCODE_INSERT = SDL_SCANCODE_INSERT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_HOME = 74;
     * }
     */
    public static int SDL_SCANCODE_HOME() {
        return (int)74L;
    }
    /** (int)74L */
    public static final int SDL_SCANCODE_HOME = SDL_SCANCODE_HOME();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_PAGEUP = 75;
     * }
     */
    public static int SDL_SCANCODE_PAGEUP() {
        return (int)75L;
    }
    /** (int)75L */
    public static final int SDL_SCANCODE_PAGEUP = SDL_SCANCODE_PAGEUP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_DELETE = 76;
     * }
     */
    public static int SDL_SCANCODE_DELETE() {
        return (int)76L;
    }
    /** (int)76L */
    public static final int SDL_SCANCODE_DELETE = SDL_SCANCODE_DELETE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_END = 77;
     * }
     */
    public static int SDL_SCANCODE_END() {
        return (int)77L;
    }
    /** (int)77L */
    public static final int SDL_SCANCODE_END = SDL_SCANCODE_END();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_PAGEDOWN = 78;
     * }
     */
    public static int SDL_SCANCODE_PAGEDOWN() {
        return (int)78L;
    }
    /** (int)78L */
    public static final int SDL_SCANCODE_PAGEDOWN = SDL_SCANCODE_PAGEDOWN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RIGHT = 79;
     * }
     */
    public static int SDL_SCANCODE_RIGHT() {
        return (int)79L;
    }
    /** (int)79L */
    public static final int SDL_SCANCODE_RIGHT = SDL_SCANCODE_RIGHT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LEFT = 80;
     * }
     */
    public static int SDL_SCANCODE_LEFT() {
        return (int)80L;
    }
    /** (int)80L */
    public static final int SDL_SCANCODE_LEFT = SDL_SCANCODE_LEFT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_DOWN = 81;
     * }
     */
    public static int SDL_SCANCODE_DOWN() {
        return (int)81L;
    }
    /** (int)81L */
    public static final int SDL_SCANCODE_DOWN = SDL_SCANCODE_DOWN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_UP = 82;
     * }
     */
    public static int SDL_SCANCODE_UP() {
        return (int)82L;
    }
    /** (int)82L */
    public static final int SDL_SCANCODE_UP = SDL_SCANCODE_UP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_NUMLOCKCLEAR = 83;
     * }
     */
    public static int SDL_SCANCODE_NUMLOCKCLEAR() {
        return (int)83L;
    }
    /** (int)83L */
    public static final int SDL_SCANCODE_NUMLOCKCLEAR = SDL_SCANCODE_NUMLOCKCLEAR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_DIVIDE = 84;
     * }
     */
    public static int SDL_SCANCODE_KP_DIVIDE() {
        return (int)84L;
    }
    /** (int)84L */
    public static final int SDL_SCANCODE_KP_DIVIDE = SDL_SCANCODE_KP_DIVIDE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MULTIPLY = 85;
     * }
     */
    public static int SDL_SCANCODE_KP_MULTIPLY() {
        return (int)85L;
    }
    /** (int)85L */
    public static final int SDL_SCANCODE_KP_MULTIPLY = SDL_SCANCODE_KP_MULTIPLY();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MINUS = 86;
     * }
     */
    public static int SDL_SCANCODE_KP_MINUS() {
        return (int)86L;
    }
    /** (int)86L */
    public static final int SDL_SCANCODE_KP_MINUS = SDL_SCANCODE_KP_MINUS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_PLUS = 87;
     * }
     */
    public static int SDL_SCANCODE_KP_PLUS() {
        return (int)87L;
    }
    /** (int)87L */
    public static final int SDL_SCANCODE_KP_PLUS = SDL_SCANCODE_KP_PLUS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_ENTER = 88;
     * }
     */
    public static int SDL_SCANCODE_KP_ENTER() {
        return (int)88L;
    }
    /** (int)88L */
    public static final int SDL_SCANCODE_KP_ENTER = SDL_SCANCODE_KP_ENTER();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_1 = 89;
     * }
     */
    public static int SDL_SCANCODE_KP_1() {
        return (int)89L;
    }
    /** (int)89L */
    public static final int SDL_SCANCODE_KP_1 = SDL_SCANCODE_KP_1();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_2 = 90;
     * }
     */
    public static int SDL_SCANCODE_KP_2() {
        return (int)90L;
    }
    /** (int)90L */
    public static final int SDL_SCANCODE_KP_2 = SDL_SCANCODE_KP_2();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_3 = 91;
     * }
     */
    public static int SDL_SCANCODE_KP_3() {
        return (int)91L;
    }
    /** (int)91L */
    public static final int SDL_SCANCODE_KP_3 = SDL_SCANCODE_KP_3();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_4 = 92;
     * }
     */
    public static int SDL_SCANCODE_KP_4() {
        return (int)92L;
    }
    /** (int)92L */
    public static final int SDL_SCANCODE_KP_4 = SDL_SCANCODE_KP_4();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_5 = 93;
     * }
     */
    public static int SDL_SCANCODE_KP_5() {
        return (int)93L;
    }
    /** (int)93L */
    public static final int SDL_SCANCODE_KP_5 = SDL_SCANCODE_KP_5();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_6 = 94;
     * }
     */
    public static int SDL_SCANCODE_KP_6() {
        return (int)94L;
    }
    /** (int)94L */
    public static final int SDL_SCANCODE_KP_6 = SDL_SCANCODE_KP_6();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_7 = 95;
     * }
     */
    public static int SDL_SCANCODE_KP_7() {
        return (int)95L;
    }
    /** (int)95L */
    public static final int SDL_SCANCODE_KP_7 = SDL_SCANCODE_KP_7();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_8 = 96;
     * }
     */
    public static int SDL_SCANCODE_KP_8() {
        return (int)96L;
    }
    /** (int)96L */
    public static final int SDL_SCANCODE_KP_8 = SDL_SCANCODE_KP_8();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_9 = 97;
     * }
     */
    public static int SDL_SCANCODE_KP_9() {
        return (int)97L;
    }
    /** (int)97L */
    public static final int SDL_SCANCODE_KP_9 = SDL_SCANCODE_KP_9();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_0 = 98;
     * }
     */
    public static int SDL_SCANCODE_KP_0() {
        return (int)98L;
    }
    /** (int)98L */
    public static final int SDL_SCANCODE_KP_0 = SDL_SCANCODE_KP_0();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_PERIOD = 99;
     * }
     */
    public static int SDL_SCANCODE_KP_PERIOD() {
        return (int)99L;
    }
    /** (int)99L */
    public static final int SDL_SCANCODE_KP_PERIOD = SDL_SCANCODE_KP_PERIOD();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_NONUSBACKSLASH = 100;
     * }
     */
    public static int SDL_SCANCODE_NONUSBACKSLASH() {
        return (int)100L;
    }
    /** (int)100L */
    public static final int SDL_SCANCODE_NONUSBACKSLASH = SDL_SCANCODE_NONUSBACKSLASH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_APPLICATION = 101;
     * }
     */
    public static int SDL_SCANCODE_APPLICATION() {
        return (int)101L;
    }
    /** (int)101L */
    public static final int SDL_SCANCODE_APPLICATION = SDL_SCANCODE_APPLICATION();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_POWER = 102;
     * }
     */
    public static int SDL_SCANCODE_POWER() {
        return (int)102L;
    }
    /** (int)102L */
    public static final int SDL_SCANCODE_POWER = SDL_SCANCODE_POWER();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_EQUALS = 103;
     * }
     */
    public static int SDL_SCANCODE_KP_EQUALS() {
        return (int)103L;
    }
    /** (int)103L */
    public static final int SDL_SCANCODE_KP_EQUALS = SDL_SCANCODE_KP_EQUALS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F13 = 104;
     * }
     */
    public static int SDL_SCANCODE_F13() {
        return (int)104L;
    }
    /** (int)104L */
    public static final int SDL_SCANCODE_F13 = SDL_SCANCODE_F13();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F14 = 105;
     * }
     */
    public static int SDL_SCANCODE_F14() {
        return (int)105L;
    }
    /** (int)105L */
    public static final int SDL_SCANCODE_F14 = SDL_SCANCODE_F14();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F15 = 106;
     * }
     */
    public static int SDL_SCANCODE_F15() {
        return (int)106L;
    }
    /** (int)106L */
    public static final int SDL_SCANCODE_F15 = SDL_SCANCODE_F15();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F16 = 107;
     * }
     */
    public static int SDL_SCANCODE_F16() {
        return (int)107L;
    }
    /** (int)107L */
    public static final int SDL_SCANCODE_F16 = SDL_SCANCODE_F16();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F17 = 108;
     * }
     */
    public static int SDL_SCANCODE_F17() {
        return (int)108L;
    }
    /** (int)108L */
    public static final int SDL_SCANCODE_F17 = SDL_SCANCODE_F17();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F18 = 109;
     * }
     */
    public static int SDL_SCANCODE_F18() {
        return (int)109L;
    }
    /** (int)109L */
    public static final int SDL_SCANCODE_F18 = SDL_SCANCODE_F18();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F19 = 110;
     * }
     */
    public static int SDL_SCANCODE_F19() {
        return (int)110L;
    }
    /** (int)110L */
    public static final int SDL_SCANCODE_F19 = SDL_SCANCODE_F19();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F20 = 111;
     * }
     */
    public static int SDL_SCANCODE_F20() {
        return (int)111L;
    }
    /** (int)111L */
    public static final int SDL_SCANCODE_F20 = SDL_SCANCODE_F20();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F21 = 112;
     * }
     */
    public static int SDL_SCANCODE_F21() {
        return (int)112L;
    }
    /** (int)112L */
    public static final int SDL_SCANCODE_F21 = SDL_SCANCODE_F21();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F22 = 113;
     * }
     */
    public static int SDL_SCANCODE_F22() {
        return (int)113L;
    }
    /** (int)113L */
    public static final int SDL_SCANCODE_F22 = SDL_SCANCODE_F22();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F23 = 114;
     * }
     */
    public static int SDL_SCANCODE_F23() {
        return (int)114L;
    }
    /** (int)114L */
    public static final int SDL_SCANCODE_F23 = SDL_SCANCODE_F23();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_F24 = 115;
     * }
     */
    public static int SDL_SCANCODE_F24() {
        return (int)115L;
    }
    /** (int)115L */
    public static final int SDL_SCANCODE_F24 = SDL_SCANCODE_F24();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_EXECUTE = 116;
     * }
     */
    public static int SDL_SCANCODE_EXECUTE() {
        return (int)116L;
    }
    /** (int)116L */
    public static final int SDL_SCANCODE_EXECUTE = SDL_SCANCODE_EXECUTE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_HELP = 117;
     * }
     */
    public static int SDL_SCANCODE_HELP() {
        return (int)117L;
    }
    /** (int)117L */
    public static final int SDL_SCANCODE_HELP = SDL_SCANCODE_HELP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_MENU = 118;
     * }
     */
    public static int SDL_SCANCODE_MENU() {
        return (int)118L;
    }
    /** (int)118L */
    public static final int SDL_SCANCODE_MENU = SDL_SCANCODE_MENU();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SELECT = 119;
     * }
     */
    public static int SDL_SCANCODE_SELECT() {
        return (int)119L;
    }
    /** (int)119L */
    public static final int SDL_SCANCODE_SELECT = SDL_SCANCODE_SELECT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_STOP = 120;
     * }
     */
    public static int SDL_SCANCODE_STOP() {
        return (int)120L;
    }
    /** (int)120L */
    public static final int SDL_SCANCODE_STOP = SDL_SCANCODE_STOP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AGAIN = 121;
     * }
     */
    public static int SDL_SCANCODE_AGAIN() {
        return (int)121L;
    }
    /** (int)121L */
    public static final int SDL_SCANCODE_AGAIN = SDL_SCANCODE_AGAIN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_UNDO = 122;
     * }
     */
    public static int SDL_SCANCODE_UNDO() {
        return (int)122L;
    }
    /** (int)122L */
    public static final int SDL_SCANCODE_UNDO = SDL_SCANCODE_UNDO();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CUT = 123;
     * }
     */
    public static int SDL_SCANCODE_CUT() {
        return (int)123L;
    }
    /** (int)123L */
    public static final int SDL_SCANCODE_CUT = SDL_SCANCODE_CUT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_COPY = 124;
     * }
     */
    public static int SDL_SCANCODE_COPY() {
        return (int)124L;
    }
    /** (int)124L */
    public static final int SDL_SCANCODE_COPY = SDL_SCANCODE_COPY();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_PASTE = 125;
     * }
     */
    public static int SDL_SCANCODE_PASTE() {
        return (int)125L;
    }
    /** (int)125L */
    public static final int SDL_SCANCODE_PASTE = SDL_SCANCODE_PASTE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_FIND = 126;
     * }
     */
    public static int SDL_SCANCODE_FIND() {
        return (int)126L;
    }
    /** (int)126L */
    public static final int SDL_SCANCODE_FIND = SDL_SCANCODE_FIND();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_MUTE = 127;
     * }
     */
    public static int SDL_SCANCODE_MUTE() {
        return (int)127L;
    }
    /** (int)127L */
    public static final int SDL_SCANCODE_MUTE = SDL_SCANCODE_MUTE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_VOLUMEUP = 128;
     * }
     */
    public static int SDL_SCANCODE_VOLUMEUP() {
        return (int)128L;
    }
    /** (int)128L */
    public static final int SDL_SCANCODE_VOLUMEUP = SDL_SCANCODE_VOLUMEUP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_VOLUMEDOWN = 129;
     * }
     */
    public static int SDL_SCANCODE_VOLUMEDOWN() {
        return (int)129L;
    }
    /** (int)129L */
    public static final int SDL_SCANCODE_VOLUMEDOWN = SDL_SCANCODE_VOLUMEDOWN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_COMMA = 133;
     * }
     */
    public static int SDL_SCANCODE_KP_COMMA() {
        return (int)133L;
    }
    /** (int)133L */
    public static final int SDL_SCANCODE_KP_COMMA = SDL_SCANCODE_KP_COMMA();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_EQUALSAS400 = 134;
     * }
     */
    public static int SDL_SCANCODE_KP_EQUALSAS400() {
        return (int)134L;
    }
    /** (int)134L */
    public static final int SDL_SCANCODE_KP_EQUALSAS400 = SDL_SCANCODE_KP_EQUALSAS400();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL1 = 135;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL1() {
        return (int)135L;
    }
    /** (int)135L */
    public static final int SDL_SCANCODE_INTERNATIONAL1 = SDL_SCANCODE_INTERNATIONAL1();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL2 = 136;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL2() {
        return (int)136L;
    }
    /** (int)136L */
    public static final int SDL_SCANCODE_INTERNATIONAL2 = SDL_SCANCODE_INTERNATIONAL2();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL3 = 137;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL3() {
        return (int)137L;
    }
    /** (int)137L */
    public static final int SDL_SCANCODE_INTERNATIONAL3 = SDL_SCANCODE_INTERNATIONAL3();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL4 = 138;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL4() {
        return (int)138L;
    }
    /** (int)138L */
    public static final int SDL_SCANCODE_INTERNATIONAL4 = SDL_SCANCODE_INTERNATIONAL4();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL5 = 139;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL5() {
        return (int)139L;
    }
    /** (int)139L */
    public static final int SDL_SCANCODE_INTERNATIONAL5 = SDL_SCANCODE_INTERNATIONAL5();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL6 = 140;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL6() {
        return (int)140L;
    }
    /** (int)140L */
    public static final int SDL_SCANCODE_INTERNATIONAL6 = SDL_SCANCODE_INTERNATIONAL6();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL7 = 141;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL7() {
        return (int)141L;
    }
    /** (int)141L */
    public static final int SDL_SCANCODE_INTERNATIONAL7 = SDL_SCANCODE_INTERNATIONAL7();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL8 = 142;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL8() {
        return (int)142L;
    }
    /** (int)142L */
    public static final int SDL_SCANCODE_INTERNATIONAL8 = SDL_SCANCODE_INTERNATIONAL8();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_INTERNATIONAL9 = 143;
     * }
     */
    public static int SDL_SCANCODE_INTERNATIONAL9() {
        return (int)143L;
    }
    /** (int)143L */
    public static final int SDL_SCANCODE_INTERNATIONAL9 = SDL_SCANCODE_INTERNATIONAL9();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG1 = 144;
     * }
     */
    public static int SDL_SCANCODE_LANG1() {
        return (int)144L;
    }
    /** (int)144L */
    public static final int SDL_SCANCODE_LANG1 = SDL_SCANCODE_LANG1();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG2 = 145;
     * }
     */
    public static int SDL_SCANCODE_LANG2() {
        return (int)145L;
    }
    /** (int)145L */
    public static final int SDL_SCANCODE_LANG2 = SDL_SCANCODE_LANG2();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG3 = 146;
     * }
     */
    public static int SDL_SCANCODE_LANG3() {
        return (int)146L;
    }
    /** (int)146L */
    public static final int SDL_SCANCODE_LANG3 = SDL_SCANCODE_LANG3();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG4 = 147;
     * }
     */
    public static int SDL_SCANCODE_LANG4() {
        return (int)147L;
    }
    /** (int)147L */
    public static final int SDL_SCANCODE_LANG4 = SDL_SCANCODE_LANG4();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG5 = 148;
     * }
     */
    public static int SDL_SCANCODE_LANG5() {
        return (int)148L;
    }
    /** (int)148L */
    public static final int SDL_SCANCODE_LANG5 = SDL_SCANCODE_LANG5();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG6 = 149;
     * }
     */
    public static int SDL_SCANCODE_LANG6() {
        return (int)149L;
    }
    /** (int)149L */
    public static final int SDL_SCANCODE_LANG6 = SDL_SCANCODE_LANG6();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG7 = 150;
     * }
     */
    public static int SDL_SCANCODE_LANG7() {
        return (int)150L;
    }
    /** (int)150L */
    public static final int SDL_SCANCODE_LANG7 = SDL_SCANCODE_LANG7();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG8 = 151;
     * }
     */
    public static int SDL_SCANCODE_LANG8() {
        return (int)151L;
    }
    /** (int)151L */
    public static final int SDL_SCANCODE_LANG8 = SDL_SCANCODE_LANG8();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LANG9 = 152;
     * }
     */
    public static int SDL_SCANCODE_LANG9() {
        return (int)152L;
    }
    /** (int)152L */
    public static final int SDL_SCANCODE_LANG9 = SDL_SCANCODE_LANG9();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_ALTERASE = 153;
     * }
     */
    public static int SDL_SCANCODE_ALTERASE() {
        return (int)153L;
    }
    /** (int)153L */
    public static final int SDL_SCANCODE_ALTERASE = SDL_SCANCODE_ALTERASE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SYSREQ = 154;
     * }
     */
    public static int SDL_SCANCODE_SYSREQ() {
        return (int)154L;
    }
    /** (int)154L */
    public static final int SDL_SCANCODE_SYSREQ = SDL_SCANCODE_SYSREQ();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CANCEL = 155;
     * }
     */
    public static int SDL_SCANCODE_CANCEL() {
        return (int)155L;
    }
    /** (int)155L */
    public static final int SDL_SCANCODE_CANCEL = SDL_SCANCODE_CANCEL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CLEAR = 156;
     * }
     */
    public static int SDL_SCANCODE_CLEAR() {
        return (int)156L;
    }
    /** (int)156L */
    public static final int SDL_SCANCODE_CLEAR = SDL_SCANCODE_CLEAR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_PRIOR = 157;
     * }
     */
    public static int SDL_SCANCODE_PRIOR() {
        return (int)157L;
    }
    /** (int)157L */
    public static final int SDL_SCANCODE_PRIOR = SDL_SCANCODE_PRIOR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RETURN2 = 158;
     * }
     */
    public static int SDL_SCANCODE_RETURN2() {
        return (int)158L;
    }
    /** (int)158L */
    public static final int SDL_SCANCODE_RETURN2 = SDL_SCANCODE_RETURN2();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SEPARATOR = 159;
     * }
     */
    public static int SDL_SCANCODE_SEPARATOR() {
        return (int)159L;
    }
    /** (int)159L */
    public static final int SDL_SCANCODE_SEPARATOR = SDL_SCANCODE_SEPARATOR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_OUT = 160;
     * }
     */
    public static int SDL_SCANCODE_OUT() {
        return (int)160L;
    }
    /** (int)160L */
    public static final int SDL_SCANCODE_OUT = SDL_SCANCODE_OUT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_OPER = 161;
     * }
     */
    public static int SDL_SCANCODE_OPER() {
        return (int)161L;
    }
    /** (int)161L */
    public static final int SDL_SCANCODE_OPER = SDL_SCANCODE_OPER();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CLEARAGAIN = 162;
     * }
     */
    public static int SDL_SCANCODE_CLEARAGAIN() {
        return (int)162L;
    }
    /** (int)162L */
    public static final int SDL_SCANCODE_CLEARAGAIN = SDL_SCANCODE_CLEARAGAIN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CRSEL = 163;
     * }
     */
    public static int SDL_SCANCODE_CRSEL() {
        return (int)163L;
    }
    /** (int)163L */
    public static final int SDL_SCANCODE_CRSEL = SDL_SCANCODE_CRSEL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_EXSEL = 164;
     * }
     */
    public static int SDL_SCANCODE_EXSEL() {
        return (int)164L;
    }
    /** (int)164L */
    public static final int SDL_SCANCODE_EXSEL = SDL_SCANCODE_EXSEL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_00 = 176;
     * }
     */
    public static int SDL_SCANCODE_KP_00() {
        return (int)176L;
    }
    /** (int)176L */
    public static final int SDL_SCANCODE_KP_00 = SDL_SCANCODE_KP_00();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_000 = 177;
     * }
     */
    public static int SDL_SCANCODE_KP_000() {
        return (int)177L;
    }
    /** (int)177L */
    public static final int SDL_SCANCODE_KP_000 = SDL_SCANCODE_KP_000();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
     * }
     */
    public static int SDL_SCANCODE_THOUSANDSSEPARATOR() {
        return (int)178L;
    }
    /** (int)178L */
    public static final int SDL_SCANCODE_THOUSANDSSEPARATOR = SDL_SCANCODE_THOUSANDSSEPARATOR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_DECIMALSEPARATOR = 179;
     * }
     */
    public static int SDL_SCANCODE_DECIMALSEPARATOR() {
        return (int)179L;
    }
    /** (int)179L */
    public static final int SDL_SCANCODE_DECIMALSEPARATOR = SDL_SCANCODE_DECIMALSEPARATOR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CURRENCYUNIT = 180;
     * }
     */
    public static int SDL_SCANCODE_CURRENCYUNIT() {
        return (int)180L;
    }
    /** (int)180L */
    public static final int SDL_SCANCODE_CURRENCYUNIT = SDL_SCANCODE_CURRENCYUNIT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CURRENCYSUBUNIT = 181;
     * }
     */
    public static int SDL_SCANCODE_CURRENCYSUBUNIT() {
        return (int)181L;
    }
    /** (int)181L */
    public static final int SDL_SCANCODE_CURRENCYSUBUNIT = SDL_SCANCODE_CURRENCYSUBUNIT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_LEFTPAREN = 182;
     * }
     */
    public static int SDL_SCANCODE_KP_LEFTPAREN() {
        return (int)182L;
    }
    /** (int)182L */
    public static final int SDL_SCANCODE_KP_LEFTPAREN = SDL_SCANCODE_KP_LEFTPAREN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_RIGHTPAREN = 183;
     * }
     */
    public static int SDL_SCANCODE_KP_RIGHTPAREN() {
        return (int)183L;
    }
    /** (int)183L */
    public static final int SDL_SCANCODE_KP_RIGHTPAREN = SDL_SCANCODE_KP_RIGHTPAREN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_LEFTBRACE = 184;
     * }
     */
    public static int SDL_SCANCODE_KP_LEFTBRACE() {
        return (int)184L;
    }
    /** (int)184L */
    public static final int SDL_SCANCODE_KP_LEFTBRACE = SDL_SCANCODE_KP_LEFTBRACE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_RIGHTBRACE = 185;
     * }
     */
    public static int SDL_SCANCODE_KP_RIGHTBRACE() {
        return (int)185L;
    }
    /** (int)185L */
    public static final int SDL_SCANCODE_KP_RIGHTBRACE = SDL_SCANCODE_KP_RIGHTBRACE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_TAB = 186;
     * }
     */
    public static int SDL_SCANCODE_KP_TAB() {
        return (int)186L;
    }
    /** (int)186L */
    public static final int SDL_SCANCODE_KP_TAB = SDL_SCANCODE_KP_TAB();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_BACKSPACE = 187;
     * }
     */
    public static int SDL_SCANCODE_KP_BACKSPACE() {
        return (int)187L;
    }
    /** (int)187L */
    public static final int SDL_SCANCODE_KP_BACKSPACE = SDL_SCANCODE_KP_BACKSPACE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_A = 188;
     * }
     */
    public static int SDL_SCANCODE_KP_A() {
        return (int)188L;
    }
    /** (int)188L */
    public static final int SDL_SCANCODE_KP_A = SDL_SCANCODE_KP_A();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_B = 189;
     * }
     */
    public static int SDL_SCANCODE_KP_B() {
        return (int)189L;
    }
    /** (int)189L */
    public static final int SDL_SCANCODE_KP_B = SDL_SCANCODE_KP_B();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_C = 190;
     * }
     */
    public static int SDL_SCANCODE_KP_C() {
        return (int)190L;
    }
    /** (int)190L */
    public static final int SDL_SCANCODE_KP_C = SDL_SCANCODE_KP_C();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_D = 191;
     * }
     */
    public static int SDL_SCANCODE_KP_D() {
        return (int)191L;
    }
    /** (int)191L */
    public static final int SDL_SCANCODE_KP_D = SDL_SCANCODE_KP_D();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_E = 192;
     * }
     */
    public static int SDL_SCANCODE_KP_E() {
        return (int)192L;
    }
    /** (int)192L */
    public static final int SDL_SCANCODE_KP_E = SDL_SCANCODE_KP_E();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_F = 193;
     * }
     */
    public static int SDL_SCANCODE_KP_F() {
        return (int)193L;
    }
    /** (int)193L */
    public static final int SDL_SCANCODE_KP_F = SDL_SCANCODE_KP_F();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_XOR = 194;
     * }
     */
    public static int SDL_SCANCODE_KP_XOR() {
        return (int)194L;
    }
    /** (int)194L */
    public static final int SDL_SCANCODE_KP_XOR = SDL_SCANCODE_KP_XOR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_POWER = 195;
     * }
     */
    public static int SDL_SCANCODE_KP_POWER() {
        return (int)195L;
    }
    /** (int)195L */
    public static final int SDL_SCANCODE_KP_POWER = SDL_SCANCODE_KP_POWER();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_PERCENT = 196;
     * }
     */
    public static int SDL_SCANCODE_KP_PERCENT() {
        return (int)196L;
    }
    /** (int)196L */
    public static final int SDL_SCANCODE_KP_PERCENT = SDL_SCANCODE_KP_PERCENT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_LESS = 197;
     * }
     */
    public static int SDL_SCANCODE_KP_LESS() {
        return (int)197L;
    }
    /** (int)197L */
    public static final int SDL_SCANCODE_KP_LESS = SDL_SCANCODE_KP_LESS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_GREATER = 198;
     * }
     */
    public static int SDL_SCANCODE_KP_GREATER() {
        return (int)198L;
    }
    /** (int)198L */
    public static final int SDL_SCANCODE_KP_GREATER = SDL_SCANCODE_KP_GREATER();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_AMPERSAND = 199;
     * }
     */
    public static int SDL_SCANCODE_KP_AMPERSAND() {
        return (int)199L;
    }
    /** (int)199L */
    public static final int SDL_SCANCODE_KP_AMPERSAND = SDL_SCANCODE_KP_AMPERSAND();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_DBLAMPERSAND = 200;
     * }
     */
    public static int SDL_SCANCODE_KP_DBLAMPERSAND() {
        return (int)200L;
    }
    /** (int)200L */
    public static final int SDL_SCANCODE_KP_DBLAMPERSAND = SDL_SCANCODE_KP_DBLAMPERSAND();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_VERTICALBAR = 201;
     * }
     */
    public static int SDL_SCANCODE_KP_VERTICALBAR() {
        return (int)201L;
    }
    /** (int)201L */
    public static final int SDL_SCANCODE_KP_VERTICALBAR = SDL_SCANCODE_KP_VERTICALBAR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
     * }
     */
    public static int SDL_SCANCODE_KP_DBLVERTICALBAR() {
        return (int)202L;
    }
    /** (int)202L */
    public static final int SDL_SCANCODE_KP_DBLVERTICALBAR = SDL_SCANCODE_KP_DBLVERTICALBAR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_COLON = 203;
     * }
     */
    public static int SDL_SCANCODE_KP_COLON() {
        return (int)203L;
    }
    /** (int)203L */
    public static final int SDL_SCANCODE_KP_COLON = SDL_SCANCODE_KP_COLON();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_HASH = 204;
     * }
     */
    public static int SDL_SCANCODE_KP_HASH() {
        return (int)204L;
    }
    /** (int)204L */
    public static final int SDL_SCANCODE_KP_HASH = SDL_SCANCODE_KP_HASH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_SPACE = 205;
     * }
     */
    public static int SDL_SCANCODE_KP_SPACE() {
        return (int)205L;
    }
    /** (int)205L */
    public static final int SDL_SCANCODE_KP_SPACE = SDL_SCANCODE_KP_SPACE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_AT = 206;
     * }
     */
    public static int SDL_SCANCODE_KP_AT() {
        return (int)206L;
    }
    /** (int)206L */
    public static final int SDL_SCANCODE_KP_AT = SDL_SCANCODE_KP_AT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_EXCLAM = 207;
     * }
     */
    public static int SDL_SCANCODE_KP_EXCLAM() {
        return (int)207L;
    }
    /** (int)207L */
    public static final int SDL_SCANCODE_KP_EXCLAM = SDL_SCANCODE_KP_EXCLAM();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MEMSTORE = 208;
     * }
     */
    public static int SDL_SCANCODE_KP_MEMSTORE() {
        return (int)208L;
    }
    /** (int)208L */
    public static final int SDL_SCANCODE_KP_MEMSTORE = SDL_SCANCODE_KP_MEMSTORE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MEMRECALL = 209;
     * }
     */
    public static int SDL_SCANCODE_KP_MEMRECALL() {
        return (int)209L;
    }
    /** (int)209L */
    public static final int SDL_SCANCODE_KP_MEMRECALL = SDL_SCANCODE_KP_MEMRECALL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MEMCLEAR = 210;
     * }
     */
    public static int SDL_SCANCODE_KP_MEMCLEAR() {
        return (int)210L;
    }
    /** (int)210L */
    public static final int SDL_SCANCODE_KP_MEMCLEAR = SDL_SCANCODE_KP_MEMCLEAR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MEMADD = 211;
     * }
     */
    public static int SDL_SCANCODE_KP_MEMADD() {
        return (int)211L;
    }
    /** (int)211L */
    public static final int SDL_SCANCODE_KP_MEMADD = SDL_SCANCODE_KP_MEMADD();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MEMSUBTRACT = 212;
     * }
     */
    public static int SDL_SCANCODE_KP_MEMSUBTRACT() {
        return (int)212L;
    }
    /** (int)212L */
    public static final int SDL_SCANCODE_KP_MEMSUBTRACT = SDL_SCANCODE_KP_MEMSUBTRACT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MEMMULTIPLY = 213;
     * }
     */
    public static int SDL_SCANCODE_KP_MEMMULTIPLY() {
        return (int)213L;
    }
    /** (int)213L */
    public static final int SDL_SCANCODE_KP_MEMMULTIPLY = SDL_SCANCODE_KP_MEMMULTIPLY();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_MEMDIVIDE = 214;
     * }
     */
    public static int SDL_SCANCODE_KP_MEMDIVIDE() {
        return (int)214L;
    }
    /** (int)214L */
    public static final int SDL_SCANCODE_KP_MEMDIVIDE = SDL_SCANCODE_KP_MEMDIVIDE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_PLUSMINUS = 215;
     * }
     */
    public static int SDL_SCANCODE_KP_PLUSMINUS() {
        return (int)215L;
    }
    /** (int)215L */
    public static final int SDL_SCANCODE_KP_PLUSMINUS = SDL_SCANCODE_KP_PLUSMINUS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_CLEAR = 216;
     * }
     */
    public static int SDL_SCANCODE_KP_CLEAR() {
        return (int)216L;
    }
    /** (int)216L */
    public static final int SDL_SCANCODE_KP_CLEAR = SDL_SCANCODE_KP_CLEAR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_CLEARENTRY = 217;
     * }
     */
    public static int SDL_SCANCODE_KP_CLEARENTRY() {
        return (int)217L;
    }
    /** (int)217L */
    public static final int SDL_SCANCODE_KP_CLEARENTRY = SDL_SCANCODE_KP_CLEARENTRY();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_BINARY = 218;
     * }
     */
    public static int SDL_SCANCODE_KP_BINARY() {
        return (int)218L;
    }
    /** (int)218L */
    public static final int SDL_SCANCODE_KP_BINARY = SDL_SCANCODE_KP_BINARY();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_OCTAL = 219;
     * }
     */
    public static int SDL_SCANCODE_KP_OCTAL() {
        return (int)219L;
    }
    /** (int)219L */
    public static final int SDL_SCANCODE_KP_OCTAL = SDL_SCANCODE_KP_OCTAL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_DECIMAL = 220;
     * }
     */
    public static int SDL_SCANCODE_KP_DECIMAL() {
        return (int)220L;
    }
    /** (int)220L */
    public static final int SDL_SCANCODE_KP_DECIMAL = SDL_SCANCODE_KP_DECIMAL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KP_HEXADECIMAL = 221;
     * }
     */
    public static int SDL_SCANCODE_KP_HEXADECIMAL() {
        return (int)221L;
    }
    /** (int)221L */
    public static final int SDL_SCANCODE_KP_HEXADECIMAL = SDL_SCANCODE_KP_HEXADECIMAL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LCTRL = 224;
     * }
     */
    public static int SDL_SCANCODE_LCTRL() {
        return (int)224L;
    }
    /** (int)224L */
    public static final int SDL_SCANCODE_LCTRL = SDL_SCANCODE_LCTRL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LSHIFT = 225;
     * }
     */
    public static int SDL_SCANCODE_LSHIFT() {
        return (int)225L;
    }
    /** (int)225L */
    public static final int SDL_SCANCODE_LSHIFT = SDL_SCANCODE_LSHIFT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LALT = 226;
     * }
     */
    public static int SDL_SCANCODE_LALT() {
        return (int)226L;
    }
    /** (int)226L */
    public static final int SDL_SCANCODE_LALT = SDL_SCANCODE_LALT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_LGUI = 227;
     * }
     */
    public static int SDL_SCANCODE_LGUI() {
        return (int)227L;
    }
    /** (int)227L */
    public static final int SDL_SCANCODE_LGUI = SDL_SCANCODE_LGUI();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RCTRL = 228;
     * }
     */
    public static int SDL_SCANCODE_RCTRL() {
        return (int)228L;
    }
    /** (int)228L */
    public static final int SDL_SCANCODE_RCTRL = SDL_SCANCODE_RCTRL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RSHIFT = 229;
     * }
     */
    public static int SDL_SCANCODE_RSHIFT() {
        return (int)229L;
    }
    /** (int)229L */
    public static final int SDL_SCANCODE_RSHIFT = SDL_SCANCODE_RSHIFT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RALT = 230;
     * }
     */
    public static int SDL_SCANCODE_RALT() {
        return (int)230L;
    }
    /** (int)230L */
    public static final int SDL_SCANCODE_RALT = SDL_SCANCODE_RALT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_RGUI = 231;
     * }
     */
    public static int SDL_SCANCODE_RGUI() {
        return (int)231L;
    }
    /** (int)231L */
    public static final int SDL_SCANCODE_RGUI = SDL_SCANCODE_RGUI();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_MODE = 257;
     * }
     */
    public static int SDL_SCANCODE_MODE() {
        return (int)257L;
    }
    /** (int)257L */
    public static final int SDL_SCANCODE_MODE = SDL_SCANCODE_MODE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AUDIONEXT = 258;
     * }
     */
    public static int SDL_SCANCODE_AUDIONEXT() {
        return (int)258L;
    }
    /** (int)258L */
    public static final int SDL_SCANCODE_AUDIONEXT = SDL_SCANCODE_AUDIONEXT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AUDIOPREV = 259;
     * }
     */
    public static int SDL_SCANCODE_AUDIOPREV() {
        return (int)259L;
    }
    /** (int)259L */
    public static final int SDL_SCANCODE_AUDIOPREV = SDL_SCANCODE_AUDIOPREV();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AUDIOSTOP = 260;
     * }
     */
    public static int SDL_SCANCODE_AUDIOSTOP() {
        return (int)260L;
    }
    /** (int)260L */
    public static final int SDL_SCANCODE_AUDIOSTOP = SDL_SCANCODE_AUDIOSTOP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AUDIOPLAY = 261;
     * }
     */
    public static int SDL_SCANCODE_AUDIOPLAY() {
        return (int)261L;
    }
    /** (int)261L */
    public static final int SDL_SCANCODE_AUDIOPLAY = SDL_SCANCODE_AUDIOPLAY();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AUDIOMUTE = 262;
     * }
     */
    public static int SDL_SCANCODE_AUDIOMUTE() {
        return (int)262L;
    }
    /** (int)262L */
    public static final int SDL_SCANCODE_AUDIOMUTE = SDL_SCANCODE_AUDIOMUTE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_MEDIASELECT = 263;
     * }
     */
    public static int SDL_SCANCODE_MEDIASELECT() {
        return (int)263L;
    }
    /** (int)263L */
    public static final int SDL_SCANCODE_MEDIASELECT = SDL_SCANCODE_MEDIASELECT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_WWW = 264;
     * }
     */
    public static int SDL_SCANCODE_WWW() {
        return (int)264L;
    }
    /** (int)264L */
    public static final int SDL_SCANCODE_WWW = SDL_SCANCODE_WWW();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_MAIL = 265;
     * }
     */
    public static int SDL_SCANCODE_MAIL() {
        return (int)265L;
    }
    /** (int)265L */
    public static final int SDL_SCANCODE_MAIL = SDL_SCANCODE_MAIL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CALCULATOR = 266;
     * }
     */
    public static int SDL_SCANCODE_CALCULATOR() {
        return (int)266L;
    }
    /** (int)266L */
    public static final int SDL_SCANCODE_CALCULATOR = SDL_SCANCODE_CALCULATOR();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_COMPUTER = 267;
     * }
     */
    public static int SDL_SCANCODE_COMPUTER() {
        return (int)267L;
    }
    /** (int)267L */
    public static final int SDL_SCANCODE_COMPUTER = SDL_SCANCODE_COMPUTER();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AC_SEARCH = 268;
     * }
     */
    public static int SDL_SCANCODE_AC_SEARCH() {
        return (int)268L;
    }
    /** (int)268L */
    public static final int SDL_SCANCODE_AC_SEARCH = SDL_SCANCODE_AC_SEARCH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AC_HOME = 269;
     * }
     */
    public static int SDL_SCANCODE_AC_HOME() {
        return (int)269L;
    }
    /** (int)269L */
    public static final int SDL_SCANCODE_AC_HOME = SDL_SCANCODE_AC_HOME();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AC_BACK = 270;
     * }
     */
    public static int SDL_SCANCODE_AC_BACK() {
        return (int)270L;
    }
    /** (int)270L */
    public static final int SDL_SCANCODE_AC_BACK = SDL_SCANCODE_AC_BACK();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AC_FORWARD = 271;
     * }
     */
    public static int SDL_SCANCODE_AC_FORWARD() {
        return (int)271L;
    }
    /** (int)271L */
    public static final int SDL_SCANCODE_AC_FORWARD = SDL_SCANCODE_AC_FORWARD();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AC_STOP = 272;
     * }
     */
    public static int SDL_SCANCODE_AC_STOP() {
        return (int)272L;
    }
    /** (int)272L */
    public static final int SDL_SCANCODE_AC_STOP = SDL_SCANCODE_AC_STOP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AC_REFRESH = 273;
     * }
     */
    public static int SDL_SCANCODE_AC_REFRESH() {
        return (int)273L;
    }
    /** (int)273L */
    public static final int SDL_SCANCODE_AC_REFRESH = SDL_SCANCODE_AC_REFRESH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AC_BOOKMARKS = 274;
     * }
     */
    public static int SDL_SCANCODE_AC_BOOKMARKS() {
        return (int)274L;
    }
    /** (int)274L */
    public static final int SDL_SCANCODE_AC_BOOKMARKS = SDL_SCANCODE_AC_BOOKMARKS();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_BRIGHTNESSDOWN = 275;
     * }
     */
    public static int SDL_SCANCODE_BRIGHTNESSDOWN() {
        return (int)275L;
    }
    /** (int)275L */
    public static final int SDL_SCANCODE_BRIGHTNESSDOWN = SDL_SCANCODE_BRIGHTNESSDOWN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_BRIGHTNESSUP = 276;
     * }
     */
    public static int SDL_SCANCODE_BRIGHTNESSUP() {
        return (int)276L;
    }
    /** (int)276L */
    public static final int SDL_SCANCODE_BRIGHTNESSUP = SDL_SCANCODE_BRIGHTNESSUP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_DISPLAYSWITCH = 277;
     * }
     */
    public static int SDL_SCANCODE_DISPLAYSWITCH() {
        return (int)277L;
    }
    /** (int)277L */
    public static final int SDL_SCANCODE_DISPLAYSWITCH = SDL_SCANCODE_DISPLAYSWITCH();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KBDILLUMTOGGLE = 278;
     * }
     */
    public static int SDL_SCANCODE_KBDILLUMTOGGLE() {
        return (int)278L;
    }
    /** (int)278L */
    public static final int SDL_SCANCODE_KBDILLUMTOGGLE = SDL_SCANCODE_KBDILLUMTOGGLE();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KBDILLUMDOWN = 279;
     * }
     */
    public static int SDL_SCANCODE_KBDILLUMDOWN() {
        return (int)279L;
    }
    /** (int)279L */
    public static final int SDL_SCANCODE_KBDILLUMDOWN = SDL_SCANCODE_KBDILLUMDOWN();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_KBDILLUMUP = 280;
     * }
     */
    public static int SDL_SCANCODE_KBDILLUMUP() {
        return (int)280L;
    }
    /** (int)280L */
    public static final int SDL_SCANCODE_KBDILLUMUP = SDL_SCANCODE_KBDILLUMUP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_EJECT = 281;
     * }
     */
    public static int SDL_SCANCODE_EJECT() {
        return (int)281L;
    }
    /** (int)281L */
    public static final int SDL_SCANCODE_EJECT = SDL_SCANCODE_EJECT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SLEEP = 282;
     * }
     */
    public static int SDL_SCANCODE_SLEEP() {
        return (int)282L;
    }
    /** (int)282L */
    public static final int SDL_SCANCODE_SLEEP = SDL_SCANCODE_SLEEP();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_APP1 = 283;
     * }
     */
    public static int SDL_SCANCODE_APP1() {
        return (int)283L;
    }
    /** (int)283L */
    public static final int SDL_SCANCODE_APP1 = SDL_SCANCODE_APP1();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_APP2 = 284;
     * }
     */
    public static int SDL_SCANCODE_APP2() {
        return (int)284L;
    }
    /** (int)284L */
    public static final int SDL_SCANCODE_APP2 = SDL_SCANCODE_APP2();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AUDIOREWIND = 285;
     * }
     */
    public static int SDL_SCANCODE_AUDIOREWIND() {
        return (int)285L;
    }
    /** (int)285L */
    public static final int SDL_SCANCODE_AUDIOREWIND = SDL_SCANCODE_AUDIOREWIND();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_AUDIOFASTFORWARD = 286;
     * }
     */
    public static int SDL_SCANCODE_AUDIOFASTFORWARD() {
        return (int)286L;
    }
    /** (int)286L */
    public static final int SDL_SCANCODE_AUDIOFASTFORWARD = SDL_SCANCODE_AUDIOFASTFORWARD();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SOFTLEFT = 287;
     * }
     */
    public static int SDL_SCANCODE_SOFTLEFT() {
        return (int)287L;
    }
    /** (int)287L */
    public static final int SDL_SCANCODE_SOFTLEFT = SDL_SCANCODE_SOFTLEFT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_SOFTRIGHT = 288;
     * }
     */
    public static int SDL_SCANCODE_SOFTRIGHT() {
        return (int)288L;
    }
    /** (int)288L */
    public static final int SDL_SCANCODE_SOFTRIGHT = SDL_SCANCODE_SOFTRIGHT();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_CALL = 289;
     * }
     */
    public static int SDL_SCANCODE_CALL() {
        return (int)289L;
    }
    /** (int)289L */
    public static final int SDL_SCANCODE_CALL = SDL_SCANCODE_CALL();
    /**
     * {@snippet :
     * enum .SDL_SCANCODE_ENDCALL = 290;
     * }
     */
    public static int SDL_SCANCODE_ENDCALL() {
        return (int)290L;
    }
    /** (int)290L */
    public static final int SDL_SCANCODE_ENDCALL = SDL_SCANCODE_ENDCALL();
    /**
     * {@snippet :
     * enum .SDL_NUM_SCANCODES = 512;
     * }
     */
    public static int SDL_NUM_SCANCODES() {
        return (int)512L;
    }
    /** (int)512L */
    public static final int SDL_NUM_SCANCODES = SDL_NUM_SCANCODES();
    /**
     * {@snippet :
     * typedef int SDL_Keycode;
     * }
     */
    public static final OfInt SDL_Keycode = JAVA_INT;
    /**
     * {@snippet :
     * enum .SDLK_UNKNOWN = 0;
     * }
     */
    public static int SDLK_UNKNOWN() {
        return (int)0L;
    }
    /** (int)0L */
    public static final int SDLK_UNKNOWN = SDLK_UNKNOWN();
    /**
     * {@snippet :
     * enum .SDLK_RETURN = 13;
     * }
     */
    public static int SDLK_RETURN() {
        return (int)13L;
    }
    /** (int)13L */
    public static final int SDLK_RETURN = SDLK_RETURN();
    /**
     * {@snippet :
     * enum .SDLK_ESCAPE = 27;
     * }
     */
    public static int SDLK_ESCAPE() {
        return (int)27L;
    }
    /** (int)27L */
    public static final int SDLK_ESCAPE = SDLK_ESCAPE();
    /**
     * {@snippet :
     * enum .SDLK_BACKSPACE = 8;
     * }
     */
    public static int SDLK_BACKSPACE() {
        return (int)8L;
    }
    /** (int)8L */
    public static final int SDLK_BACKSPACE = SDLK_BACKSPACE();
    /**
     * {@snippet :
     * enum .SDLK_TAB = 9;
     * }
     */
    public static int SDLK_TAB() {
        return (int)9L;
    }
    /** (int)9L */
    public static final int SDLK_TAB = SDLK_TAB();
    /**
     * {@snippet :
     * enum .SDLK_SPACE = 32;
     * }
     */
    public static int SDLK_SPACE() {
        return (int)32L;
    }
    /** (int)32L */
    public static final int SDLK_SPACE = SDLK_SPACE();
    /**
     * {@snippet :
     * enum .SDLK_EXCLAIM = 33;
     * }
     */
    public static int SDLK_EXCLAIM() {
        return (int)33L;
    }
    /** (int)33L */
    public static final int SDLK_EXCLAIM = SDLK_EXCLAIM();
    /**
     * {@snippet :
     * enum .SDLK_QUOTEDBL = 34;
     * }
     */
    public static int SDLK_QUOTEDBL() {
        return (int)34L;
    }
    /** (int)34L */
    public static final int SDLK_QUOTEDBL = SDLK_QUOTEDBL();
    /**
     * {@snippet :
     * enum .SDLK_HASH = 35;
     * }
     */
    public static int SDLK_HASH() {
        return (int)35L;
    }
    /** (int)35L */
    public static final int SDLK_HASH = SDLK_HASH();
    /**
     * {@snippet :
     * enum .SDLK_PERCENT = 37;
     * }
     */
    public static int SDLK_PERCENT() {
        return (int)37L;
    }
    /** (int)37L */
    public static final int SDLK_PERCENT = SDLK_PERCENT();
    /**
     * {@snippet :
     * enum .SDLK_DOLLAR = 36;
     * }
     */
    public static int SDLK_DOLLAR() {
        return (int)36L;
    }
    /** (int)36L */
    public static final int SDLK_DOLLAR = SDLK_DOLLAR();
    /**
     * {@snippet :
     * enum .SDLK_AMPERSAND = 38;
     * }
     */
    public static int SDLK_AMPERSAND() {
        return (int)38L;
    }
    /** (int)38L */
    public static final int SDLK_AMPERSAND = SDLK_AMPERSAND();
    /**
     * {@snippet :
     * enum .SDLK_QUOTE = 39;
     * }
     */
    public static int SDLK_QUOTE() {
        return (int)39L;
    }
    /** (int)39L */
    public static final int SDLK_QUOTE = SDLK_QUOTE();
    /**
     * {@snippet :
     * enum .SDLK_LEFTPAREN = 40;
     * }
     */
    public static int SDLK_LEFTPAREN() {
        return (int)40L;
    }
    /** (int)40L */
    public static final int SDLK_LEFTPAREN = SDLK_LEFTPAREN();
    /**
     * {@snippet :
     * enum .SDLK_RIGHTPAREN = 41;
     * }
     */
    public static int SDLK_RIGHTPAREN() {
        return (int)41L;
    }
    /** (int)41L */
    public static final int SDLK_RIGHTPAREN = SDLK_RIGHTPAREN();
    /**
     * {@snippet :
     * enum .SDLK_ASTERISK = 42;
     * }
     */
    public static int SDLK_ASTERISK() {
        return (int)42L;
    }
    /** (int)42L */
    public static final int SDLK_ASTERISK = SDLK_ASTERISK();
    /**
     * {@snippet :
     * enum .SDLK_PLUS = 43;
     * }
     */
    public static int SDLK_PLUS() {
        return (int)43L;
    }
    /** (int)43L */
    public static final int SDLK_PLUS = SDLK_PLUS();
    /**
     * {@snippet :
     * enum .SDLK_COMMA = 44;
     * }
     */
    public static int SDLK_COMMA() {
        return (int)44L;
    }
    /** (int)44L */
    public static final int SDLK_COMMA = SDLK_COMMA();
    /**
     * {@snippet :
     * enum .SDLK_MINUS = 45;
     * }
     */
    public static int SDLK_MINUS() {
        return (int)45L;
    }
    /** (int)45L */
    public static final int SDLK_MINUS = SDLK_MINUS();
    /**
     * {@snippet :
     * enum .SDLK_PERIOD = 46;
     * }
     */
    public static int SDLK_PERIOD() {
        return (int)46L;
    }
    /** (int)46L */
    public static final int SDLK_PERIOD = SDLK_PERIOD();
    /**
     * {@snippet :
     * enum .SDLK_SLASH = 47;
     * }
     */
    public static int SDLK_SLASH() {
        return (int)47L;
    }
    /** (int)47L */
    public static final int SDLK_SLASH = SDLK_SLASH();
    /**
     * {@snippet :
     * enum .SDLK_0 = 48;
     * }
     */
    public static int SDLK_0() {
        return (int)48L;
    }
    /** (int)48L */
    public static final int SDLK_0 = SDLK_0();
    /**
     * {@snippet :
     * enum .SDLK_1 = 49;
     * }
     */
    public static int SDLK_1() {
        return (int)49L;
    }
    /** (int)49L */
    public static final int SDLK_1 = SDLK_1();
    /**
     * {@snippet :
     * enum .SDLK_2 = 50;
     * }
     */
    public static int SDLK_2() {
        return (int)50L;
    }
    /** (int)50L */
    public static final int SDLK_2 = SDLK_2();
    /**
     * {@snippet :
     * enum .SDLK_3 = 51;
     * }
     */
    public static int SDLK_3() {
        return (int)51L;
    }
    /** (int)51L */
    public static final int SDLK_3 = SDLK_3();
    /**
     * {@snippet :
     * enum .SDLK_4 = 52;
     * }
     */
    public static int SDLK_4() {
        return (int)52L;
    }
    /** (int)52L */
    public static final int SDLK_4 = SDLK_4();
    /**
     * {@snippet :
     * enum .SDLK_5 = 53;
     * }
     */
    public static int SDLK_5() {
        return (int)53L;
    }
    /** (int)53L */
    public static final int SDLK_5 = SDLK_5();
    /**
     * {@snippet :
     * enum .SDLK_6 = 54;
     * }
     */
    public static int SDLK_6() {
        return (int)54L;
    }
    /** (int)54L */
    public static final int SDLK_6 = SDLK_6();
    /**
     * {@snippet :
     * enum .SDLK_7 = 55;
     * }
     */
    public static int SDLK_7() {
        return (int)55L;
    }
    /** (int)55L */
    public static final int SDLK_7 = SDLK_7();
    /**
     * {@snippet :
     * enum .SDLK_8 = 56;
     * }
     */
    public static int SDLK_8() {
        return (int)56L;
    }
    /** (int)56L */
    public static final int SDLK_8 = SDLK_8();
    /**
     * {@snippet :
     * enum .SDLK_9 = 57;
     * }
     */
    public static int SDLK_9() {
        return (int)57L;
    }
    /** (int)57L */
    public static final int SDLK_9 = SDLK_9();
    /**
     * {@snippet :
     * enum .SDLK_COLON = 58;
     * }
     */
    public static int SDLK_COLON() {
        return (int)58L;
    }
    /** (int)58L */
    public static final int SDLK_COLON = SDLK_COLON();
    /**
     * {@snippet :
     * enum .SDLK_SEMICOLON = 59;
     * }
     */
    public static int SDLK_SEMICOLON() {
        return (int)59L;
    }
    /** (int)59L */
    public static final int SDLK_SEMICOLON = SDLK_SEMICOLON();
    /**
     * {@snippet :
     * enum .SDLK_LESS = 60;
     * }
     */
    public static int SDLK_LESS() {
        return (int)60L;
    }
    /** (int)60L */
    public static final int SDLK_LESS = SDLK_LESS();
    /**
     * {@snippet :
     * enum .SDLK_EQUALS = 61;
     * }
     */
    public static int SDLK_EQUALS() {
        return (int)61L;
    }
    /** (int)61L */
    public static final int SDLK_EQUALS = SDLK_EQUALS();
    /**
     * {@snippet :
     * enum .SDLK_GREATER = 62;
     * }
     */
    public static int SDLK_GREATER() {
        return (int)62L;
    }
    /** (int)62L */
    public static final int SDLK_GREATER = SDLK_GREATER();
    /**
     * {@snippet :
     * enum .SDLK_QUESTION = 63;
     * }
     */
    public static int SDLK_QUESTION() {
        return (int)63L;
    }
    /** (int)63L */
    public static final int SDLK_QUESTION = SDLK_QUESTION();
    /**
     * {@snippet :
     * enum .SDLK_AT = 64;
     * }
     */
    public static int SDLK_AT() {
        return (int)64L;
    }
    /** (int)64L */
    public static final int SDLK_AT = SDLK_AT();
    /**
     * {@snippet :
     * enum .SDLK_LEFTBRACKET = 91;
     * }
     */
    public static int SDLK_LEFTBRACKET() {
        return (int)91L;
    }
    /** (int)91L */
    public static final int SDLK_LEFTBRACKET = SDLK_LEFTBRACKET();
    /**
     * {@snippet :
     * enum .SDLK_BACKSLASH = 92;
     * }
     */
    public static int SDLK_BACKSLASH() {
        return (int)92L;
    }
    /** (int)92L */
    public static final int SDLK_BACKSLASH = SDLK_BACKSLASH();
    /**
     * {@snippet :
     * enum .SDLK_RIGHTBRACKET = 93;
     * }
     */
    public static int SDLK_RIGHTBRACKET() {
        return (int)93L;
    }
    /** (int)93L */
    public static final int SDLK_RIGHTBRACKET = SDLK_RIGHTBRACKET();
    /**
     * {@snippet :
     * enum .SDLK_CARET = 94;
     * }
     */
    public static int SDLK_CARET() {
        return (int)94L;
    }
    /** (int)94L */
    public static final int SDLK_CARET = SDLK_CARET();
    /**
     * {@snippet :
     * enum .SDLK_UNDERSCORE = 95;
     * }
     */
    public static int SDLK_UNDERSCORE() {
        return (int)95L;
    }
    /** (int)95L */
    public static final int SDLK_UNDERSCORE = SDLK_UNDERSCORE();
    /**
     * {@snippet :
     * enum .SDLK_BACKQUOTE = 96;
     * }
     */
    public static int SDLK_BACKQUOTE() {
        return (int)96L;
    }
    /** (int)96L */
    public static final int SDLK_BACKQUOTE = SDLK_BACKQUOTE();
    /**
     * {@snippet :
     * enum .SDLK_a = 97;
     * }
     */
    public static int SDLK_a() {
        return (int)97L;
    }
    /** (int)97L */
    public static final int SDLK_a = SDLK_a();
    /**
     * {@snippet :
     * enum .SDLK_b = 98;
     * }
     */
    public static int SDLK_b() {
        return (int)98L;
    }
    /** (int)98L */
    public static final int SDLK_b = SDLK_b();
    /**
     * {@snippet :
     * enum .SDLK_c = 99;
     * }
     */
    public static int SDLK_c() {
        return (int)99L;
    }
    /** (int)99L */
    public static final int SDLK_c = SDLK_c();
    /**
     * {@snippet :
     * enum .SDLK_d = 100;
     * }
     */
    public static int SDLK_d() {
        return (int)100L;
    }
    /** (int)100L */
    public static final int SDLK_d = SDLK_d();
    /**
     * {@snippet :
     * enum .SDLK_e = 101;
     * }
     */
    public static int SDLK_e() {
        return (int)101L;
    }
    /** (int)101L */
    public static final int SDLK_e = SDLK_e();
    /**
     * {@snippet :
     * enum .SDLK_f = 102;
     * }
     */
    public static int SDLK_f() {
        return (int)102L;
    }
    /** (int)102L */
    public static final int SDLK_f = SDLK_f();
    /**
     * {@snippet :
     * enum .SDLK_g = 103;
     * }
     */
    public static int SDLK_g() {
        return (int)103L;
    }
    /** (int)103L */
    public static final int SDLK_g = SDLK_g();
    /**
     * {@snippet :
     * enum .SDLK_h = 104;
     * }
     */
    public static int SDLK_h() {
        return (int)104L;
    }
    /** (int)104L */
    public static final int SDLK_h = SDLK_h();
    /**
     * {@snippet :
     * enum .SDLK_i = 105;
     * }
     */
    public static int SDLK_i() {
        return (int)105L;
    }
    /** (int)105L */
    public static final int SDLK_i = SDLK_i();
    /**
     * {@snippet :
     * enum .SDLK_j = 106;
     * }
     */
    public static int SDLK_j() {
        return (int)106L;
    }
    /** (int)106L */
    public static final int SDLK_j = SDLK_j();
    /**
     * {@snippet :
     * enum .SDLK_k = 107;
     * }
     */
    public static int SDLK_k() {
        return (int)107L;
    }
    /** (int)107L */
    public static final int SDLK_k = SDLK_k();
    /**
     * {@snippet :
     * enum .SDLK_l = 108;
     * }
     */
    public static int SDLK_l() {
        return (int)108L;
    }
    /** (int)108L */
    public static final int SDLK_l = SDLK_l();
    /**
     * {@snippet :
     * enum .SDLK_m = 109;
     * }
     */
    public static int SDLK_m() {
        return (int)109L;
    }
    /** (int)109L */
    public static final int SDLK_m = SDLK_m();
    /**
     * {@snippet :
     * enum .SDLK_n = 110;
     * }
     */
    public static int SDLK_n() {
        return (int)110L;
    }
    /** (int)110L */
    public static final int SDLK_n = SDLK_n();
    /**
     * {@snippet :
     * enum .SDLK_o = 111;
     * }
     */
    public static int SDLK_o() {
        return (int)111L;
    }
    /** (int)111L */
    public static final int SDLK_o = SDLK_o();
    /**
     * {@snippet :
     * enum .SDLK_p = 112;
     * }
     */
    public static int SDLK_p() {
        return (int)112L;
    }
    /** (int)112L */
    public static final int SDLK_p = SDLK_p();
    /**
     * {@snippet :
     * enum .SDLK_q = 113;
     * }
     */
    public static int SDLK_q() {
        return (int)113L;
    }
    /** (int)113L */
    public static final int SDLK_q = SDLK_q();
    /**
     * {@snippet :
     * enum .SDLK_r = 114;
     * }
     */
    public static int SDLK_r() {
        return (int)114L;
    }
    /** (int)114L */
    public static final int SDLK_r = SDLK_r();
    /**
     * {@snippet :
     * enum .SDLK_s = 115;
     * }
     */
    public static int SDLK_s() {
        return (int)115L;
    }
    /** (int)115L */
    public static final int SDLK_s = SDLK_s();
    /**
     * {@snippet :
     * enum .SDLK_t = 116;
     * }
     */
    public static int SDLK_t() {
        return (int)116L;
    }
    /** (int)116L */
    public static final int SDLK_t = SDLK_t();
    /**
     * {@snippet :
     * enum .SDLK_u = 117;
     * }
     */
    public static int SDLK_u() {
        return (int)117L;
    }
    /** (int)117L */
    public static final int SDLK_u = SDLK_u();
    /**
     * {@snippet :
     * enum .SDLK_v = 118;
     * }
     */
    public static int SDLK_v() {
        return (int)118L;
    }
    /** (int)118L */
    public static final int SDLK_v = SDLK_v();
    /**
     * {@snippet :
     * enum .SDLK_w = 119;
     * }
     */
    public static int SDLK_w() {
        return (int)119L;
    }
    /** (int)119L */
    public static final int SDLK_w = SDLK_w();
    /**
     * {@snippet :
     * enum .SDLK_x = 120;
     * }
     */
    public static int SDLK_x() {
        return (int)120L;
    }
    /** (int)120L */
    public static final int SDLK_x = SDLK_x();
    /**
     * {@snippet :
     * enum .SDLK_y = 121;
     * }
     */
    public static int SDLK_y() {
        return (int)121L;
    }
    /** (int)121L */
    public static final int SDLK_y = SDLK_y();
    /**
     * {@snippet :
     * enum .SDLK_z = 122;
     * }
     */
    public static int SDLK_z() {
        return (int)122L;
    }
    /** (int)122L */
    public static final int SDLK_z = SDLK_z();
    /**
     * {@snippet :
     * enum .SDLK_CAPSLOCK = 1073741881;
     * }
     */
    public static int SDLK_CAPSLOCK() {
        return (int)1073741881L;
    }
    /** (int)1073741881L */
    public static final int SDLK_CAPSLOCK = SDLK_CAPSLOCK();
    /**
     * {@snippet :
     * enum .SDLK_F1 = 1073741882;
     * }
     */
    public static int SDLK_F1() {
        return (int)1073741882L;
    }
    /** (int)1073741882L */
    public static final int SDLK_F1 = SDLK_F1();
    /**
     * {@snippet :
     * enum .SDLK_F2 = 1073741883;
     * }
     */
    public static int SDLK_F2() {
        return (int)1073741883L;
    }
    /** (int)1073741883L */
    public static final int SDLK_F2 = SDLK_F2();
    /**
     * {@snippet :
     * enum .SDLK_F3 = 1073741884;
     * }
     */
    public static int SDLK_F3() {
        return (int)1073741884L;
    }
    /** (int)1073741884L */
    public static final int SDLK_F3 = SDLK_F3();
    /**
     * {@snippet :
     * enum .SDLK_F4 = 1073741885;
     * }
     */
    public static int SDLK_F4() {
        return (int)1073741885L;
    }
    /** (int)1073741885L */
    public static final int SDLK_F4 = SDLK_F4();
    /**
     * {@snippet :
     * enum .SDLK_F5 = 1073741886;
     * }
     */
    public static int SDLK_F5() {
        return (int)1073741886L;
    }
    /** (int)1073741886L */
    public static final int SDLK_F5 = SDLK_F5();
    /**
     * {@snippet :
     * enum .SDLK_F6 = 1073741887;
     * }
     */
    public static int SDLK_F6() {
        return (int)1073741887L;
    }
    /** (int)1073741887L */
    public static final int SDLK_F6 = SDLK_F6();
    /**
     * {@snippet :
     * enum .SDLK_F7 = 1073741888;
     * }
     */
    public static int SDLK_F7() {
        return (int)1073741888L;
    }
    /** (int)1073741888L */
    public static final int SDLK_F7 = SDLK_F7();
    /**
     * {@snippet :
     * enum .SDLK_F8 = 1073741889;
     * }
     */
    public static int SDLK_F8() {
        return (int)1073741889L;
    }
    /** (int)1073741889L */
    public static final int SDLK_F8 = SDLK_F8();
    /**
     * {@snippet :
     * enum .SDLK_F9 = 1073741890;
     * }
     */
    public static int SDLK_F9() {
        return (int)1073741890L;
    }
    /** (int)1073741890L */
    public static final int SDLK_F9 = SDLK_F9();
    /**
     * {@snippet :
     * enum .SDLK_F10 = 1073741891;
     * }
     */
    public static int SDLK_F10() {
        return (int)1073741891L;
    }
    /** (int)1073741891L */
    public static final int SDLK_F10 = SDLK_F10();
    /**
     * {@snippet :
     * enum .SDLK_F11 = 1073741892;
     * }
     */
    public static int SDLK_F11() {
        return (int)1073741892L;
    }
    /** (int)1073741892L */
    public static final int SDLK_F11 = SDLK_F11();
    /**
     * {@snippet :
     * enum .SDLK_F12 = 1073741893;
     * }
     */
    public static int SDLK_F12() {
        return (int)1073741893L;
    }
    /** (int)1073741893L */
    public static final int SDLK_F12 = SDLK_F12();
    /**
     * {@snippet :
     * enum .SDLK_PRINTSCREEN = 1073741894;
     * }
     */
    public static int SDLK_PRINTSCREEN() {
        return (int)1073741894L;
    }
    /** (int)1073741894L */
    public static final int SDLK_PRINTSCREEN = SDLK_PRINTSCREEN();
    /**
     * {@snippet :
     * enum .SDLK_SCROLLLOCK = 1073741895;
     * }
     */
    public static int SDLK_SCROLLLOCK() {
        return (int)1073741895L;
    }
    /** (int)1073741895L */
    public static final int SDLK_SCROLLLOCK = SDLK_SCROLLLOCK();
    /**
     * {@snippet :
     * enum .SDLK_PAUSE = 1073741896;
     * }
     */
    public static int SDLK_PAUSE() {
        return (int)1073741896L;
    }
    /** (int)1073741896L */
    public static final int SDLK_PAUSE = SDLK_PAUSE();
    /**
     * {@snippet :
     * enum .SDLK_INSERT = 1073741897;
     * }
     */
    public static int SDLK_INSERT() {
        return (int)1073741897L;
    }
    /** (int)1073741897L */
    public static final int SDLK_INSERT = SDLK_INSERT();
    /**
     * {@snippet :
     * enum .SDLK_HOME = 1073741898;
     * }
     */
    public static int SDLK_HOME() {
        return (int)1073741898L;
    }
    /** (int)1073741898L */
    public static final int SDLK_HOME = SDLK_HOME();
    /**
     * {@snippet :
     * enum .SDLK_PAGEUP = 1073741899;
     * }
     */
    public static int SDLK_PAGEUP() {
        return (int)1073741899L;
    }
    /** (int)1073741899L */
    public static final int SDLK_PAGEUP = SDLK_PAGEUP();
    /**
     * {@snippet :
     * enum .SDLK_DELETE = 127;
     * }
     */
    public static int SDLK_DELETE() {
        return (int)127L;
    }
    /** (int)127L */
    public static final int SDLK_DELETE = SDLK_DELETE();
    /**
     * {@snippet :
     * enum .SDLK_END = 1073741901;
     * }
     */
    public static int SDLK_END() {
        return (int)1073741901L;
    }
    /** (int)1073741901L */
    public static final int SDLK_END = SDLK_END();
    /**
     * {@snippet :
     * enum .SDLK_PAGEDOWN = 1073741902;
     * }
     */
    public static int SDLK_PAGEDOWN() {
        return (int)1073741902L;
    }
    /** (int)1073741902L */
    public static final int SDLK_PAGEDOWN = SDLK_PAGEDOWN();
    /**
     * {@snippet :
     * enum .SDLK_RIGHT = 1073741903;
     * }
     */
    public static int SDLK_RIGHT() {
        return (int)1073741903L;
    }
    /** (int)1073741903L */
    public static final int SDLK_RIGHT = SDLK_RIGHT();
    /**
     * {@snippet :
     * enum .SDLK_LEFT = 1073741904;
     * }
     */
    public static int SDLK_LEFT() {
        return (int)1073741904L;
    }
    /** (int)1073741904L */
    public static final int SDLK_LEFT = SDLK_LEFT();
    /**
     * {@snippet :
     * enum .SDLK_DOWN = 1073741905;
     * }
     */
    public static int SDLK_DOWN() {
        return (int)1073741905L;
    }
    /** (int)1073741905L */
    public static final int SDLK_DOWN = SDLK_DOWN();
    /**
     * {@snippet :
     * enum .SDLK_UP = 1073741906;
     * }
     */
    public static int SDLK_UP() {
        return (int)1073741906L;
    }
    /** (int)1073741906L */
    public static final int SDLK_UP = SDLK_UP();
    /**
     * {@snippet :
     * enum .SDLK_NUMLOCKCLEAR = 1073741907;
     * }
     */
    public static int SDLK_NUMLOCKCLEAR() {
        return (int)1073741907L;
    }
    /** (int)1073741907L */
    public static final int SDLK_NUMLOCKCLEAR = SDLK_NUMLOCKCLEAR();
    /**
     * {@snippet :
     * enum .SDLK_KP_DIVIDE = 1073741908;
     * }
     */
    public static int SDLK_KP_DIVIDE() {
        return (int)1073741908L;
    }
    /** (int)1073741908L */
    public static final int SDLK_KP_DIVIDE = SDLK_KP_DIVIDE();
    /**
     * {@snippet :
     * enum .SDLK_KP_MULTIPLY = 1073741909;
     * }
     */
    public static int SDLK_KP_MULTIPLY() {
        return (int)1073741909L;
    }
    /** (int)1073741909L */
    public static final int SDLK_KP_MULTIPLY = SDLK_KP_MULTIPLY();
    /**
     * {@snippet :
     * enum .SDLK_KP_MINUS = 1073741910;
     * }
     */
    public static int SDLK_KP_MINUS() {
        return (int)1073741910L;
    }
    /** (int)1073741910L */
    public static final int SDLK_KP_MINUS = SDLK_KP_MINUS();
    /**
     * {@snippet :
     * enum .SDLK_KP_PLUS = 1073741911;
     * }
     */
    public static int SDLK_KP_PLUS() {
        return (int)1073741911L;
    }
    /** (int)1073741911L */
    public static final int SDLK_KP_PLUS = SDLK_KP_PLUS();
    /**
     * {@snippet :
     * enum .SDLK_KP_ENTER = 1073741912;
     * }
     */
    public static int SDLK_KP_ENTER() {
        return (int)1073741912L;
    }
    /** (int)1073741912L */
    public static final int SDLK_KP_ENTER = SDLK_KP_ENTER();
    /**
     * {@snippet :
     * enum .SDLK_KP_1 = 1073741913;
     * }
     */
    public static int SDLK_KP_1() {
        return (int)1073741913L;
    }
    /** (int)1073741913L */
    public static final int SDLK_KP_1 = SDLK_KP_1();
    /**
     * {@snippet :
     * enum .SDLK_KP_2 = 1073741914;
     * }
     */
    public static int SDLK_KP_2() {
        return (int)1073741914L;
    }
    /** (int)1073741914L */
    public static final int SDLK_KP_2 = SDLK_KP_2();
    /**
     * {@snippet :
     * enum .SDLK_KP_3 = 1073741915;
     * }
     */
    public static int SDLK_KP_3() {
        return (int)1073741915L;
    }
    /** (int)1073741915L */
    public static final int SDLK_KP_3 = SDLK_KP_3();
    /**
     * {@snippet :
     * enum .SDLK_KP_4 = 1073741916;
     * }
     */
    public static int SDLK_KP_4() {
        return (int)1073741916L;
    }
    /** (int)1073741916L */
    public static final int SDLK_KP_4 = SDLK_KP_4();
    /**
     * {@snippet :
     * enum .SDLK_KP_5 = 1073741917;
     * }
     */
    public static int SDLK_KP_5() {
        return (int)1073741917L;
    }
    /** (int)1073741917L */
    public static final int SDLK_KP_5 = SDLK_KP_5();
    /**
     * {@snippet :
     * enum .SDLK_KP_6 = 1073741918;
     * }
     */
    public static int SDLK_KP_6() {
        return (int)1073741918L;
    }
    /** (int)1073741918L */
    public static final int SDLK_KP_6 = SDLK_KP_6();
    /**
     * {@snippet :
     * enum .SDLK_KP_7 = 1073741919;
     * }
     */
    public static int SDLK_KP_7() {
        return (int)1073741919L;
    }
    /** (int)1073741919L */
    public static final int SDLK_KP_7 = SDLK_KP_7();
    /**
     * {@snippet :
     * enum .SDLK_KP_8 = 1073741920;
     * }
     */
    public static int SDLK_KP_8() {
        return (int)1073741920L;
    }
    /** (int)1073741920L */
    public static final int SDLK_KP_8 = SDLK_KP_8();
    /**
     * {@snippet :
     * enum .SDLK_KP_9 = 1073741921;
     * }
     */
    public static int SDLK_KP_9() {
        return (int)1073741921L;
    }
    /** (int)1073741921L */
    public static final int SDLK_KP_9 = SDLK_KP_9();
    /**
     * {@snippet :
     * enum .SDLK_KP_0 = 1073741922;
     * }
     */
    public static int SDLK_KP_0() {
        return (int)1073741922L;
    }
    /** (int)1073741922L */
    public static final int SDLK_KP_0 = SDLK_KP_0();
    /**
     * {@snippet :
     * enum .SDLK_KP_PERIOD = 1073741923;
     * }
     */
    public static int SDLK_KP_PERIOD() {
        return (int)1073741923L;
    }
    /** (int)1073741923L */
    public static final int SDLK_KP_PERIOD = SDLK_KP_PERIOD();
    /**
     * {@snippet :
     * enum .SDLK_APPLICATION = 1073741925;
     * }
     */
    public static int SDLK_APPLICATION() {
        return (int)1073741925L;
    }
    /** (int)1073741925L */
    public static final int SDLK_APPLICATION = SDLK_APPLICATION();
    /**
     * {@snippet :
     * enum .SDLK_POWER = 1073741926;
     * }
     */
    public static int SDLK_POWER() {
        return (int)1073741926L;
    }
    /** (int)1073741926L */
    public static final int SDLK_POWER = SDLK_POWER();
    /**
     * {@snippet :
     * enum .SDLK_KP_EQUALS = 1073741927;
     * }
     */
    public static int SDLK_KP_EQUALS() {
        return (int)1073741927L;
    }
    /** (int)1073741927L */
    public static final int SDLK_KP_EQUALS = SDLK_KP_EQUALS();
    /**
     * {@snippet :
     * enum .SDLK_F13 = 1073741928;
     * }
     */
    public static int SDLK_F13() {
        return (int)1073741928L;
    }
    /** (int)1073741928L */
    public static final int SDLK_F13 = SDLK_F13();
    /**
     * {@snippet :
     * enum .SDLK_F14 = 1073741929;
     * }
     */
    public static int SDLK_F14() {
        return (int)1073741929L;
    }
    /** (int)1073741929L */
    public static final int SDLK_F14 = SDLK_F14();
    /**
     * {@snippet :
     * enum .SDLK_F15 = 1073741930;
     * }
     */
    public static int SDLK_F15() {
        return (int)1073741930L;
    }
    /** (int)1073741930L */
    public static final int SDLK_F15 = SDLK_F15();
    /**
     * {@snippet :
     * enum .SDLK_F16 = 1073741931;
     * }
     */
    public static int SDLK_F16() {
        return (int)1073741931L;
    }
    /** (int)1073741931L */
    public static final int SDLK_F16 = SDLK_F16();
    /**
     * {@snippet :
     * enum .SDLK_F17 = 1073741932;
     * }
     */
    public static int SDLK_F17() {
        return (int)1073741932L;
    }
    /** (int)1073741932L */
    public static final int SDLK_F17 = SDLK_F17();
    /**
     * {@snippet :
     * enum .SDLK_F18 = 1073741933;
     * }
     */
    public static int SDLK_F18() {
        return (int)1073741933L;
    }
    /** (int)1073741933L */
    public static final int SDLK_F18 = SDLK_F18();
    /**
     * {@snippet :
     * enum .SDLK_F19 = 1073741934;
     * }
     */
    public static int SDLK_F19() {
        return (int)1073741934L;
    }
    /** (int)1073741934L */
    public static final int SDLK_F19 = SDLK_F19();
    /**
     * {@snippet :
     * enum .SDLK_F20 = 1073741935;
     * }
     */
    public static int SDLK_F20() {
        return (int)1073741935L;
    }
    /** (int)1073741935L */
    public static final int SDLK_F20 = SDLK_F20();
    /**
     * {@snippet :
     * enum .SDLK_F21 = 1073741936;
     * }
     */
    public static int SDLK_F21() {
        return (int)1073741936L;
    }
    /** (int)1073741936L */
    public static final int SDLK_F21 = SDLK_F21();
    /**
     * {@snippet :
     * enum .SDLK_F22 = 1073741937;
     * }
     */
    public static int SDLK_F22() {
        return (int)1073741937L;
    }
    /** (int)1073741937L */
    public static final int SDLK_F22 = SDLK_F22();
    /**
     * {@snippet :
     * enum .SDLK_F23 = 1073741938;
     * }
     */
    public static int SDLK_F23() {
        return (int)1073741938L;
    }
    /** (int)1073741938L */
    public static final int SDLK_F23 = SDLK_F23();
    /**
     * {@snippet :
     * enum .SDLK_F24 = 1073741939;
     * }
     */
    public static int SDLK_F24() {
        return (int)1073741939L;
    }
    /** (int)1073741939L */
    public static final int SDLK_F24 = SDLK_F24();
    /**
     * {@snippet :
     * enum .SDLK_EXECUTE = 1073741940;
     * }
     */
    public static int SDLK_EXECUTE() {
        return (int)1073741940L;
    }
    /** (int)1073741940L */
    public static final int SDLK_EXECUTE = SDLK_EXECUTE();
}


