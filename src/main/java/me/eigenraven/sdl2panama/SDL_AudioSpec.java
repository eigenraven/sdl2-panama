// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_AudioSpec {
 *     int freq;
 *     SDL_AudioFormat format;
 *     Uint8 channels;
 *     Uint8 silence;
 *     Uint16 samples;
 *     Uint16 padding;
 *     Uint32 size;
 *     SDL_AudioCallback callback;
 *     void* userdata;
 * };
 * }
 */
public class SDL_AudioSpec {

    public static MemoryLayout $LAYOUT() {
        return constants$25.const$0;
    }
    public static VarHandle freq$VH() {
        return constants$25.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int freq;
     * }
     */
    public static int freq$get(MemorySegment seg) {
        return (int)constants$25.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int freq;
     * }
     */
    public static void freq$set(MemorySegment seg, int x) {
        constants$25.const$1.set(seg, x);
    }
    public static int freq$get(MemorySegment seg, long index) {
        return (int)constants$25.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void freq$set(MemorySegment seg, long index, int x) {
        constants$25.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle format$VH() {
        return constants$25.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SDL_AudioFormat format;
     * }
     */
    public static short format$get(MemorySegment seg) {
        return (short)constants$25.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SDL_AudioFormat format;
     * }
     */
    public static void format$set(MemorySegment seg, short x) {
        constants$25.const$2.set(seg, x);
    }
    public static short format$get(MemorySegment seg, long index) {
        return (short)constants$25.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, short x) {
        constants$25.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle channels$VH() {
        return constants$25.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint8 channels;
     * }
     */
    public static byte channels$get(MemorySegment seg) {
        return (byte)constants$25.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint8 channels;
     * }
     */
    public static void channels$set(MemorySegment seg, byte x) {
        constants$25.const$3.set(seg, x);
    }
    public static byte channels$get(MemorySegment seg, long index) {
        return (byte)constants$25.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, byte x) {
        constants$25.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle silence$VH() {
        return constants$25.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint8 silence;
     * }
     */
    public static byte silence$get(MemorySegment seg) {
        return (byte)constants$25.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint8 silence;
     * }
     */
    public static void silence$set(MemorySegment seg, byte x) {
        constants$25.const$4.set(seg, x);
    }
    public static byte silence$get(MemorySegment seg, long index) {
        return (byte)constants$25.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void silence$set(MemorySegment seg, long index, byte x) {
        constants$25.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle samples$VH() {
        return constants$25.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint16 samples;
     * }
     */
    public static short samples$get(MemorySegment seg) {
        return (short)constants$25.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint16 samples;
     * }
     */
    public static void samples$set(MemorySegment seg, short x) {
        constants$25.const$5.set(seg, x);
    }
    public static short samples$get(MemorySegment seg, long index) {
        return (short)constants$25.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void samples$set(MemorySegment seg, long index, short x) {
        constants$25.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle padding$VH() {
        return constants$26.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint16 padding;
     * }
     */
    public static short padding$get(MemorySegment seg) {
        return (short)constants$26.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint16 padding;
     * }
     */
    public static void padding$set(MemorySegment seg, short x) {
        constants$26.const$0.set(seg, x);
    }
    public static short padding$get(MemorySegment seg, long index) {
        return (short)constants$26.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void padding$set(MemorySegment seg, long index, short x) {
        constants$26.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle size$VH() {
        return constants$26.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint32 size;
     * }
     */
    public static int size$get(MemorySegment seg) {
        return (int)constants$26.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint32 size;
     * }
     */
    public static void size$set(MemorySegment seg, int x) {
        constants$26.const$1.set(seg, x);
    }
    public static int size$get(MemorySegment seg, long index) {
        return (int)constants$26.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, int x) {
        constants$26.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle callback$VH() {
        return constants$26.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SDL_AudioCallback callback;
     * }
     */
    public static MemorySegment callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SDL_AudioCallback callback;
     * }
     */
    public static void callback$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$2.set(seg, x);
    }
    public static MemorySegment callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SDL_AudioCallback callback(MemorySegment segment, SegmentScope scope) {
        return SDL_AudioCallback.ofAddress(callback$get(segment), scope);
    }
    public static VarHandle userdata$VH() {
        return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* userdata;
     * }
     */
    public static MemorySegment userdata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* userdata;
     * }
     */
    public static void userdata$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$3.set(seg, x);
    }
    public static MemorySegment userdata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void userdata$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


