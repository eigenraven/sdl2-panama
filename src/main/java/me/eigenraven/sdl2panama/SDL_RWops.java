// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_RWops {
 *     Sint64 (*size)(struct SDL_RWops*);
 *     Sint64 (*seek)(struct SDL_RWops*,Sint64,int);
 *     size_t (*read)(struct SDL_RWops*,void*,size_t,size_t);
 *     size_t (*write)(struct SDL_RWops*,void*,size_t,size_t);
 *     int (*close)(struct SDL_RWops*);
 *     Uint32 type;
 *     union  hidden;
 * };
 * }
 */
public class SDL_RWops {

    public static MemoryLayout $LAYOUT() {
        return constants$14.const$4;
    }
    /**
     * {@snippet :
 * Sint64 (*size)(struct SDL_RWops*);
     * }
     */
    public interface size {

        long apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(size fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$14.const$5, fi, constants$12.const$3, scope);
        }
        static size ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (long)constants$15.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle size$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Sint64 (*size)(struct SDL_RWops*);
     * }
     */
    public static MemorySegment size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Sint64 (*size)(struct SDL_RWops*);
     * }
     */
    public static void size$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$1.set(seg, x);
    }
    public static MemorySegment size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static size size(MemorySegment segment, SegmentScope scope) {
        return size.ofAddress(size$get(segment), scope);
    }
    /**
     * {@snippet :
 * Sint64 (*seek)(struct SDL_RWops*,Sint64,int);
     * }
     */
    public interface seek {

        long apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2);
        static MemorySegment allocate(seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$15.const$3, fi, constants$15.const$2, scope);
        }
        static seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2) -> {
                try {
                    return (long)constants$15.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle seek$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Sint64 (*seek)(struct SDL_RWops*,Sint64,int);
     * }
     */
    public static MemorySegment seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Sint64 (*seek)(struct SDL_RWops*,Sint64,int);
     * }
     */
    public static void seek$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$5.set(seg, x);
    }
    public static MemorySegment seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void seek$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static seek seek(MemorySegment segment, SegmentScope scope) {
        return seek.ofAddress(seek$get(segment), scope);
    }
    /**
     * {@snippet :
 * size_t (*read)(struct SDL_RWops*,void*,size_t,size_t);
     * }
     */
    public interface read {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, long _x3);
        static MemorySegment allocate(read fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$16.const$1, fi, constants$16.const$0, scope);
        }
        static read ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, long __x3) -> {
                try {
                    return (long)constants$16.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read$VH() {
        return constants$16.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t (*read)(struct SDL_RWops*,void*,size_t,size_t);
     * }
     */
    public static MemorySegment read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$16.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t (*read)(struct SDL_RWops*,void*,size_t,size_t);
     * }
     */
    public static void read$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$3.set(seg, x);
    }
    public static MemorySegment read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$16.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void read$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static read read(MemorySegment segment, SegmentScope scope) {
        return read.ofAddress(read$get(segment), scope);
    }
    /**
     * {@snippet :
 * size_t (*write)(struct SDL_RWops*,void*,size_t,size_t);
     * }
     */
    public interface write {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, long _x3);
        static MemorySegment allocate(write fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$16.const$4, fi, constants$16.const$0, scope);
        }
        static write ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, long __x3) -> {
                try {
                    return (long)constants$16.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write$VH() {
        return constants$16.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t (*write)(struct SDL_RWops*,void*,size_t,size_t);
     * }
     */
    public static MemorySegment write$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$16.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t (*write)(struct SDL_RWops*,void*,size_t,size_t);
     * }
     */
    public static void write$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$5.set(seg, x);
    }
    public static MemorySegment write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$16.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void write$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static write write(MemorySegment segment, SegmentScope scope) {
        return write.ofAddress(write$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*close)(struct SDL_RWops*);
     * }
     */
    public interface close {

        int apply(java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(close fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$17.const$0, fi, constants$3.const$5, scope);
        }
        static close ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _data) -> {
                try {
                    return (int)constants$11.const$1.invokeExact(symbol, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close$VH() {
        return constants$17.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*close)(struct SDL_RWops*);
     * }
     */
    public static MemorySegment close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*close)(struct SDL_RWops*);
     * }
     */
    public static void close$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$1.set(seg, x);
    }
    public static MemorySegment close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static close close(MemorySegment segment, SegmentScope scope) {
        return close.ofAddress(close$get(segment), scope);
    }
    public static VarHandle type$VH() {
        return constants$17.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint32 type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$17.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint32 type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$17.const$2.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$17.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$17.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  mem;
     *     struct  unknown;
     * };
     * }
     */
    public static final class hidden {

        // Suppresses default constructor, ensuring non-instantiability.
        private hidden() {}
        public static MemoryLayout $LAYOUT() {
            return constants$17.const$3;
        }
        /**
         * {@snippet :
         * struct {
         *     Uint8* base;
         *     Uint8* here;
         *     Uint8* stop;
         * };
         * }
         */
        public static final class mem {

            // Suppresses default constructor, ensuring non-instantiability.
            private mem() {}
            public static MemoryLayout $LAYOUT() {
                return constants$17.const$4;
            }
            public static VarHandle base$VH() {
                return constants$17.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * Uint8* base;
             * }
             */
            public static MemorySegment base$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * Uint8* base;
             * }
             */
            public static void base$set(MemorySegment seg, MemorySegment x) {
                constants$17.const$5.set(seg, x);
            }
            public static MemorySegment base$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void base$set(MemorySegment seg, long index, MemorySegment x) {
                constants$17.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle here$VH() {
                return constants$18.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * Uint8* here;
             * }
             */
            public static MemorySegment here$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$18.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * Uint8* here;
             * }
             */
            public static void here$set(MemorySegment seg, MemorySegment x) {
                constants$18.const$0.set(seg, x);
            }
            public static MemorySegment here$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$18.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void here$set(MemorySegment seg, long index, MemorySegment x) {
                constants$18.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle stop$VH() {
                return constants$18.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * Uint8* stop;
             * }
             */
            public static MemorySegment stop$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * Uint8* stop;
             * }
             */
            public static void stop$set(MemorySegment seg, MemorySegment x) {
                constants$18.const$1.set(seg, x);
            }
            public static MemorySegment stop$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void stop$set(MemorySegment seg, long index, MemorySegment x) {
                constants$18.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment mem$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        /**
         * {@snippet :
         * struct {
         *     void* data1;
         *     void* data2;
         * };
         * }
         */
        public static final class unknown {

            // Suppresses default constructor, ensuring non-instantiability.
            private unknown() {}
            public static MemoryLayout $LAYOUT() {
                return constants$18.const$2;
            }
            public static VarHandle data1$VH() {
                return constants$18.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * void* data1;
             * }
             */
            public static MemorySegment data1$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * void* data1;
             * }
             */
            public static void data1$set(MemorySegment seg, MemorySegment x) {
                constants$18.const$3.set(seg, x);
            }
            public static MemorySegment data1$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void data1$set(MemorySegment seg, long index, MemorySegment x) {
                constants$18.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle data2$VH() {
                return constants$18.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * void* data2;
             * }
             */
            public static MemorySegment data2$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$18.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * void* data2;
             * }
             */
            public static void data2$set(MemorySegment seg, MemorySegment x) {
                constants$18.const$4.set(seg, x);
            }
            public static MemorySegment data2$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$18.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void data2$set(MemorySegment seg, long index, MemorySegment x) {
                constants$18.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment unknown$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment hidden$slice(MemorySegment seg) {
        return seg.asSlice(48, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


