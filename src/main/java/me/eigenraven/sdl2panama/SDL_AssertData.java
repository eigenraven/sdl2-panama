// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_AssertData {
 *     int always_ignore;
 *     unsigned int trigger_count;
 *     char* condition;
 *     char* filename;
 *     int linenum;
 *     char* function;
 *     struct SDL_AssertData* next;
 * };
 * }
 */
public class SDL_AssertData {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$2;
    }
    public static VarHandle always_ignore$VH() {
        return constants$0.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int always_ignore;
     * }
     */
    public static int always_ignore$get(MemorySegment seg) {
        return (int)constants$0.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int always_ignore;
     * }
     */
    public static void always_ignore$set(MemorySegment seg, int x) {
        constants$0.const$3.set(seg, x);
    }
    public static int always_ignore$get(MemorySegment seg, long index) {
        return (int)constants$0.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void always_ignore$set(MemorySegment seg, long index, int x) {
        constants$0.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle trigger_count$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int trigger_count;
     * }
     */
    public static int trigger_count$get(MemorySegment seg) {
        return (int)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int trigger_count;
     * }
     */
    public static void trigger_count$set(MemorySegment seg, int x) {
        constants$0.const$4.set(seg, x);
    }
    public static int trigger_count$get(MemorySegment seg, long index) {
        return (int)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void trigger_count$set(MemorySegment seg, long index, int x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle condition$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* condition;
     * }
     */
    public static MemorySegment condition$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* condition;
     * }
     */
    public static void condition$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$5.set(seg, x);
    }
    public static MemorySegment condition$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void condition$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filename$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* filename;
     * }
     */
    public static MemorySegment filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* filename;
     * }
     */
    public static void filename$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$0.set(seg, x);
    }
    public static MemorySegment filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void filename$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle linenum$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int linenum;
     * }
     */
    public static int linenum$get(MemorySegment seg) {
        return (int)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int linenum;
     * }
     */
    public static void linenum$set(MemorySegment seg, int x) {
        constants$1.const$1.set(seg, x);
    }
    public static int linenum$get(MemorySegment seg, long index) {
        return (int)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void linenum$set(MemorySegment seg, long index, int x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle function$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* function;
     * }
     */
    public static MemorySegment function$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* function;
     * }
     */
    public static void function$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$2.set(seg, x);
    }
    public static MemorySegment function$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void function$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle next$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct SDL_AssertData* next;
     * }
     */
    public static MemorySegment next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct SDL_AssertData* next;
     * }
     */
    public static void next$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$3.set(seg, x);
    }
    public static MemorySegment next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


