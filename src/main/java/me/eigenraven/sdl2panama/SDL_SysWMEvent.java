// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_SysWMEvent {
 *     Uint32 type;
 *     Uint32 timestamp;
 *     SDL_SysWMmsg* msg;
 * };
 * }
 */
public class SDL_SysWMEvent {

    public static MemoryLayout $LAYOUT() {
        return constants$162.const$2;
    }
    public static VarHandle type$VH() {
        return constants$162.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint32 type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$162.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint32 type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$162.const$3.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$162.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$162.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timestamp$VH() {
        return constants$162.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint32 timestamp;
     * }
     */
    public static int timestamp$get(MemorySegment seg) {
        return (int)constants$162.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint32 timestamp;
     * }
     */
    public static void timestamp$set(MemorySegment seg, int x) {
        constants$162.const$4.set(seg, x);
    }
    public static int timestamp$get(MemorySegment seg, long index) {
        return (int)constants$162.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void timestamp$set(MemorySegment seg, long index, int x) {
        constants$162.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle msg$VH() {
        return constants$162.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SDL_SysWMmsg* msg;
     * }
     */
    public static MemorySegment msg$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$162.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SDL_SysWMmsg* msg;
     * }
     */
    public static void msg$set(MemorySegment seg, MemorySegment x) {
        constants$162.const$5.set(seg, x);
    }
    public static MemorySegment msg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$162.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void msg$set(MemorySegment seg, long index, MemorySegment x) {
        constants$162.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


