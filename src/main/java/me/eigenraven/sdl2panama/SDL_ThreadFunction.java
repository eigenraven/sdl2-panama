// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*SDL_ThreadFunction)(void* data);
 * }
 */
public interface SDL_ThreadFunction {

    int apply(java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(SDL_ThreadFunction fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$11.const$0, fi, constants$3.const$5, scope);
    }
    static SDL_ThreadFunction ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _data) -> {
            try {
                return (int)constants$11.const$1.invokeExact(symbol, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


