// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_version {
 *     Uint8 major;
 *     Uint8 minor;
 *     Uint8 patch;
 * };
 * }
 */
public class SDL_version {

    public static MemoryLayout $LAYOUT() {
        return constants$220.const$4;
    }
    public static VarHandle major$VH() {
        return constants$220.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint8 major;
     * }
     */
    public static byte major$get(MemorySegment seg) {
        return (byte)constants$220.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint8 major;
     * }
     */
    public static void major$set(MemorySegment seg, byte x) {
        constants$220.const$5.set(seg, x);
    }
    public static byte major$get(MemorySegment seg, long index) {
        return (byte)constants$220.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void major$set(MemorySegment seg, long index, byte x) {
        constants$220.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minor$VH() {
        return constants$221.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint8 minor;
     * }
     */
    public static byte minor$get(MemorySegment seg) {
        return (byte)constants$221.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint8 minor;
     * }
     */
    public static void minor$set(MemorySegment seg, byte x) {
        constants$221.const$0.set(seg, x);
    }
    public static byte minor$get(MemorySegment seg, long index) {
        return (byte)constants$221.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void minor$set(MemorySegment seg, long index, byte x) {
        constants$221.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle patch$VH() {
        return constants$221.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint8 patch;
     * }
     */
    public static byte patch$get(MemorySegment seg) {
        return (byte)constants$221.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint8 patch;
     * }
     */
    public static void patch$set(MemorySegment seg, byte x) {
        constants$221.const$1.set(seg, x);
    }
    public static byte patch$get(MemorySegment seg, long index) {
        return (byte)constants$221.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void patch$set(MemorySegment seg, long index, byte x) {
        constants$221.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


