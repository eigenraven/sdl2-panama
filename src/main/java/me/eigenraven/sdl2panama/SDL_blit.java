// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*SDL_blit)(struct SDL_Surface* src,struct SDL_Rect* srcrect,struct SDL_Surface* dst,struct SDL_Rect* dstrect);
 * }
 */
public interface SDL_blit {

    int apply(java.lang.foreign.MemorySegment src, java.lang.foreign.MemorySegment srcrect, java.lang.foreign.MemorySegment dst, java.lang.foreign.MemorySegment dstrect);
    static MemorySegment allocate(SDL_blit fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$57.const$4, fi, constants$57.const$3, scope);
    }
    static SDL_blit ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _src, java.lang.foreign.MemorySegment _srcrect, java.lang.foreign.MemorySegment _dst, java.lang.foreign.MemorySegment _dstrect) -> {
            try {
                return (int)constants$57.const$5.invokeExact(symbol, _src, _srcrect, _dst, _dstrect);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


