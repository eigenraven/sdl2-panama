// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_AudioCVT {
 *     int needed;
 *     SDL_AudioFormat src_format;
 *     SDL_AudioFormat dst_format;
 *     double rate_incr;
 *     Uint8* buf;
 *     int len;
 *     int len_cvt;
 *     int len_mult;
 *     double len_ratio;
 *     SDL_AudioFilter filters[10];
 *     int filter_index;
 * };
 * }
 */
public class SDL_AudioCVT {

    public static MemoryLayout $LAYOUT() {
        return constants$27.const$1;
    }
    public static VarHandle needed$VH() {
        return constants$27.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int needed;
     * }
     */
    public static int needed$get(MemorySegment seg) {
        return (int)constants$27.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int needed;
     * }
     */
    public static void needed$set(MemorySegment seg, int x) {
        constants$27.const$2.set(seg, x);
    }
    public static int needed$get(MemorySegment seg, long index) {
        return (int)constants$27.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void needed$set(MemorySegment seg, long index, int x) {
        constants$27.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle src_format$VH() {
        return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SDL_AudioFormat src_format;
     * }
     */
    public static short src_format$get(MemorySegment seg) {
        return (short)constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SDL_AudioFormat src_format;
     * }
     */
    public static void src_format$set(MemorySegment seg, short x) {
        constants$27.const$3.set(seg, x);
    }
    public static short src_format$get(MemorySegment seg, long index) {
        return (short)constants$27.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void src_format$set(MemorySegment seg, long index, short x) {
        constants$27.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dst_format$VH() {
        return constants$27.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SDL_AudioFormat dst_format;
     * }
     */
    public static short dst_format$get(MemorySegment seg) {
        return (short)constants$27.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SDL_AudioFormat dst_format;
     * }
     */
    public static void dst_format$set(MemorySegment seg, short x) {
        constants$27.const$4.set(seg, x);
    }
    public static short dst_format$get(MemorySegment seg, long index) {
        return (short)constants$27.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dst_format$set(MemorySegment seg, long index, short x) {
        constants$27.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rate_incr$VH() {
        return constants$27.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double rate_incr;
     * }
     */
    public static double rate_incr$get(MemorySegment seg) {
        return (double)constants$27.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double rate_incr;
     * }
     */
    public static void rate_incr$set(MemorySegment seg, double x) {
        constants$27.const$5.set(seg, x);
    }
    public static double rate_incr$get(MemorySegment seg, long index) {
        return (double)constants$27.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void rate_incr$set(MemorySegment seg, long index, double x) {
        constants$27.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle buf$VH() {
        return constants$28.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Uint8* buf;
     * }
     */
    public static MemorySegment buf$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$28.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Uint8* buf;
     * }
     */
    public static void buf$set(MemorySegment seg, MemorySegment x) {
        constants$28.const$0.set(seg, x);
    }
    public static MemorySegment buf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$28.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void buf$set(MemorySegment seg, long index, MemorySegment x) {
        constants$28.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle len$VH() {
        return constants$28.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int len;
     * }
     */
    public static int len$get(MemorySegment seg) {
        return (int)constants$28.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int len;
     * }
     */
    public static void len$set(MemorySegment seg, int x) {
        constants$28.const$1.set(seg, x);
    }
    public static int len$get(MemorySegment seg, long index) {
        return (int)constants$28.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void len$set(MemorySegment seg, long index, int x) {
        constants$28.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle len_cvt$VH() {
        return constants$28.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int len_cvt;
     * }
     */
    public static int len_cvt$get(MemorySegment seg) {
        return (int)constants$28.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int len_cvt;
     * }
     */
    public static void len_cvt$set(MemorySegment seg, int x) {
        constants$28.const$2.set(seg, x);
    }
    public static int len_cvt$get(MemorySegment seg, long index) {
        return (int)constants$28.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void len_cvt$set(MemorySegment seg, long index, int x) {
        constants$28.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle len_mult$VH() {
        return constants$28.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int len_mult;
     * }
     */
    public static int len_mult$get(MemorySegment seg) {
        return (int)constants$28.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int len_mult;
     * }
     */
    public static void len_mult$set(MemorySegment seg, int x) {
        constants$28.const$3.set(seg, x);
    }
    public static int len_mult$get(MemorySegment seg, long index) {
        return (int)constants$28.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void len_mult$set(MemorySegment seg, long index, int x) {
        constants$28.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle len_ratio$VH() {
        return constants$28.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double len_ratio;
     * }
     */
    public static double len_ratio$get(MemorySegment seg) {
        return (double)constants$28.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double len_ratio;
     * }
     */
    public static void len_ratio$set(MemorySegment seg, double x) {
        constants$28.const$4.set(seg, x);
    }
    public static double len_ratio$get(MemorySegment seg, long index) {
        return (double)constants$28.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void len_ratio$set(MemorySegment seg, long index, double x) {
        constants$28.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment filters$slice(MemorySegment seg) {
        return seg.asSlice(44, 80);
    }
    public static VarHandle filter_index$VH() {
        return constants$28.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int filter_index;
     * }
     */
    public static int filter_index$get(MemorySegment seg) {
        return (int)constants$28.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int filter_index;
     * }
     */
    public static void filter_index$set(MemorySegment seg, int x) {
        constants$28.const$5.set(seg, x);
    }
    public static int filter_index$get(MemorySegment seg, long index) {
        return (int)constants$28.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_index$set(MemorySegment seg, long index, int x) {
        constants$28.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


