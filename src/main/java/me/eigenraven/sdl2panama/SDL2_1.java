// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class SDL2_1 {

    /**
     * {@snippet :
     * enum .SDLK_HELP = 1073741941;
     * }
     */
    public static int SDLK_HELP() {
        return (int)1073741941L;
    }
    /**
     * {@snippet :
     * enum .SDLK_MENU = 1073741942;
     * }
     */
    public static int SDLK_MENU() {
        return (int)1073741942L;
    }
    /**
     * {@snippet :
     * enum .SDLK_SELECT = 1073741943;
     * }
     */
    public static int SDLK_SELECT() {
        return (int)1073741943L;
    }
    /**
     * {@snippet :
     * enum .SDLK_STOP = 1073741944;
     * }
     */
    public static int SDLK_STOP() {
        return (int)1073741944L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AGAIN = 1073741945;
     * }
     */
    public static int SDLK_AGAIN() {
        return (int)1073741945L;
    }
    /**
     * {@snippet :
     * enum .SDLK_UNDO = 1073741946;
     * }
     */
    public static int SDLK_UNDO() {
        return (int)1073741946L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CUT = 1073741947;
     * }
     */
    public static int SDLK_CUT() {
        return (int)1073741947L;
    }
    /**
     * {@snippet :
     * enum .SDLK_COPY = 1073741948;
     * }
     */
    public static int SDLK_COPY() {
        return (int)1073741948L;
    }
    /**
     * {@snippet :
     * enum .SDLK_PASTE = 1073741949;
     * }
     */
    public static int SDLK_PASTE() {
        return (int)1073741949L;
    }
    /**
     * {@snippet :
     * enum .SDLK_FIND = 1073741950;
     * }
     */
    public static int SDLK_FIND() {
        return (int)1073741950L;
    }
    /**
     * {@snippet :
     * enum .SDLK_MUTE = 1073741951;
     * }
     */
    public static int SDLK_MUTE() {
        return (int)1073741951L;
    }
    /**
     * {@snippet :
     * enum .SDLK_VOLUMEUP = 1073741952;
     * }
     */
    public static int SDLK_VOLUMEUP() {
        return (int)1073741952L;
    }
    /**
     * {@snippet :
     * enum .SDLK_VOLUMEDOWN = 1073741953;
     * }
     */
    public static int SDLK_VOLUMEDOWN() {
        return (int)1073741953L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_COMMA = 1073741957;
     * }
     */
    public static int SDLK_KP_COMMA() {
        return (int)1073741957L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_EQUALSAS400 = 1073741958;
     * }
     */
    public static int SDLK_KP_EQUALSAS400() {
        return (int)1073741958L;
    }
    /**
     * {@snippet :
     * enum .SDLK_ALTERASE = 1073741977;
     * }
     */
    public static int SDLK_ALTERASE() {
        return (int)1073741977L;
    }
    /**
     * {@snippet :
     * enum .SDLK_SYSREQ = 1073741978;
     * }
     */
    public static int SDLK_SYSREQ() {
        return (int)1073741978L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CANCEL = 1073741979;
     * }
     */
    public static int SDLK_CANCEL() {
        return (int)1073741979L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CLEAR = 1073741980;
     * }
     */
    public static int SDLK_CLEAR() {
        return (int)1073741980L;
    }
    /**
     * {@snippet :
     * enum .SDLK_PRIOR = 1073741981;
     * }
     */
    public static int SDLK_PRIOR() {
        return (int)1073741981L;
    }
    /**
     * {@snippet :
     * enum .SDLK_RETURN2 = 1073741982;
     * }
     */
    public static int SDLK_RETURN2() {
        return (int)1073741982L;
    }
    /**
     * {@snippet :
     * enum .SDLK_SEPARATOR = 1073741983;
     * }
     */
    public static int SDLK_SEPARATOR() {
        return (int)1073741983L;
    }
    /**
     * {@snippet :
     * enum .SDLK_OUT = 1073741984;
     * }
     */
    public static int SDLK_OUT() {
        return (int)1073741984L;
    }
    /**
     * {@snippet :
     * enum .SDLK_OPER = 1073741985;
     * }
     */
    public static int SDLK_OPER() {
        return (int)1073741985L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CLEARAGAIN = 1073741986;
     * }
     */
    public static int SDLK_CLEARAGAIN() {
        return (int)1073741986L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CRSEL = 1073741987;
     * }
     */
    public static int SDLK_CRSEL() {
        return (int)1073741987L;
    }
    /**
     * {@snippet :
     * enum .SDLK_EXSEL = 1073741988;
     * }
     */
    public static int SDLK_EXSEL() {
        return (int)1073741988L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_00 = 1073742000;
     * }
     */
    public static int SDLK_KP_00() {
        return (int)1073742000L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_000 = 1073742001;
     * }
     */
    public static int SDLK_KP_000() {
        return (int)1073742001L;
    }
    /**
     * {@snippet :
     * enum .SDLK_THOUSANDSSEPARATOR = 1073742002;
     * }
     */
    public static int SDLK_THOUSANDSSEPARATOR() {
        return (int)1073742002L;
    }
    /**
     * {@snippet :
     * enum .SDLK_DECIMALSEPARATOR = 1073742003;
     * }
     */
    public static int SDLK_DECIMALSEPARATOR() {
        return (int)1073742003L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CURRENCYUNIT = 1073742004;
     * }
     */
    public static int SDLK_CURRENCYUNIT() {
        return (int)1073742004L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CURRENCYSUBUNIT = 1073742005;
     * }
     */
    public static int SDLK_CURRENCYSUBUNIT() {
        return (int)1073742005L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_LEFTPAREN = 1073742006;
     * }
     */
    public static int SDLK_KP_LEFTPAREN() {
        return (int)1073742006L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_RIGHTPAREN = 1073742007;
     * }
     */
    public static int SDLK_KP_RIGHTPAREN() {
        return (int)1073742007L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_LEFTBRACE = 1073742008;
     * }
     */
    public static int SDLK_KP_LEFTBRACE() {
        return (int)1073742008L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_RIGHTBRACE = 1073742009;
     * }
     */
    public static int SDLK_KP_RIGHTBRACE() {
        return (int)1073742009L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_TAB = 1073742010;
     * }
     */
    public static int SDLK_KP_TAB() {
        return (int)1073742010L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_BACKSPACE = 1073742011;
     * }
     */
    public static int SDLK_KP_BACKSPACE() {
        return (int)1073742011L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_A = 1073742012;
     * }
     */
    public static int SDLK_KP_A() {
        return (int)1073742012L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_B = 1073742013;
     * }
     */
    public static int SDLK_KP_B() {
        return (int)1073742013L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_C = 1073742014;
     * }
     */
    public static int SDLK_KP_C() {
        return (int)1073742014L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_D = 1073742015;
     * }
     */
    public static int SDLK_KP_D() {
        return (int)1073742015L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_E = 1073742016;
     * }
     */
    public static int SDLK_KP_E() {
        return (int)1073742016L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_F = 1073742017;
     * }
     */
    public static int SDLK_KP_F() {
        return (int)1073742017L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_XOR = 1073742018;
     * }
     */
    public static int SDLK_KP_XOR() {
        return (int)1073742018L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_POWER = 1073742019;
     * }
     */
    public static int SDLK_KP_POWER() {
        return (int)1073742019L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_PERCENT = 1073742020;
     * }
     */
    public static int SDLK_KP_PERCENT() {
        return (int)1073742020L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_LESS = 1073742021;
     * }
     */
    public static int SDLK_KP_LESS() {
        return (int)1073742021L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_GREATER = 1073742022;
     * }
     */
    public static int SDLK_KP_GREATER() {
        return (int)1073742022L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_AMPERSAND = 1073742023;
     * }
     */
    public static int SDLK_KP_AMPERSAND() {
        return (int)1073742023L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_DBLAMPERSAND = 1073742024;
     * }
     */
    public static int SDLK_KP_DBLAMPERSAND() {
        return (int)1073742024L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_VERTICALBAR = 1073742025;
     * }
     */
    public static int SDLK_KP_VERTICALBAR() {
        return (int)1073742025L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_DBLVERTICALBAR = 1073742026;
     * }
     */
    public static int SDLK_KP_DBLVERTICALBAR() {
        return (int)1073742026L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_COLON = 1073742027;
     * }
     */
    public static int SDLK_KP_COLON() {
        return (int)1073742027L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_HASH = 1073742028;
     * }
     */
    public static int SDLK_KP_HASH() {
        return (int)1073742028L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_SPACE = 1073742029;
     * }
     */
    public static int SDLK_KP_SPACE() {
        return (int)1073742029L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_AT = 1073742030;
     * }
     */
    public static int SDLK_KP_AT() {
        return (int)1073742030L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_EXCLAM = 1073742031;
     * }
     */
    public static int SDLK_KP_EXCLAM() {
        return (int)1073742031L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_MEMSTORE = 1073742032;
     * }
     */
    public static int SDLK_KP_MEMSTORE() {
        return (int)1073742032L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_MEMRECALL = 1073742033;
     * }
     */
    public static int SDLK_KP_MEMRECALL() {
        return (int)1073742033L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_MEMCLEAR = 1073742034;
     * }
     */
    public static int SDLK_KP_MEMCLEAR() {
        return (int)1073742034L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_MEMADD = 1073742035;
     * }
     */
    public static int SDLK_KP_MEMADD() {
        return (int)1073742035L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_MEMSUBTRACT = 1073742036;
     * }
     */
    public static int SDLK_KP_MEMSUBTRACT() {
        return (int)1073742036L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_MEMMULTIPLY = 1073742037;
     * }
     */
    public static int SDLK_KP_MEMMULTIPLY() {
        return (int)1073742037L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_MEMDIVIDE = 1073742038;
     * }
     */
    public static int SDLK_KP_MEMDIVIDE() {
        return (int)1073742038L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_PLUSMINUS = 1073742039;
     * }
     */
    public static int SDLK_KP_PLUSMINUS() {
        return (int)1073742039L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_CLEAR = 1073742040;
     * }
     */
    public static int SDLK_KP_CLEAR() {
        return (int)1073742040L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_CLEARENTRY = 1073742041;
     * }
     */
    public static int SDLK_KP_CLEARENTRY() {
        return (int)1073742041L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_BINARY = 1073742042;
     * }
     */
    public static int SDLK_KP_BINARY() {
        return (int)1073742042L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_OCTAL = 1073742043;
     * }
     */
    public static int SDLK_KP_OCTAL() {
        return (int)1073742043L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_DECIMAL = 1073742044;
     * }
     */
    public static int SDLK_KP_DECIMAL() {
        return (int)1073742044L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KP_HEXADECIMAL = 1073742045;
     * }
     */
    public static int SDLK_KP_HEXADECIMAL() {
        return (int)1073742045L;
    }
    /**
     * {@snippet :
     * enum .SDLK_LCTRL = 1073742048;
     * }
     */
    public static int SDLK_LCTRL() {
        return (int)1073742048L;
    }
    /**
     * {@snippet :
     * enum .SDLK_LSHIFT = 1073742049;
     * }
     */
    public static int SDLK_LSHIFT() {
        return (int)1073742049L;
    }
    /**
     * {@snippet :
     * enum .SDLK_LALT = 1073742050;
     * }
     */
    public static int SDLK_LALT() {
        return (int)1073742050L;
    }
    /**
     * {@snippet :
     * enum .SDLK_LGUI = 1073742051;
     * }
     */
    public static int SDLK_LGUI() {
        return (int)1073742051L;
    }
    /**
     * {@snippet :
     * enum .SDLK_RCTRL = 1073742052;
     * }
     */
    public static int SDLK_RCTRL() {
        return (int)1073742052L;
    }
    /**
     * {@snippet :
     * enum .SDLK_RSHIFT = 1073742053;
     * }
     */
    public static int SDLK_RSHIFT() {
        return (int)1073742053L;
    }
    /**
     * {@snippet :
     * enum .SDLK_RALT = 1073742054;
     * }
     */
    public static int SDLK_RALT() {
        return (int)1073742054L;
    }
    /**
     * {@snippet :
     * enum .SDLK_RGUI = 1073742055;
     * }
     */
    public static int SDLK_RGUI() {
        return (int)1073742055L;
    }
    /**
     * {@snippet :
     * enum .SDLK_MODE = 1073742081;
     * }
     */
    public static int SDLK_MODE() {
        return (int)1073742081L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AUDIONEXT = 1073742082;
     * }
     */
    public static int SDLK_AUDIONEXT() {
        return (int)1073742082L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AUDIOPREV = 1073742083;
     * }
     */
    public static int SDLK_AUDIOPREV() {
        return (int)1073742083L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AUDIOSTOP = 1073742084;
     * }
     */
    public static int SDLK_AUDIOSTOP() {
        return (int)1073742084L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AUDIOPLAY = 1073742085;
     * }
     */
    public static int SDLK_AUDIOPLAY() {
        return (int)1073742085L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AUDIOMUTE = 1073742086;
     * }
     */
    public static int SDLK_AUDIOMUTE() {
        return (int)1073742086L;
    }
    /**
     * {@snippet :
     * enum .SDLK_MEDIASELECT = 1073742087;
     * }
     */
    public static int SDLK_MEDIASELECT() {
        return (int)1073742087L;
    }
    /**
     * {@snippet :
     * enum .SDLK_WWW = 1073742088;
     * }
     */
    public static int SDLK_WWW() {
        return (int)1073742088L;
    }
    /**
     * {@snippet :
     * enum .SDLK_MAIL = 1073742089;
     * }
     */
    public static int SDLK_MAIL() {
        return (int)1073742089L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CALCULATOR = 1073742090;
     * }
     */
    public static int SDLK_CALCULATOR() {
        return (int)1073742090L;
    }
    /**
     * {@snippet :
     * enum .SDLK_COMPUTER = 1073742091;
     * }
     */
    public static int SDLK_COMPUTER() {
        return (int)1073742091L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AC_SEARCH = 1073742092;
     * }
     */
    public static int SDLK_AC_SEARCH() {
        return (int)1073742092L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AC_HOME = 1073742093;
     * }
     */
    public static int SDLK_AC_HOME() {
        return (int)1073742093L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AC_BACK = 1073742094;
     * }
     */
    public static int SDLK_AC_BACK() {
        return (int)1073742094L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AC_FORWARD = 1073742095;
     * }
     */
    public static int SDLK_AC_FORWARD() {
        return (int)1073742095L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AC_STOP = 1073742096;
     * }
     */
    public static int SDLK_AC_STOP() {
        return (int)1073742096L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AC_REFRESH = 1073742097;
     * }
     */
    public static int SDLK_AC_REFRESH() {
        return (int)1073742097L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AC_BOOKMARKS = 1073742098;
     * }
     */
    public static int SDLK_AC_BOOKMARKS() {
        return (int)1073742098L;
    }
    /**
     * {@snippet :
     * enum .SDLK_BRIGHTNESSDOWN = 1073742099;
     * }
     */
    public static int SDLK_BRIGHTNESSDOWN() {
        return (int)1073742099L;
    }
    /**
     * {@snippet :
     * enum .SDLK_BRIGHTNESSUP = 1073742100;
     * }
     */
    public static int SDLK_BRIGHTNESSUP() {
        return (int)1073742100L;
    }
    /**
     * {@snippet :
     * enum .SDLK_DISPLAYSWITCH = 1073742101;
     * }
     */
    public static int SDLK_DISPLAYSWITCH() {
        return (int)1073742101L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KBDILLUMTOGGLE = 1073742102;
     * }
     */
    public static int SDLK_KBDILLUMTOGGLE() {
        return (int)1073742102L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KBDILLUMDOWN = 1073742103;
     * }
     */
    public static int SDLK_KBDILLUMDOWN() {
        return (int)1073742103L;
    }
    /**
     * {@snippet :
     * enum .SDLK_KBDILLUMUP = 1073742104;
     * }
     */
    public static int SDLK_KBDILLUMUP() {
        return (int)1073742104L;
    }
    /**
     * {@snippet :
     * enum .SDLK_EJECT = 1073742105;
     * }
     */
    public static int SDLK_EJECT() {
        return (int)1073742105L;
    }
    /**
     * {@snippet :
     * enum .SDLK_SLEEP = 1073742106;
     * }
     */
    public static int SDLK_SLEEP() {
        return (int)1073742106L;
    }
    /**
     * {@snippet :
     * enum .SDLK_APP1 = 1073742107;
     * }
     */
    public static int SDLK_APP1() {
        return (int)1073742107L;
    }
    /**
     * {@snippet :
     * enum .SDLK_APP2 = 1073742108;
     * }
     */
    public static int SDLK_APP2() {
        return (int)1073742108L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AUDIOREWIND = 1073742109;
     * }
     */
    public static int SDLK_AUDIOREWIND() {
        return (int)1073742109L;
    }
    /**
     * {@snippet :
     * enum .SDLK_AUDIOFASTFORWARD = 1073742110;
     * }
     */
    public static int SDLK_AUDIOFASTFORWARD() {
        return (int)1073742110L;
    }
    /**
     * {@snippet :
     * enum .SDLK_SOFTLEFT = 1073742111;
     * }
     */
    public static int SDLK_SOFTLEFT() {
        return (int)1073742111L;
    }
    /**
     * {@snippet :
     * enum .SDLK_SOFTRIGHT = 1073742112;
     * }
     */
    public static int SDLK_SOFTRIGHT() {
        return (int)1073742112L;
    }
    /**
     * {@snippet :
     * enum .SDLK_CALL = 1073742113;
     * }
     */
    public static int SDLK_CALL() {
        return (int)1073742113L;
    }
    /**
     * {@snippet :
     * enum .SDLK_ENDCALL = 1073742114;
     * }
     */
    public static int SDLK_ENDCALL() {
        return (int)1073742114L;
    }
    /**
     * {@snippet :
     * enum .KMOD_NONE = 0;
     * }
     */
    public static int KMOD_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .KMOD_LSHIFT = 1;
     * }
     */
    public static int KMOD_LSHIFT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .KMOD_RSHIFT = 2;
     * }
     */
    public static int KMOD_RSHIFT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .KMOD_LCTRL = 64;
     * }
     */
    public static int KMOD_LCTRL() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .KMOD_RCTRL = 128;
     * }
     */
    public static int KMOD_RCTRL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .KMOD_LALT = 256;
     * }
     */
    public static int KMOD_LALT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .KMOD_RALT = 512;
     * }
     */
    public static int KMOD_RALT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .KMOD_LGUI = 1024;
     * }
     */
    public static int KMOD_LGUI() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .KMOD_RGUI = 2048;
     * }
     */
    public static int KMOD_RGUI() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .KMOD_NUM = 4096;
     * }
     */
    public static int KMOD_NUM() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .KMOD_CAPS = 8192;
     * }
     */
    public static int KMOD_CAPS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .KMOD_MODE = 16384;
     * }
     */
    public static int KMOD_MODE() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum .KMOD_SCROLL = 32768;
     * }
     */
    public static int KMOD_SCROLL() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum .KMOD_CTRL = 192;
     * }
     */
    public static int KMOD_CTRL() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * enum .KMOD_SHIFT = 3;
     * }
     */
    public static int KMOD_SHIFT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .KMOD_ALT = 768;
     * }
     */
    public static int KMOD_ALT() {
        return (int)768L;
    }
    /**
     * {@snippet :
     * enum .KMOD_GUI = 3072;
     * }
     */
    public static int KMOD_GUI() {
        return (int)3072L;
    }
    /**
     * {@snippet :
     * enum .KMOD_RESERVED = 32768;
     * }
     */
    public static int KMOD_RESERVED() {
        return (int)32768L;
    }
    public static MethodHandle SDL_GetKeyboardFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$5,"SDL_GetKeyboardFocus");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_GetKeyboardFocus();
     * }
     */
    public static MemorySegment SDL_GetKeyboardFocus() {
        var mh$ = SDL_GetKeyboardFocus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$0,"SDL_GetKeyboardState");
    }
    /**
     * {@snippet :
     * const Uint8* SDL_GetKeyboardState(int* numkeys);
     * }
     */
    public static MemorySegment SDL_GetKeyboardState(MemorySegment numkeys) {
        var mh$ = SDL_GetKeyboardState$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(numkeys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ResetKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$1,"SDL_ResetKeyboard");
    }
    /**
     * {@snippet :
     * void SDL_ResetKeyboard();
     * }
     */
    public static void SDL_ResetKeyboard() {
        var mh$ = SDL_ResetKeyboard$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetModState$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$2,"SDL_GetModState");
    }
    /**
     * {@snippet :
     * SDL_Keymod SDL_GetModState();
     * }
     */
    public static int SDL_GetModState() {
        var mh$ = SDL_GetModState$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetModState$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$3,"SDL_SetModState");
    }
    /**
     * {@snippet :
     * void SDL_SetModState(SDL_Keymod modstate);
     * }
     */
    public static void SDL_SetModState(int modstate) {
        var mh$ = SDL_SetModState$MH();
        try {
            mh$.invokeExact(modstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyFromScancode$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$4,"SDL_GetKeyFromScancode");
    }
    /**
     * {@snippet :
     * SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);
     * }
     */
    public static int SDL_GetKeyFromScancode(int scancode) {
        var mh$ = SDL_GetKeyFromScancode$MH();
        try {
            return (int)mh$.invokeExact(scancode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetScancodeFromKey$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$5,"SDL_GetScancodeFromKey");
    }
    /**
     * {@snippet :
     * SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);
     * }
     */
    public static int SDL_GetScancodeFromKey(int key) {
        var mh$ = SDL_GetScancodeFromKey$MH();
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetScancodeName$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$0,"SDL_GetScancodeName");
    }
    /**
     * {@snippet :
     * char* SDL_GetScancodeName(SDL_Scancode scancode);
     * }
     */
    public static MemorySegment SDL_GetScancodeName(int scancode) {
        var mh$ = SDL_GetScancodeName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(scancode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetScancodeFromName$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$1,"SDL_GetScancodeFromName");
    }
    /**
     * {@snippet :
     * SDL_Scancode SDL_GetScancodeFromName(char* name);
     * }
     */
    public static int SDL_GetScancodeFromName(MemorySegment name) {
        var mh$ = SDL_GetScancodeFromName$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyName$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$2,"SDL_GetKeyName");
    }
    /**
     * {@snippet :
     * char* SDL_GetKeyName(SDL_Keycode key);
     * }
     */
    public static MemorySegment SDL_GetKeyName(int key) {
        var mh$ = SDL_GetKeyName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyFromName$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$3,"SDL_GetKeyFromName");
    }
    /**
     * {@snippet :
     * SDL_Keycode SDL_GetKeyFromName(char* name);
     * }
     */
    public static int SDL_GetKeyFromName(MemorySegment name) {
        var mh$ = SDL_GetKeyFromName$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_StartTextInput$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$4,"SDL_StartTextInput");
    }
    /**
     * {@snippet :
     * void SDL_StartTextInput();
     * }
     */
    public static void SDL_StartTextInput() {
        var mh$ = SDL_StartTextInput$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsTextInputActive$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$5,"SDL_IsTextInputActive");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IsTextInputActive();
     * }
     */
    public static int SDL_IsTextInputActive() {
        var mh$ = SDL_IsTextInputActive$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_StopTextInput$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$0,"SDL_StopTextInput");
    }
    /**
     * {@snippet :
     * void SDL_StopTextInput();
     * }
     */
    public static void SDL_StopTextInput() {
        var mh$ = SDL_StopTextInput$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ClearComposition$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$1,"SDL_ClearComposition");
    }
    /**
     * {@snippet :
     * void SDL_ClearComposition();
     * }
     */
    public static void SDL_ClearComposition() {
        var mh$ = SDL_ClearComposition$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsTextInputShown$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$2,"SDL_IsTextInputShown");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IsTextInputShown();
     * }
     */
    public static int SDL_IsTextInputShown() {
        var mh$ = SDL_IsTextInputShown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextInputRect$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$3,"SDL_SetTextInputRect");
    }
    /**
     * {@snippet :
     * void SDL_SetTextInputRect(const SDL_Rect* rect);
     * }
     */
    public static void SDL_SetTextInputRect(MemorySegment rect) {
        var mh$ = SDL_SetTextInputRect$MH();
        try {
            mh$.invokeExact(rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasScreenKeyboardSupport$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$4,"SDL_HasScreenKeyboardSupport");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasScreenKeyboardSupport();
     * }
     */
    public static int SDL_HasScreenKeyboardSupport() {
        var mh$ = SDL_HasScreenKeyboardSupport$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsScreenKeyboardShown$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$5,"SDL_IsScreenKeyboardShown");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IsScreenKeyboardShown(SDL_Window* window);
     * }
     */
    public static int SDL_IsScreenKeyboardShown(MemorySegment window) {
        var mh$ = SDL_IsScreenKeyboardShown$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_ARROW = 0;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_ARROW() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_IBEAM = 1;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_IBEAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_WAIT = 2;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_WAIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_CROSSHAIR = 3;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_CROSSHAIR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_WAITARROW = 4;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_WAITARROW() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_SIZENWSE = 5;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_SIZENWSE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_SIZENESW = 6;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_SIZENESW() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_SIZEWE = 7;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_SIZEWE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_SIZENS = 8;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_SIZENS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_SIZEALL = 9;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_SIZEALL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_NO = 10;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_NO() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSTEM_CURSOR_HAND = 11;
     * }
     */
    public static int SDL_SYSTEM_CURSOR_HAND() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .SDL_NUM_SYSTEM_CURSORS = 12;
     * }
     */
    public static int SDL_NUM_SYSTEM_CURSORS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .SDL_MOUSEWHEEL_NORMAL = 0;
     * }
     */
    public static int SDL_MOUSEWHEEL_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_MOUSEWHEEL_FLIPPED = 1;
     * }
     */
    public static int SDL_MOUSEWHEEL_FLIPPED() {
        return (int)1L;
    }
    public static MethodHandle SDL_GetMouseFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$0,"SDL_GetMouseFocus");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_GetMouseFocus();
     * }
     */
    public static MemorySegment SDL_GetMouseFocus() {
        var mh$ = SDL_GetMouseFocus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetMouseState$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$1,"SDL_GetMouseState");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetMouseState(int* x, int* y);
     * }
     */
    public static int SDL_GetMouseState(MemorySegment x, MemorySegment y) {
        var mh$ = SDL_GetMouseState$MH();
        try {
            return (int)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetGlobalMouseState$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$2,"SDL_GetGlobalMouseState");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetGlobalMouseState(int* x, int* y);
     * }
     */
    public static int SDL_GetGlobalMouseState(MemorySegment x, MemorySegment y) {
        var mh$ = SDL_GetGlobalMouseState$MH();
        try {
            return (int)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRelativeMouseState$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$3,"SDL_GetRelativeMouseState");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetRelativeMouseState(int* x, int* y);
     * }
     */
    public static int SDL_GetRelativeMouseState(MemorySegment x, MemorySegment y) {
        var mh$ = SDL_GetRelativeMouseState$MH();
        try {
            return (int)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WarpMouseInWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$4,"SDL_WarpMouseInWindow");
    }
    /**
     * {@snippet :
     * void SDL_WarpMouseInWindow(SDL_Window* window, int x, int y);
     * }
     */
    public static void SDL_WarpMouseInWindow(MemorySegment window, int x, int y) {
        var mh$ = SDL_WarpMouseInWindow$MH();
        try {
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WarpMouseGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$5,"SDL_WarpMouseGlobal");
    }
    /**
     * {@snippet :
     * int SDL_WarpMouseGlobal(int x, int y);
     * }
     */
    public static int SDL_WarpMouseGlobal(int x, int y) {
        var mh$ = SDL_WarpMouseGlobal$MH();
        try {
            return (int)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetRelativeMouseMode$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$0,"SDL_SetRelativeMouseMode");
    }
    /**
     * {@snippet :
     * int SDL_SetRelativeMouseMode(SDL_bool enabled);
     * }
     */
    public static int SDL_SetRelativeMouseMode(int enabled) {
        var mh$ = SDL_SetRelativeMouseMode$MH();
        try {
            return (int)mh$.invokeExact(enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CaptureMouse$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$1,"SDL_CaptureMouse");
    }
    /**
     * {@snippet :
     * int SDL_CaptureMouse(SDL_bool enabled);
     * }
     */
    public static int SDL_CaptureMouse(int enabled) {
        var mh$ = SDL_CaptureMouse$MH();
        try {
            return (int)mh$.invokeExact(enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRelativeMouseMode$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$2,"SDL_GetRelativeMouseMode");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GetRelativeMouseMode();
     * }
     */
    public static int SDL_GetRelativeMouseMode() {
        var mh$ = SDL_GetRelativeMouseMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$4,"SDL_CreateCursor");
    }
    /**
     * {@snippet :
     * SDL_Cursor* SDL_CreateCursor(const Uint8* data, const Uint8* mask, int w, int h, int hot_x, int hot_y);
     * }
     */
    public static MemorySegment SDL_CreateCursor(MemorySegment data, MemorySegment mask, int w, int h, int hot_x, int hot_y) {
        var mh$ = SDL_CreateCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, mask, w, h, hot_x, hot_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateColorCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$5,"SDL_CreateColorCursor");
    }
    /**
     * {@snippet :
     * SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);
     * }
     */
    public static MemorySegment SDL_CreateColorCursor(MemorySegment surface, int hot_x, int hot_y) {
        var mh$ = SDL_CreateColorCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(surface, hot_x, hot_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateSystemCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$0,"SDL_CreateSystemCursor");
    }
    /**
     * {@snippet :
     * SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);
     * }
     */
    public static MemorySegment SDL_CreateSystemCursor(int id) {
        var mh$ = SDL_CreateSystemCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$1,"SDL_SetCursor");
    }
    /**
     * {@snippet :
     * void SDL_SetCursor(SDL_Cursor* cursor);
     * }
     */
    public static void SDL_SetCursor(MemorySegment cursor) {
        var mh$ = SDL_SetCursor$MH();
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$2,"SDL_GetCursor");
    }
    /**
     * {@snippet :
     * SDL_Cursor* SDL_GetCursor();
     * }
     */
    public static MemorySegment SDL_GetCursor() {
        var mh$ = SDL_GetCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDefaultCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$3,"SDL_GetDefaultCursor");
    }
    /**
     * {@snippet :
     * SDL_Cursor* SDL_GetDefaultCursor();
     * }
     */
    public static MemorySegment SDL_GetDefaultCursor() {
        var mh$ = SDL_GetDefaultCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$4,"SDL_FreeCursor");
    }
    /**
     * {@snippet :
     * void SDL_FreeCursor(SDL_Cursor* cursor);
     * }
     */
    public static void SDL_FreeCursor(MemorySegment cursor) {
        var mh$ = SDL_FreeCursor$MH();
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ShowCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$5,"SDL_ShowCursor");
    }
    /**
     * {@snippet :
     * int SDL_ShowCursor(int toggle);
     * }
     */
    public static int SDL_ShowCursor(int toggle) {
        var mh$ = SDL_ShowCursor$MH();
        try {
            return (int)mh$.invokeExact(toggle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GUIDToString$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$2,"SDL_GUIDToString");
    }
    /**
     * {@snippet :
     * void SDL_GUIDToString(SDL_GUID guid, char* pszGUID, int cbGUID);
     * }
     */
    public static void SDL_GUIDToString(MemorySegment guid, MemorySegment pszGUID, int cbGUID) {
        var mh$ = SDL_GUIDToString$MH();
        try {
            mh$.invokeExact(guid, pszGUID, cbGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GUIDFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$4,"SDL_GUIDFromString");
    }
    /**
     * {@snippet :
     * SDL_GUID SDL_GUIDFromString(char* pchGUID);
     * }
     */
    public static MemorySegment SDL_GUIDFromString(SegmentAllocator allocator, MemorySegment pchGUID) {
        var mh$ = SDL_GUIDFromString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pchGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_JoystickID;
     * }
     */
    public static final OfInt SDL_JoystickID = JAVA_INT;
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_GAMECONTROLLER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_WHEEL = 2;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_WHEEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_ARCADE_STICK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_FLIGHT_STICK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_DANCE_PAD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_GUITAR = 6;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_GUITAR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_DRUM_KIT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_ARCADE_PAD() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_TYPE_THROTTLE = 9;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_THROTTLE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_POWER_UNKNOWN = -1;
     * }
     */
    public static int SDL_JOYSTICK_POWER_UNKNOWN() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_POWER_EMPTY = 0;
     * }
     */
    public static int SDL_JOYSTICK_POWER_EMPTY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_POWER_LOW = 1;
     * }
     */
    public static int SDL_JOYSTICK_POWER_LOW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_POWER_MEDIUM = 2;
     * }
     */
    public static int SDL_JOYSTICK_POWER_MEDIUM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_POWER_FULL = 3;
     * }
     */
    public static int SDL_JOYSTICK_POWER_FULL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_POWER_WIRED = 4;
     * }
     */
    public static int SDL_JOYSTICK_POWER_WIRED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYSTICK_POWER_MAX = 5;
     * }
     */
    public static int SDL_JOYSTICK_POWER_MAX() {
        return (int)5L;
    }
    public static MethodHandle SDL_LockJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$5,"SDL_LockJoysticks");
    }
    /**
     * {@snippet :
     * void SDL_LockJoysticks();
     * }
     */
    public static void SDL_LockJoysticks() {
        var mh$ = SDL_LockJoysticks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$0,"SDL_UnlockJoysticks");
    }
    /**
     * {@snippet :
     * void SDL_UnlockJoysticks();
     * }
     */
    public static void SDL_UnlockJoysticks() {
        var mh$ = SDL_UnlockJoysticks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NumJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$1,"SDL_NumJoysticks");
    }
    /**
     * {@snippet :
     * int SDL_NumJoysticks();
     * }
     */
    public static int SDL_NumJoysticks() {
        var mh$ = SDL_NumJoysticks$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNameForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$2,"SDL_JoystickNameForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickNameForIndex(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickNameForIndex(int device_index) {
        var mh$ = SDL_JoystickNameForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickPathForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$3,"SDL_JoystickPathForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickPathForIndex(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickPathForIndex(int device_index) {
        var mh$ = SDL_JoystickPathForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDevicePlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$4,"SDL_JoystickGetDevicePlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetDevicePlayerIndex(int device_index);
     * }
     */
    public static int SDL_JoystickGetDevicePlayerIndex(int device_index) {
        var mh$ = SDL_JoystickGetDevicePlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$6,"SDL_JoystickGetDeviceGUID");
    }
    /**
     * {@snippet :
     * SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickGetDeviceGUID(SegmentAllocator allocator, int device_index) {
        var mh$ = SDL_JoystickGetDeviceGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$1,"SDL_JoystickGetDeviceVendor");
    }
    /**
     * {@snippet :
     * Uint16 SDL_JoystickGetDeviceVendor(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceVendor(int device_index) {
        var mh$ = SDL_JoystickGetDeviceVendor$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$2,"SDL_JoystickGetDeviceProduct");
    }
    /**
     * {@snippet :
     * Uint16 SDL_JoystickGetDeviceProduct(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceProduct(int device_index) {
        var mh$ = SDL_JoystickGetDeviceProduct$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$3,"SDL_JoystickGetDeviceProductVersion");
    }
    /**
     * {@snippet :
     * Uint16 SDL_JoystickGetDeviceProductVersion(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceProductVersion(int device_index) {
        var mh$ = SDL_JoystickGetDeviceProductVersion$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceType$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$4,"SDL_JoystickGetDeviceType");
    }
    /**
     * {@snippet :
     * SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);
     * }
     */
    public static int SDL_JoystickGetDeviceType(int device_index) {
        var mh$ = SDL_JoystickGetDeviceType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$5,"SDL_JoystickGetDeviceInstanceID");
    }
    /**
     * {@snippet :
     * SDL_JoystickID SDL_JoystickGetDeviceInstanceID(int device_index);
     * }
     */
    public static int SDL_JoystickGetDeviceInstanceID(int device_index) {
        var mh$ = SDL_JoystickGetDeviceInstanceID$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$0,"SDL_JoystickOpen");
    }
    /**
     * {@snippet :
     * SDL_Joystick* SDL_JoystickOpen(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickOpen(int device_index) {
        var mh$ = SDL_JoystickOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$1,"SDL_JoystickFromInstanceID");
    }
    /**
     * {@snippet :
     * SDL_Joystick* SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);
     * }
     */
    public static MemorySegment SDL_JoystickFromInstanceID(int instance_id) {
        var mh$ = SDL_JoystickFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(instance_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickFromPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$2,"SDL_JoystickFromPlayerIndex");
    }
    /**
     * {@snippet :
     * SDL_Joystick* SDL_JoystickFromPlayerIndex(int player_index);
     * }
     */
    public static MemorySegment SDL_JoystickFromPlayerIndex(int player_index) {
        var mh$ = SDL_JoystickFromPlayerIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickAttachVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$4,"SDL_JoystickAttachVirtual");
    }
    /**
     * {@snippet :
     * int SDL_JoystickAttachVirtual(SDL_JoystickType type, int naxes, int nbuttons, int nhats);
     * }
     */
    public static int SDL_JoystickAttachVirtual(int type, int naxes, int nbuttons, int nhats) {
        var mh$ = SDL_JoystickAttachVirtual$MH();
        try {
            return (int)mh$.invokeExact(type, naxes, nbuttons, nhats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickAttachVirtualEx$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$5,"SDL_JoystickAttachVirtualEx");
    }
    /**
     * {@snippet :
     * int SDL_JoystickAttachVirtualEx(const SDL_VirtualJoystickDesc* desc);
     * }
     */
    public static int SDL_JoystickAttachVirtualEx(MemorySegment desc) {
        var mh$ = SDL_JoystickAttachVirtualEx$MH();
        try {
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickDetachVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$0,"SDL_JoystickDetachVirtual");
    }
    /**
     * {@snippet :
     * int SDL_JoystickDetachVirtual(int device_index);
     * }
     */
    public static int SDL_JoystickDetachVirtual(int device_index) {
        var mh$ = SDL_JoystickDetachVirtual$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickIsVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$1,"SDL_JoystickIsVirtual");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_JoystickIsVirtual(int device_index);
     * }
     */
    public static int SDL_JoystickIsVirtual(int device_index) {
        var mh$ = SDL_JoystickIsVirtual$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$3,"SDL_JoystickSetVirtualAxis");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualAxis(SDL_Joystick* joystick, int axis, Sint16 value);
     * }
     */
    public static int SDL_JoystickSetVirtualAxis(MemorySegment joystick, int axis, short value) {
        var mh$ = SDL_JoystickSetVirtualAxis$MH();
        try {
            return (int)mh$.invokeExact(joystick, axis, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualButton$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$5,"SDL_JoystickSetVirtualButton");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualButton(SDL_Joystick* joystick, int button, Uint8 value);
     * }
     */
    public static int SDL_JoystickSetVirtualButton(MemorySegment joystick, int button, byte value) {
        var mh$ = SDL_JoystickSetVirtualButton$MH();
        try {
            return (int)mh$.invokeExact(joystick, button, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualHat$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$0,"SDL_JoystickSetVirtualHat");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualHat(SDL_Joystick* joystick, int hat, Uint8 value);
     * }
     */
    public static int SDL_JoystickSetVirtualHat(MemorySegment joystick, int hat, byte value) {
        var mh$ = SDL_JoystickSetVirtualHat$MH();
        try {
            return (int)mh$.invokeExact(joystick, hat, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickName$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$1,"SDL_JoystickName");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickName(SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickName(MemorySegment joystick) {
        var mh$ = SDL_JoystickName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickPath$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$2,"SDL_JoystickPath");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickPath(SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickPath(MemorySegment joystick) {
        var mh$ = SDL_JoystickPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$3,"SDL_JoystickGetPlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetPlayerIndex(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetPlayerIndex(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetPlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$4,"SDL_JoystickSetPlayerIndex");
    }
    /**
     * {@snippet :
     * void SDL_JoystickSetPlayerIndex(SDL_Joystick* joystick, int player_index);
     * }
     */
    public static void SDL_JoystickSetPlayerIndex(MemorySegment joystick, int player_index) {
        var mh$ = SDL_JoystickSetPlayerIndex$MH();
        try {
            mh$.invokeExact(joystick, player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$5,"SDL_JoystickGetGUID");
    }
    /**
     * {@snippet :
     * SDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickGetGUID(SegmentAllocator allocator, MemorySegment joystick) {
        var mh$ = SDL_JoystickGetGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$0,"SDL_JoystickGetVendor");
    }
    /**
     * {@snippet :
     * Uint16 SDL_JoystickGetVendor(SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetVendor(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetVendor$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$1,"SDL_JoystickGetProduct");
    }
    /**
     * {@snippet :
     * Uint16 SDL_JoystickGetProduct(SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetProduct(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetProduct$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$2,"SDL_JoystickGetProductVersion");
    }
    /**
     * {@snippet :
     * Uint16 SDL_JoystickGetProductVersion(SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetProductVersion(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetProductVersion$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetFirmwareVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$3,"SDL_JoystickGetFirmwareVersion");
    }
    /**
     * {@snippet :
     * Uint16 SDL_JoystickGetFirmwareVersion(SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetFirmwareVersion(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetFirmwareVersion$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetSerial$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$4,"SDL_JoystickGetSerial");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickGetSerial(SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickGetSerial(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetSerial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$5,"SDL_JoystickGetType");
    }
    /**
     * {@snippet :
     * SDL_JoystickType SDL_JoystickGetType(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetType(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetType$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUIDString$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$0,"SDL_JoystickGetGUIDString");
    }
    /**
     * {@snippet :
     * void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char* pszGUID, int cbGUID);
     * }
     */
    public static void SDL_JoystickGetGUIDString(MemorySegment guid, MemorySegment pszGUID, int cbGUID) {
        var mh$ = SDL_JoystickGetGUIDString$MH();
        try {
            mh$.invokeExact(guid, pszGUID, cbGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUIDFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"SDL_JoystickGetGUIDFromString");
    }
    /**
     * {@snippet :
     * SDL_JoystickGUID SDL_JoystickGetGUIDFromString(char* pchGUID);
     * }
     */
    public static MemorySegment SDL_JoystickGetGUIDFromString(SegmentAllocator allocator, MemorySegment pchGUID) {
        var mh$ = SDL_JoystickGetGUIDFromString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pchGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetJoystickGUIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$3,"SDL_GetJoystickGUIDInfo");
    }
    /**
     * {@snippet :
     * void SDL_GetJoystickGUIDInfo(SDL_JoystickGUID guid, Uint16* vendor, Uint16* product, Uint16* version, Uint16* crc16);
     * }
     */
    public static void SDL_GetJoystickGUIDInfo(MemorySegment guid, MemorySegment vendor, MemorySegment product, MemorySegment version, MemorySegment crc16) {
        var mh$ = SDL_GetJoystickGUIDInfo$MH();
        try {
            mh$.invokeExact(guid, vendor, product, version, crc16);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAttached$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$4,"SDL_JoystickGetAttached");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_JoystickGetAttached(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetAttached(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetAttached$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$5,"SDL_JoystickInstanceID");
    }
    /**
     * {@snippet :
     * SDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickInstanceID(MemorySegment joystick) {
        var mh$ = SDL_JoystickInstanceID$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumAxes$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$0,"SDL_JoystickNumAxes");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumAxes(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumAxes(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumAxes$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumBalls$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$1,"SDL_JoystickNumBalls");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumBalls(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumBalls(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumBalls$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumHats$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"SDL_JoystickNumHats");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumHats(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumHats(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumHats$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumButtons$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"SDL_JoystickNumButtons");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumButtons(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumButtons(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumButtons$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$4,"SDL_JoystickUpdate");
    }
    /**
     * {@snippet :
     * void SDL_JoystickUpdate();
     * }
     */
    public static void SDL_JoystickUpdate() {
        var mh$ = SDL_JoystickUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickEventState$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"SDL_JoystickEventState");
    }
    /**
     * {@snippet :
     * int SDL_JoystickEventState(int state);
     * }
     */
    public static int SDL_JoystickEventState(int state) {
        var mh$ = SDL_JoystickEventState$MH();
        try {
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"SDL_JoystickGetAxis");
    }
    /**
     * {@snippet :
     * Sint16 SDL_JoystickGetAxis(SDL_Joystick* joystick, int axis);
     * }
     */
    public static short SDL_JoystickGetAxis(MemorySegment joystick, int axis) {
        var mh$ = SDL_JoystickGetAxis$MH();
        try {
            return (short)mh$.invokeExact(joystick, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAxisInitialState$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$3,"SDL_JoystickGetAxisInitialState");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_JoystickGetAxisInitialState(SDL_Joystick* joystick, int axis, Sint16* state);
     * }
     */
    public static int SDL_JoystickGetAxisInitialState(MemorySegment joystick, int axis, MemorySegment state) {
        var mh$ = SDL_JoystickGetAxisInitialState$MH();
        try {
            return (int)mh$.invokeExact(joystick, axis, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetHat$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$5,"SDL_JoystickGetHat");
    }
    /**
     * {@snippet :
     * Uint8 SDL_JoystickGetHat(SDL_Joystick* joystick, int hat);
     * }
     */
    public static byte SDL_JoystickGetHat(MemorySegment joystick, int hat) {
        var mh$ = SDL_JoystickGetHat$MH();
        try {
            return (byte)mh$.invokeExact(joystick, hat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetBall$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$0,"SDL_JoystickGetBall");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetBall(SDL_Joystick* joystick, int ball, int* dx, int* dy);
     * }
     */
    public static int SDL_JoystickGetBall(MemorySegment joystick, int ball, MemorySegment dx, MemorySegment dy) {
        var mh$ = SDL_JoystickGetBall$MH();
        try {
            return (int)mh$.invokeExact(joystick, ball, dx, dy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetButton$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"SDL_JoystickGetButton");
    }
    /**
     * {@snippet :
     * Uint8 SDL_JoystickGetButton(SDL_Joystick* joystick, int button);
     * }
     */
    public static byte SDL_JoystickGetButton(MemorySegment joystick, int button) {
        var mh$ = SDL_JoystickGetButton$MH();
        try {
            return (byte)mh$.invokeExact(joystick, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"SDL_JoystickRumble");
    }
    /**
     * {@snippet :
     * int SDL_JoystickRumble(SDL_Joystick* joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
     * }
     */
    public static int SDL_JoystickRumble(MemorySegment joystick, short low_frequency_rumble, short high_frequency_rumble, int duration_ms) {
        var mh$ = SDL_JoystickRumble$MH();
        try {
            return (int)mh$.invokeExact(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$4,"SDL_JoystickRumbleTriggers");
    }
    /**
     * {@snippet :
     * int SDL_JoystickRumbleTriggers(SDL_Joystick* joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
     * }
     */
    public static int SDL_JoystickRumbleTriggers(MemorySegment joystick, short left_rumble, short right_rumble, int duration_ms) {
        var mh$ = SDL_JoystickRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(joystick, left_rumble, right_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasLED$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"SDL_JoystickHasLED");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_JoystickHasLED(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasLED(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasLED$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$0,"SDL_JoystickHasRumble");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_JoystickHasRumble(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasRumble(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasRumble$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$1,"SDL_JoystickHasRumbleTriggers");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_JoystickHasRumbleTriggers(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasRumbleTriggers(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetLED$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$2,"SDL_JoystickSetLED");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetLED(SDL_Joystick* joystick, Uint8 red, Uint8 green, Uint8 blue);
     * }
     */
    public static int SDL_JoystickSetLED(MemorySegment joystick, byte red, byte green, byte blue) {
        var mh$ = SDL_JoystickSetLED$MH();
        try {
            return (int)mh$.invokeExact(joystick, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSendEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"SDL_JoystickSendEffect");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSendEffect(SDL_Joystick* joystick, void* data, int size);
     * }
     */
    public static int SDL_JoystickSendEffect(MemorySegment joystick, MemorySegment data, int size) {
        var mh$ = SDL_JoystickSendEffect$MH();
        try {
            return (int)mh$.invokeExact(joystick, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickClose$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$4,"SDL_JoystickClose");
    }
    /**
     * {@snippet :
     * void SDL_JoystickClose(SDL_Joystick* joystick);
     * }
     */
    public static void SDL_JoystickClose(MemorySegment joystick) {
        var mh$ = SDL_JoystickClose$MH();
        try {
            mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickCurrentPowerLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$5,"SDL_JoystickCurrentPowerLevel");
    }
    /**
     * {@snippet :
     * SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickCurrentPowerLevel(MemorySegment joystick) {
        var mh$ = SDL_JoystickCurrentPowerLevel$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_SensorID;
     * }
     */
    public static final OfInt SDL_SensorID = JAVA_INT;
    /**
     * {@snippet :
     * enum .SDL_SENSOR_INVALID = -1;
     * }
     */
    public static int SDL_SENSOR_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSOR_UNKNOWN = 0;
     * }
     */
    public static int SDL_SENSOR_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSOR_ACCEL = 1;
     * }
     */
    public static int SDL_SENSOR_ACCEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSOR_GYRO = 2;
     * }
     */
    public static int SDL_SENSOR_GYRO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSOR_ACCEL_L = 3;
     * }
     */
    public static int SDL_SENSOR_ACCEL_L() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSOR_GYRO_L = 4;
     * }
     */
    public static int SDL_SENSOR_GYRO_L() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSOR_ACCEL_R = 5;
     * }
     */
    public static int SDL_SENSOR_ACCEL_R() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSOR_GYRO_R = 6;
     * }
     */
    public static int SDL_SENSOR_GYRO_R() {
        return (int)6L;
    }
    public static MethodHandle SDL_LockSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$0,"SDL_LockSensors");
    }
    /**
     * {@snippet :
     * void SDL_LockSensors();
     * }
     */
    public static void SDL_LockSensors() {
        var mh$ = SDL_LockSensors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$1,"SDL_UnlockSensors");
    }
    /**
     * {@snippet :
     * void SDL_UnlockSensors();
     * }
     */
    public static void SDL_UnlockSensors() {
        var mh$ = SDL_UnlockSensors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NumSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$2,"SDL_NumSensors");
    }
    /**
     * {@snippet :
     * int SDL_NumSensors();
     * }
     */
    public static int SDL_NumSensors() {
        var mh$ = SDL_NumSensors$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceName$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$3,"SDL_SensorGetDeviceName");
    }
    /**
     * {@snippet :
     * char* SDL_SensorGetDeviceName(int device_index);
     * }
     */
    public static MemorySegment SDL_SensorGetDeviceName(int device_index) {
        var mh$ = SDL_SensorGetDeviceName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceType$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$4,"SDL_SensorGetDeviceType");
    }
    /**
     * {@snippet :
     * SDL_SensorType SDL_SensorGetDeviceType(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceType(int device_index) {
        var mh$ = SDL_SensorGetDeviceType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceNonPortableType$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$5,"SDL_SensorGetDeviceNonPortableType");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDeviceNonPortableType(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceNonPortableType(int device_index) {
        var mh$ = SDL_SensorGetDeviceNonPortableType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$0,"SDL_SensorGetDeviceInstanceID");
    }
    /**
     * {@snippet :
     * SDL_SensorID SDL_SensorGetDeviceInstanceID(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceInstanceID(int device_index) {
        var mh$ = SDL_SensorGetDeviceInstanceID$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$1,"SDL_SensorOpen");
    }
    /**
     * {@snippet :
     * SDL_Sensor* SDL_SensorOpen(int device_index);
     * }
     */
    public static MemorySegment SDL_SensorOpen(int device_index) {
        var mh$ = SDL_SensorOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$2,"SDL_SensorFromInstanceID");
    }
    /**
     * {@snippet :
     * SDL_Sensor* SDL_SensorFromInstanceID(SDL_SensorID instance_id);
     * }
     */
    public static MemorySegment SDL_SensorFromInstanceID(int instance_id) {
        var mh$ = SDL_SensorFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(instance_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetName$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$3,"SDL_SensorGetName");
    }
    /**
     * {@snippet :
     * char* SDL_SensorGetName(SDL_Sensor* sensor);
     * }
     */
    public static MemorySegment SDL_SensorGetName(MemorySegment sensor) {
        var mh$ = SDL_SensorGetName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$4,"SDL_SensorGetType");
    }
    /**
     * {@snippet :
     * SDL_SensorType SDL_SensorGetType(SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetType(MemorySegment sensor) {
        var mh$ = SDL_SensorGetType$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetNonPortableType$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$5,"SDL_SensorGetNonPortableType");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetNonPortableType(SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetNonPortableType(MemorySegment sensor) {
        var mh$ = SDL_SensorGetNonPortableType$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$0,"SDL_SensorGetInstanceID");
    }
    /**
     * {@snippet :
     * SDL_SensorID SDL_SensorGetInstanceID(SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetInstanceID(MemorySegment sensor) {
        var mh$ = SDL_SensorGetInstanceID$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$1,"SDL_SensorGetData");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetData(SDL_Sensor* sensor, float* data, int num_values);
     * }
     */
    public static int SDL_SensorGetData(MemorySegment sensor, MemorySegment data, int num_values) {
        var mh$ = SDL_SensorGetData$MH();
        try {
            return (int)mh$.invokeExact(sensor, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDataWithTimestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$2,"SDL_SensorGetDataWithTimestamp");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDataWithTimestamp(SDL_Sensor* sensor, Uint64* timestamp, float* data, int num_values);
     * }
     */
    public static int SDL_SensorGetDataWithTimestamp(MemorySegment sensor, MemorySegment timestamp, MemorySegment data, int num_values) {
        var mh$ = SDL_SensorGetDataWithTimestamp$MH();
        try {
            return (int)mh$.invokeExact(sensor, timestamp, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorClose$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$3,"SDL_SensorClose");
    }
    /**
     * {@snippet :
     * void SDL_SensorClose(SDL_Sensor* sensor);
     * }
     */
    public static void SDL_SensorClose(MemorySegment sensor) {
        var mh$ = SDL_SensorClose$MH();
        try {
            mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$4,"SDL_SensorUpdate");
    }
    /**
     * {@snippet :
     * void SDL_SensorUpdate();
     * }
     */
    public static void SDL_SensorUpdate() {
        var mh$ = SDL_SensorUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_XBOX360 = 1;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_XBOX360() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_XBOXONE = 2;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_XBOXONE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_PS3 = 3;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS3() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_PS4 = 4;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS4() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_VIRTUAL = 6;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_VIRTUAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_PS5 = 7;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS5() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_AMAZON_LUNA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_GOOGLE_STADIA() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_NVIDIA_SHIELD = 10;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NVIDIA_SHIELD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 11;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 12;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 13;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BINDTYPE_NONE = 0;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BINDTYPE_BUTTON = 1;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_BUTTON() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BINDTYPE_AXIS = 2;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_AXIS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BINDTYPE_HAT = 3;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_HAT() {
        return (int)3L;
    }
    public static MethodHandle SDL_GameControllerAddMappingsFromRW$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$1,"SDL_GameControllerAddMappingsFromRW");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerAddMappingsFromRW(SDL_RWops* rw, int freerw);
     * }
     */
    public static int SDL_GameControllerAddMappingsFromRW(MemorySegment rw, int freerw) {
        var mh$ = SDL_GameControllerAddMappingsFromRW$MH();
        try {
            return (int)mh$.invokeExact(rw, freerw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerAddMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$2,"SDL_GameControllerAddMapping");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerAddMapping(char* mappingString);
     * }
     */
    public static int SDL_GameControllerAddMapping(MemorySegment mappingString) {
        var mh$ = SDL_GameControllerAddMapping$MH();
        try {
            return (int)mh$.invokeExact(mappingString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerNumMappings$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$3,"SDL_GameControllerNumMappings");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerNumMappings();
     * }
     */
    public static int SDL_GameControllerNumMappings() {
        var mh$ = SDL_GameControllerNumMappings$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$4,"SDL_GameControllerMappingForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForIndex(int mapping_index);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForIndex(int mapping_index) {
        var mh$ = SDL_GameControllerMappingForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mapping_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$6,"SDL_GameControllerMappingForGUID");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForGUID(MemorySegment guid) {
        var mh$ = SDL_GameControllerMappingForGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(guid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$0,"SDL_GameControllerMapping");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMapping(SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerMapping(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerMapping$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsGameController$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$1,"SDL_IsGameController");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IsGameController(int joystick_index);
     * }
     */
    public static int SDL_IsGameController(int joystick_index) {
        var mh$ = SDL_IsGameController$MH();
        try {
            return (int)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerNameForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$2,"SDL_GameControllerNameForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerNameForIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerNameForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerNameForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerPathForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$3,"SDL_GameControllerPathForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerPathForIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerPathForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerPathForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerTypeForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$4,"SDL_GameControllerTypeForIndex");
    }
    /**
     * {@snippet :
     * SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);
     * }
     */
    public static int SDL_GameControllerTypeForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerTypeForIndex$MH();
        try {
            return (int)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForDeviceIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$5,"SDL_GameControllerMappingForDeviceIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForDeviceIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForDeviceIndex(int joystick_index) {
        var mh$ = SDL_GameControllerMappingForDeviceIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$0,"SDL_GameControllerOpen");
    }
    /**
     * {@snippet :
     * SDL_GameController* SDL_GameControllerOpen(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerOpen(int joystick_index) {
        var mh$ = SDL_GameControllerOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$1,"SDL_GameControllerFromInstanceID");
    }
    /**
     * {@snippet :
     * SDL_GameController* SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);
     * }
     */
    public static MemorySegment SDL_GameControllerFromInstanceID(int joyid) {
        var mh$ = SDL_GameControllerFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joyid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerFromPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$2,"SDL_GameControllerFromPlayerIndex");
    }
    /**
     * {@snippet :
     * SDL_GameController* SDL_GameControllerFromPlayerIndex(int player_index);
     * }
     */
    public static MemorySegment SDL_GameControllerFromPlayerIndex(int player_index) {
        var mh$ = SDL_GameControllerFromPlayerIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerName$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$3,"SDL_GameControllerName");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerName(SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerName(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerPath$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$4,"SDL_GameControllerPath");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerPath(SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerPath(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$5,"SDL_GameControllerGetType");
    }
    /**
     * {@snippet :
     * SDL_GameControllerType SDL_GameControllerGetType(SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetType(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetType$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$0,"SDL_GameControllerGetPlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetPlayerIndex(SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetPlayerIndex(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetPlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$1,"SDL_GameControllerSetPlayerIndex");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerSetPlayerIndex(SDL_GameController* gamecontroller, int player_index);
     * }
     */
    public static void SDL_GameControllerSetPlayerIndex(MemorySegment gamecontroller, int player_index) {
        var mh$ = SDL_GameControllerSetPlayerIndex$MH();
        try {
            mh$.invokeExact(gamecontroller, player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$2,"SDL_GameControllerGetVendor");
    }
    /**
     * {@snippet :
     * Uint16 SDL_GameControllerGetVendor(SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetVendor(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetVendor$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$3,"SDL_GameControllerGetProduct");
    }
    /**
     * {@snippet :
     * Uint16 SDL_GameControllerGetProduct(SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetProduct(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetProduct$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$4,"SDL_GameControllerGetProductVersion");
    }
    /**
     * {@snippet :
     * Uint16 SDL_GameControllerGetProductVersion(SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetProductVersion(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetProductVersion$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetFirmwareVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$5,"SDL_GameControllerGetFirmwareVersion");
    }
    /**
     * {@snippet :
     * Uint16 SDL_GameControllerGetFirmwareVersion(SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetFirmwareVersion(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetFirmwareVersion$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSerial$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$0,"SDL_GameControllerGetSerial");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetSerial(SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerGetSerial(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetSerial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAttached$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$1,"SDL_GameControllerGetAttached");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerGetAttached(SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetAttached(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetAttached$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetJoystick$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$2,"SDL_GameControllerGetJoystick");
    }
    /**
     * {@snippet :
     * SDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerGetJoystick(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetJoystick$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerEventState$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$3,"SDL_GameControllerEventState");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerEventState(int state);
     * }
     */
    public static int SDL_GameControllerEventState(int state) {
        var mh$ = SDL_GameControllerEventState$MH();
        try {
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$4,"SDL_GameControllerUpdate");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerUpdate();
     * }
     */
    public static void SDL_GameControllerUpdate() {
        var mh$ = SDL_GameControllerUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_INVALID = -1;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_LEFTX = 0;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_LEFTX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_LEFTY = 1;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_LEFTY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_RIGHTX = 2;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_RIGHTX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_RIGHTY = 3;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_RIGHTY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_TRIGGERLEFT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_TRIGGERRIGHT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_AXIS_MAX = 6;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_MAX() {
        return (int)6L;
    }
    public static MethodHandle SDL_GameControllerGetAxisFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$5,"SDL_GameControllerGetAxisFromString");
    }
    /**
     * {@snippet :
     * SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(char* str);
     * }
     */
    public static int SDL_GameControllerGetAxisFromString(MemorySegment str) {
        var mh$ = SDL_GameControllerGetAxisFromString$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetStringForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$0,"SDL_GameControllerGetStringForAxis");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetStringForAxis(int axis) {
        var mh$ = SDL_GameControllerGetStringForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetBindForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$2,"SDL_GameControllerGetBindForAxis");
    }
    /**
     * {@snippet :
     * SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetBindForAxis(SegmentAllocator allocator, MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetBindForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$3,"SDL_GameControllerHasAxis");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerHasAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);
     * }
     */
    public static int SDL_GameControllerHasAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerHasAxis$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$4,"SDL_GameControllerGetAxis");
    }
    /**
     * {@snippet :
     * Sint16 SDL_GameControllerGetAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);
     * }
     */
    public static short SDL_GameControllerGetAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetAxis$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_INVALID = -1;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_A = 0;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_A() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_B = 1;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_B() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_X = 2;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_X() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_Y = 3;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_Y() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_BACK = 4;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_BACK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_GUIDE = 5;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_GUIDE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_START = 6;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_START() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_LEFTSTICK = 7;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_LEFTSTICK() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_RIGHTSTICK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_LEFTSHOULDER() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_RIGHTSHOULDER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_DPAD_UP = 11;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_UP() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_DOWN() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_LEFT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_RIGHT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_MISC1 = 15;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_MISC1() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_PADDLE1 = 16;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE1() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_PADDLE2 = 17;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE2() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_PADDLE3 = 18;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE3() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_PADDLE4 = 19;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE4() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_TOUCHPAD = 20;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_TOUCHPAD() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLER_BUTTON_MAX = 21;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_MAX() {
        return (int)21L;
    }
    public static MethodHandle SDL_GameControllerGetButtonFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$5,"SDL_GameControllerGetButtonFromString");
    }
    /**
     * {@snippet :
     * SDL_GameControllerButton SDL_GameControllerGetButtonFromString(char* str);
     * }
     */
    public static int SDL_GameControllerGetButtonFromString(MemorySegment str) {
        var mh$ = SDL_GameControllerGetButtonFromString$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetStringForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$0,"SDL_GameControllerGetStringForButton");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetStringForButton(int button) {
        var mh$ = SDL_GameControllerGetStringForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetBindForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$1,"SDL_GameControllerGetBindForButton");
    }
    /**
     * {@snippet :
     * SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetBindForButton(SegmentAllocator allocator, MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetBindForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasButton$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$2,"SDL_GameControllerHasButton");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerHasButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);
     * }
     */
    public static int SDL_GameControllerHasButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerHasButton$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetButton$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$3,"SDL_GameControllerGetButton");
    }
    /**
     * {@snippet :
     * Uint8 SDL_GameControllerGetButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);
     * }
     */
    public static byte SDL_GameControllerGetButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetButton$MH();
        try {
            return (byte)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetNumTouchpads$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$4,"SDL_GameControllerGetNumTouchpads");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetNumTouchpads(SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetNumTouchpads(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetNumTouchpads$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetNumTouchpadFingers$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$5,"SDL_GameControllerGetNumTouchpadFingers");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetNumTouchpadFingers(SDL_GameController* gamecontroller, int touchpad);
     * }
     */
    public static int SDL_GameControllerGetNumTouchpadFingers(MemorySegment gamecontroller, int touchpad) {
        var mh$ = SDL_GameControllerGetNumTouchpadFingers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, touchpad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetTouchpadFinger$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$1,"SDL_GameControllerGetTouchpadFinger");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetTouchpadFinger(SDL_GameController* gamecontroller, int touchpad, int finger, Uint8* state, float* x, float* y, float* pressure);
     * }
     */
    public static int SDL_GameControllerGetTouchpadFinger(MemorySegment gamecontroller, int touchpad, int finger, MemorySegment state, MemorySegment x, MemorySegment y, MemorySegment pressure) {
        var mh$ = SDL_GameControllerGetTouchpadFinger$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, touchpad, finger, state, x, y, pressure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasSensor$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$2,"SDL_GameControllerHasSensor");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerHasSensor(SDL_GameController* gamecontroller, SDL_SensorType type);
     * }
     */
    public static int SDL_GameControllerHasSensor(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerHasSensor$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetSensorEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$3,"SDL_GameControllerSetSensorEnabled");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSetSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type, SDL_bool enabled);
     * }
     */
    public static int SDL_GameControllerSetSensorEnabled(MemorySegment gamecontroller, int type, int enabled) {
        var mh$ = SDL_GameControllerSetSensorEnabled$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerIsSensorEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$4,"SDL_GameControllerIsSensorEnabled");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerIsSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type);
     * }
     */
    public static int SDL_GameControllerIsSensorEnabled(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerIsSensorEnabled$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorDataRate$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$6,"SDL_GameControllerGetSensorDataRate");
    }
    /**
     * {@snippet :
     * float SDL_GameControllerGetSensorDataRate(SDL_GameController* gamecontroller, SDL_SensorType type);
     * }
     */
    public static float SDL_GameControllerGetSensorDataRate(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerGetSensorDataRate$MH();
        try {
            return (float)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorData$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$1,"SDL_GameControllerGetSensorData");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetSensorData(SDL_GameController* gamecontroller, SDL_SensorType type, float* data, int num_values);
     * }
     */
    public static int SDL_GameControllerGetSensorData(MemorySegment gamecontroller, int type, MemorySegment data, int num_values) {
        var mh$ = SDL_GameControllerGetSensorData$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorDataWithTimestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$2,"SDL_GameControllerGetSensorDataWithTimestamp");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetSensorDataWithTimestamp(SDL_GameController* gamecontroller, SDL_SensorType type, Uint64* timestamp, float* data, int num_values);
     * }
     */
    public static int SDL_GameControllerGetSensorDataWithTimestamp(MemorySegment gamecontroller, int type, MemorySegment timestamp, MemorySegment data, int num_values) {
        var mh$ = SDL_GameControllerGetSensorDataWithTimestamp$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, timestamp, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$3,"SDL_GameControllerRumble");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerRumble(SDL_GameController* gamecontroller, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
     * }
     */
    public static int SDL_GameControllerRumble(MemorySegment gamecontroller, short low_frequency_rumble, short high_frequency_rumble, int duration_ms) {
        var mh$ = SDL_GameControllerRumble$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, low_frequency_rumble, high_frequency_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$4,"SDL_GameControllerRumbleTriggers");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerRumbleTriggers(SDL_GameController* gamecontroller, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
     * }
     */
    public static int SDL_GameControllerRumbleTriggers(MemorySegment gamecontroller, short left_rumble, short right_rumble, int duration_ms) {
        var mh$ = SDL_GameControllerRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, left_rumble, right_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasLED$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$5,"SDL_GameControllerHasLED");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerHasLED(SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasLED(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasLED$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$0,"SDL_GameControllerHasRumble");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerHasRumble(SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasRumble(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasRumble$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$1,"SDL_GameControllerHasRumbleTriggers");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GameControllerHasRumbleTriggers(SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasRumbleTriggers(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetLED$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$2,"SDL_GameControllerSetLED");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSetLED(SDL_GameController* gamecontroller, Uint8 red, Uint8 green, Uint8 blue);
     * }
     */
    public static int SDL_GameControllerSetLED(MemorySegment gamecontroller, byte red, byte green, byte blue) {
        var mh$ = SDL_GameControllerSetLED$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSendEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$3,"SDL_GameControllerSendEffect");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSendEffect(SDL_GameController* gamecontroller, void* data, int size);
     * }
     */
    public static int SDL_GameControllerSendEffect(MemorySegment gamecontroller, MemorySegment data, int size) {
        var mh$ = SDL_GameControllerSendEffect$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerClose$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$4,"SDL_GameControllerClose");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerClose(SDL_GameController* gamecontroller);
     * }
     */
    public static void SDL_GameControllerClose(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerClose$MH();
        try {
            mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAppleSFSymbolsNameForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$5,"SDL_GameControllerGetAppleSFSymbolsNameForButton");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetAppleSFSymbolsNameForButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetAppleSFSymbolsNameForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAppleSFSymbolsNameForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$0,"SDL_GameControllerGetAppleSFSymbolsNameForAxis");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetAppleSFSymbolsNameForAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetAppleSFSymbolsNameForAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetAppleSFSymbolsNameForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long SDL_TouchID;
     * }
     */
    public static final OfLong SDL_TouchID = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long SDL_FingerID;
     * }
     */
    public static final OfLong SDL_FingerID = JAVA_LONG;
    /**
     * {@snippet :
     * enum .SDL_TOUCH_DEVICE_INVALID = -1;
     * }
     */
    public static int SDL_TOUCH_DEVICE_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .SDL_TOUCH_DEVICE_DIRECT = 0;
     * }
     */
    public static int SDL_TOUCH_DEVICE_DIRECT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1;
     * }
     */
    public static int SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2;
     * }
     */
    public static int SDL_TOUCH_DEVICE_INDIRECT_RELATIVE() {
        return (int)2L;
    }
    public static MethodHandle SDL_GetNumTouchDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$0,"SDL_GetNumTouchDevices");
    }
    /**
     * {@snippet :
     * int SDL_GetNumTouchDevices();
     * }
     */
    public static int SDL_GetNumTouchDevices() {
        var mh$ = SDL_GetNumTouchDevices$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTouchDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$2,"SDL_GetTouchDevice");
    }
    /**
     * {@snippet :
     * SDL_TouchID SDL_GetTouchDevice(int index);
     * }
     */
    public static long SDL_GetTouchDevice(int index) {
        var mh$ = SDL_GetTouchDevice$MH();
        try {
            return (long)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTouchName$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$3,"SDL_GetTouchName");
    }
    /**
     * {@snippet :
     * char* SDL_GetTouchName(int index);
     * }
     */
    public static MemorySegment SDL_GetTouchName(int index) {
        var mh$ = SDL_GetTouchName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTouchDeviceType$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$5,"SDL_GetTouchDeviceType");
    }
    /**
     * {@snippet :
     * SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);
     * }
     */
    public static int SDL_GetTouchDeviceType(long touchID) {
        var mh$ = SDL_GetTouchDeviceType$MH();
        try {
            return (int)mh$.invokeExact(touchID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetNumTouchFingers$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$0,"SDL_GetNumTouchFingers");
    }
    /**
     * {@snippet :
     * int SDL_GetNumTouchFingers(SDL_TouchID touchID);
     * }
     */
    public static int SDL_GetNumTouchFingers(long touchID) {
        var mh$ = SDL_GetNumTouchFingers$MH();
        try {
            return (int)mh$.invokeExact(touchID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTouchFinger$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$2,"SDL_GetTouchFinger");
    }
    /**
     * {@snippet :
     * SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID, int index);
     * }
     */
    public static MemorySegment SDL_GetTouchFinger(long touchID, int index) {
        var mh$ = SDL_GetTouchFinger$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(touchID, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long SDL_GestureID;
     * }
     */
    public static final OfLong SDL_GestureID = JAVA_LONG;
    public static MethodHandle SDL_RecordGesture$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$3,"SDL_RecordGesture");
    }
    /**
     * {@snippet :
     * int SDL_RecordGesture(SDL_TouchID touchId);
     * }
     */
    public static int SDL_RecordGesture(long touchId) {
        var mh$ = SDL_RecordGesture$MH();
        try {
            return (int)mh$.invokeExact(touchId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SaveAllDollarTemplates$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$4,"SDL_SaveAllDollarTemplates");
    }
    /**
     * {@snippet :
     * int SDL_SaveAllDollarTemplates(SDL_RWops* dst);
     * }
     */
    public static int SDL_SaveAllDollarTemplates(MemorySegment dst) {
        var mh$ = SDL_SaveAllDollarTemplates$MH();
        try {
            return (int)mh$.invokeExact(dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SaveDollarTemplate$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$6,"SDL_SaveDollarTemplate");
    }
    /**
     * {@snippet :
     * int SDL_SaveDollarTemplate(SDL_GestureID gestureId, SDL_RWops* dst);
     * }
     */
    public static int SDL_SaveDollarTemplate(long gestureId, MemorySegment dst) {
        var mh$ = SDL_SaveDollarTemplate$MH();
        try {
            return (int)mh$.invokeExact(gestureId, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadDollarTemplates$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$0,"SDL_LoadDollarTemplates");
    }
    /**
     * {@snippet :
     * int SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops* src);
     * }
     */
    public static int SDL_LoadDollarTemplates(long touchId, MemorySegment src) {
        var mh$ = SDL_LoadDollarTemplates$MH();
        try {
            return (int)mh$.invokeExact(touchId, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_FIRSTEVENT = 0;
     * }
     */
    public static int SDL_FIRSTEVENT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_QUIT = 256;
     * }
     */
    public static int SDL_QUIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .SDL_APP_TERMINATING = 257;
     * }
     */
    public static int SDL_APP_TERMINATING() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * enum .SDL_APP_LOWMEMORY = 258;
     * }
     */
    public static int SDL_APP_LOWMEMORY() {
        return (int)258L;
    }
    /**
     * {@snippet :
     * enum .SDL_APP_WILLENTERBACKGROUND = 259;
     * }
     */
    public static int SDL_APP_WILLENTERBACKGROUND() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * enum .SDL_APP_DIDENTERBACKGROUND = 260;
     * }
     */
    public static int SDL_APP_DIDENTERBACKGROUND() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * enum .SDL_APP_WILLENTERFOREGROUND = 261;
     * }
     */
    public static int SDL_APP_WILLENTERFOREGROUND() {
        return (int)261L;
    }
    /**
     * {@snippet :
     * enum .SDL_APP_DIDENTERFOREGROUND = 262;
     * }
     */
    public static int SDL_APP_DIDENTERFOREGROUND() {
        return (int)262L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOCALECHANGED = 263;
     * }
     */
    public static int SDL_LOCALECHANGED() {
        return (int)263L;
    }
    /**
     * {@snippet :
     * enum .SDL_DISPLAYEVENT = 336;
     * }
     */
    public static int SDL_DISPLAYEVENT() {
        return (int)336L;
    }
    /**
     * {@snippet :
     * enum .SDL_WINDOWEVENT = 512;
     * }
     */
    public static int SDL_WINDOWEVENT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .SDL_SYSWMEVENT = 513;
     * }
     */
    public static int SDL_SYSWMEVENT() {
        return (int)513L;
    }
    /**
     * {@snippet :
     * enum .SDL_KEYDOWN = 768;
     * }
     */
    public static int SDL_KEYDOWN() {
        return (int)768L;
    }
    /**
     * {@snippet :
     * enum .SDL_KEYUP = 769;
     * }
     */
    public static int SDL_KEYUP() {
        return (int)769L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTEDITING = 770;
     * }
     */
    public static int SDL_TEXTEDITING() {
        return (int)770L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTINPUT = 771;
     * }
     */
    public static int SDL_TEXTINPUT() {
        return (int)771L;
    }
    /**
     * {@snippet :
     * enum .SDL_KEYMAPCHANGED = 772;
     * }
     */
    public static int SDL_KEYMAPCHANGED() {
        return (int)772L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTEDITING_EXT = 773;
     * }
     */
    public static int SDL_TEXTEDITING_EXT() {
        return (int)773L;
    }
    /**
     * {@snippet :
     * enum .SDL_MOUSEMOTION = 1024;
     * }
     */
    public static int SDL_MOUSEMOTION() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .SDL_MOUSEBUTTONDOWN = 1025;
     * }
     */
    public static int SDL_MOUSEBUTTONDOWN() {
        return (int)1025L;
    }
    /**
     * {@snippet :
     * enum .SDL_MOUSEBUTTONUP = 1026;
     * }
     */
    public static int SDL_MOUSEBUTTONUP() {
        return (int)1026L;
    }
    /**
     * {@snippet :
     * enum .SDL_MOUSEWHEEL = 1027;
     * }
     */
    public static int SDL_MOUSEWHEEL() {
        return (int)1027L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYAXISMOTION = 1536;
     * }
     */
    public static int SDL_JOYAXISMOTION() {
        return (int)1536L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYBALLMOTION = 1537;
     * }
     */
    public static int SDL_JOYBALLMOTION() {
        return (int)1537L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYHATMOTION = 1538;
     * }
     */
    public static int SDL_JOYHATMOTION() {
        return (int)1538L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYBUTTONDOWN = 1539;
     * }
     */
    public static int SDL_JOYBUTTONDOWN() {
        return (int)1539L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYBUTTONUP = 1540;
     * }
     */
    public static int SDL_JOYBUTTONUP() {
        return (int)1540L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYDEVICEADDED = 1541;
     * }
     */
    public static int SDL_JOYDEVICEADDED() {
        return (int)1541L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYDEVICEREMOVED = 1542;
     * }
     */
    public static int SDL_JOYDEVICEREMOVED() {
        return (int)1542L;
    }
    /**
     * {@snippet :
     * enum .SDL_JOYBATTERYUPDATED = 1543;
     * }
     */
    public static int SDL_JOYBATTERYUPDATED() {
        return (int)1543L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERAXISMOTION = 1616;
     * }
     */
    public static int SDL_CONTROLLERAXISMOTION() {
        return (int)1616L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERBUTTONDOWN = 1617;
     * }
     */
    public static int SDL_CONTROLLERBUTTONDOWN() {
        return (int)1617L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERBUTTONUP = 1618;
     * }
     */
    public static int SDL_CONTROLLERBUTTONUP() {
        return (int)1618L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERDEVICEADDED = 1619;
     * }
     */
    public static int SDL_CONTROLLERDEVICEADDED() {
        return (int)1619L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERDEVICEREMOVED = 1620;
     * }
     */
    public static int SDL_CONTROLLERDEVICEREMOVED() {
        return (int)1620L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERDEVICEREMAPPED = 1621;
     * }
     */
    public static int SDL_CONTROLLERDEVICEREMAPPED() {
        return (int)1621L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERTOUCHPADDOWN = 1622;
     * }
     */
    public static int SDL_CONTROLLERTOUCHPADDOWN() {
        return (int)1622L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERTOUCHPADMOTION = 1623;
     * }
     */
    public static int SDL_CONTROLLERTOUCHPADMOTION() {
        return (int)1623L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERTOUCHPADUP = 1624;
     * }
     */
    public static int SDL_CONTROLLERTOUCHPADUP() {
        return (int)1624L;
    }
    /**
     * {@snippet :
     * enum .SDL_CONTROLLERSENSORUPDATE = 1625;
     * }
     */
    public static int SDL_CONTROLLERSENSORUPDATE() {
        return (int)1625L;
    }
    /**
     * {@snippet :
     * enum .SDL_FINGERDOWN = 1792;
     * }
     */
    public static int SDL_FINGERDOWN() {
        return (int)1792L;
    }
    /**
     * {@snippet :
     * enum .SDL_FINGERUP = 1793;
     * }
     */
    public static int SDL_FINGERUP() {
        return (int)1793L;
    }
    /**
     * {@snippet :
     * enum .SDL_FINGERMOTION = 1794;
     * }
     */
    public static int SDL_FINGERMOTION() {
        return (int)1794L;
    }
    /**
     * {@snippet :
     * enum .SDL_DOLLARGESTURE = 2048;
     * }
     */
    public static int SDL_DOLLARGESTURE() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .SDL_DOLLARRECORD = 2049;
     * }
     */
    public static int SDL_DOLLARRECORD() {
        return (int)2049L;
    }
    /**
     * {@snippet :
     * enum .SDL_MULTIGESTURE = 2050;
     * }
     */
    public static int SDL_MULTIGESTURE() {
        return (int)2050L;
    }
    /**
     * {@snippet :
     * enum .SDL_CLIPBOARDUPDATE = 2304;
     * }
     */
    public static int SDL_CLIPBOARDUPDATE() {
        return (int)2304L;
    }
    /**
     * {@snippet :
     * enum .SDL_DROPFILE = 4096;
     * }
     */
    public static int SDL_DROPFILE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .SDL_DROPTEXT = 4097;
     * }
     */
    public static int SDL_DROPTEXT() {
        return (int)4097L;
    }
    /**
     * {@snippet :
     * enum .SDL_DROPBEGIN = 4098;
     * }
     */
    public static int SDL_DROPBEGIN() {
        return (int)4098L;
    }
    /**
     * {@snippet :
     * enum .SDL_DROPCOMPLETE = 4099;
     * }
     */
    public static int SDL_DROPCOMPLETE() {
        return (int)4099L;
    }
    /**
     * {@snippet :
     * enum .SDL_AUDIODEVICEADDED = 4352;
     * }
     */
    public static int SDL_AUDIODEVICEADDED() {
        return (int)4352L;
    }
    /**
     * {@snippet :
     * enum .SDL_AUDIODEVICEREMOVED = 4353;
     * }
     */
    public static int SDL_AUDIODEVICEREMOVED() {
        return (int)4353L;
    }
    /**
     * {@snippet :
     * enum .SDL_SENSORUPDATE = 4608;
     * }
     */
    public static int SDL_SENSORUPDATE() {
        return (int)4608L;
    }
    /**
     * {@snippet :
     * enum .SDL_RENDER_TARGETS_RESET = 8192;
     * }
     */
    public static int SDL_RENDER_TARGETS_RESET() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .SDL_RENDER_DEVICE_RESET = 8193;
     * }
     */
    public static int SDL_RENDER_DEVICE_RESET() {
        return (int)8193L;
    }
    /**
     * {@snippet :
     * enum .SDL_POLLSENTINEL = 32512;
     * }
     */
    public static int SDL_POLLSENTINEL() {
        return (int)32512L;
    }
    /**
     * {@snippet :
     * enum .SDL_USEREVENT = 32768;
     * }
     */
    public static int SDL_USEREVENT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum .SDL_LASTEVENT = 65535;
     * }
     */
    public static int SDL_LASTEVENT() {
        return (int)65535L;
    }
    public static MethodHandle SDL_PumpEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$2,"SDL_PumpEvents");
    }
    /**
     * {@snippet :
     * void SDL_PumpEvents();
     * }
     */
    public static void SDL_PumpEvents() {
        var mh$ = SDL_PumpEvents$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_ADDEVENT = 0;
     * }
     */
    public static int SDL_ADDEVENT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_PEEKEVENT = 1;
     * }
     */
    public static int SDL_PEEKEVENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_GETEVENT = 2;
     * }
     */
    public static int SDL_GETEVENT() {
        return (int)2L;
    }
    public static MethodHandle SDL_PeepEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$4,"SDL_PeepEvents");
    }
    /**
     * {@snippet :
     * int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_eventaction action, Uint32 minType, Uint32 maxType);
     * }
     */
    public static int SDL_PeepEvents(MemorySegment events, int numevents, int action, int minType, int maxType) {
        var mh$ = SDL_PeepEvents$MH();
        try {
            return (int)mh$.invokeExact(events, numevents, action, minType, maxType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$5,"SDL_HasEvent");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasEvent(Uint32 type);
     * }
     */
    public static int SDL_HasEvent(int type) {
        var mh$ = SDL_HasEvent$MH();
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$0,"SDL_HasEvents");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_HasEvents(Uint32 minType, Uint32 maxType);
     * }
     */
    public static int SDL_HasEvents(int minType, int maxType) {
        var mh$ = SDL_HasEvents$MH();
        try {
            return (int)mh$.invokeExact(minType, maxType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FlushEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$1,"SDL_FlushEvent");
    }
    /**
     * {@snippet :
     * void SDL_FlushEvent(Uint32 type);
     * }
     */
    public static void SDL_FlushEvent(int type) {
        var mh$ = SDL_FlushEvent$MH();
        try {
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FlushEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$2,"SDL_FlushEvents");
    }
    /**
     * {@snippet :
     * void SDL_FlushEvents(Uint32 minType, Uint32 maxType);
     * }
     */
    public static void SDL_FlushEvents(int minType, int maxType) {
        var mh$ = SDL_FlushEvents$MH();
        try {
            mh$.invokeExact(minType, maxType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PollEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$3,"SDL_PollEvent");
    }
    /**
     * {@snippet :
     * int SDL_PollEvent(SDL_Event* event);
     * }
     */
    public static int SDL_PollEvent(MemorySegment event) {
        var mh$ = SDL_PollEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WaitEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$4,"SDL_WaitEvent");
    }
    /**
     * {@snippet :
     * int SDL_WaitEvent(SDL_Event* event);
     * }
     */
    public static int SDL_WaitEvent(MemorySegment event) {
        var mh$ = SDL_WaitEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WaitEventTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$5,"SDL_WaitEventTimeout");
    }
    /**
     * {@snippet :
     * int SDL_WaitEventTimeout(SDL_Event* event, int timeout);
     * }
     */
    public static int SDL_WaitEventTimeout(MemorySegment event, int timeout) {
        var mh$ = SDL_WaitEventTimeout$MH();
        try {
            return (int)mh$.invokeExact(event, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PushEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$0,"SDL_PushEvent");
    }
    /**
     * {@snippet :
     * int SDL_PushEvent(SDL_Event* event);
     * }
     */
    public static int SDL_PushEvent(MemorySegment event) {
        var mh$ = SDL_PushEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetEventFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$2,"SDL_SetEventFilter");
    }
    /**
     * {@snippet :
     * void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);
     * }
     */
    public static void SDL_SetEventFilter(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_SetEventFilter$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetEventFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$3,"SDL_GetEventFilter");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata);
     * }
     */
    public static int SDL_GetEventFilter(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_GetEventFilter$MH();
        try {
            return (int)mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AddEventWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$4,"SDL_AddEventWatch");
    }
    /**
     * {@snippet :
     * void SDL_AddEventWatch(SDL_EventFilter filter, void* userdata);
     * }
     */
    public static void SDL_AddEventWatch(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_AddEventWatch$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DelEventWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$5,"SDL_DelEventWatch");
    }
    /**
     * {@snippet :
     * void SDL_DelEventWatch(SDL_EventFilter filter, void* userdata);
     * }
     */
    public static void SDL_DelEventWatch(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_DelEventWatch$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FilterEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$0,"SDL_FilterEvents");
    }
    /**
     * {@snippet :
     * void SDL_FilterEvents(SDL_EventFilter filter, void* userdata);
     * }
     */
    public static void SDL_FilterEvents(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_FilterEvents$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EventState$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$2,"SDL_EventState");
    }
    /**
     * {@snippet :
     * Uint8 SDL_EventState(Uint32 type, int state);
     * }
     */
    public static byte SDL_EventState(int type, int state) {
        var mh$ = SDL_EventState$MH();
        try {
            return (byte)mh$.invokeExact(type, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RegisterEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$3,"SDL_RegisterEvents");
    }
    /**
     * {@snippet :
     * Uint32 SDL_RegisterEvents(int numevents);
     * }
     */
    public static int SDL_RegisterEvents(int numevents) {
        var mh$ = SDL_RegisterEvents$MH();
        try {
            return (int)mh$.invokeExact(numevents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetBasePath$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$4,"SDL_GetBasePath");
    }
    /**
     * {@snippet :
     * char* SDL_GetBasePath();
     * }
     */
    public static MemorySegment SDL_GetBasePath() {
        var mh$ = SDL_GetBasePath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetPrefPath$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$5,"SDL_GetPrefPath");
    }
    /**
     * {@snippet :
     * char* SDL_GetPrefPath(char* org, char* app);
     * }
     */
    public static MemorySegment SDL_GetPrefPath(MemorySegment org, MemorySegment app) {
        var mh$ = SDL_GetPrefPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(org, app);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NumHaptics$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$0,"SDL_NumHaptics");
    }
    /**
     * {@snippet :
     * int SDL_NumHaptics();
     * }
     */
    public static int SDL_NumHaptics() {
        var mh$ = SDL_NumHaptics$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticName$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$1,"SDL_HapticName");
    }
    /**
     * {@snippet :
     * char* SDL_HapticName(int device_index);
     * }
     */
    public static MemorySegment SDL_HapticName(int device_index) {
        var mh$ = SDL_HapticName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$2,"SDL_HapticOpen");
    }
    /**
     * {@snippet :
     * SDL_Haptic* SDL_HapticOpen(int device_index);
     * }
     */
    public static MemorySegment SDL_HapticOpen(int device_index) {
        var mh$ = SDL_HapticOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticOpened$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$3,"SDL_HapticOpened");
    }
    /**
     * {@snippet :
     * int SDL_HapticOpened(int device_index);
     * }
     */
    public static int SDL_HapticOpened(int device_index) {
        var mh$ = SDL_HapticOpened$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$4,"SDL_HapticIndex");
    }
    /**
     * {@snippet :
     * int SDL_HapticIndex(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticIndex(MemorySegment haptic) {
        var mh$ = SDL_HapticIndex$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MouseIsHaptic$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$5,"SDL_MouseIsHaptic");
    }
    /**
     * {@snippet :
     * int SDL_MouseIsHaptic();
     * }
     */
    public static int SDL_MouseIsHaptic() {
        var mh$ = SDL_MouseIsHaptic$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticOpenFromMouse$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$0,"SDL_HapticOpenFromMouse");
    }
    /**
     * {@snippet :
     * SDL_Haptic* SDL_HapticOpenFromMouse();
     * }
     */
    public static MemorySegment SDL_HapticOpenFromMouse() {
        var mh$ = SDL_HapticOpenFromMouse$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickIsHaptic$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$1,"SDL_JoystickIsHaptic");
    }
    /**
     * {@snippet :
     * int SDL_JoystickIsHaptic(SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickIsHaptic(MemorySegment joystick) {
        var mh$ = SDL_JoystickIsHaptic$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticOpenFromJoystick$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$2,"SDL_HapticOpenFromJoystick");
    }
    /**
     * {@snippet :
     * SDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_HapticOpenFromJoystick(MemorySegment joystick) {
        var mh$ = SDL_HapticOpenFromJoystick$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticClose$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$3,"SDL_HapticClose");
    }
    /**
     * {@snippet :
     * void SDL_HapticClose(SDL_Haptic* haptic);
     * }
     */
    public static void SDL_HapticClose(MemorySegment haptic) {
        var mh$ = SDL_HapticClose$MH();
        try {
            mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticNumEffects$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$4,"SDL_HapticNumEffects");
    }
    /**
     * {@snippet :
     * int SDL_HapticNumEffects(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticNumEffects(MemorySegment haptic) {
        var mh$ = SDL_HapticNumEffects$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticNumEffectsPlaying$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$5,"SDL_HapticNumEffectsPlaying");
    }
    /**
     * {@snippet :
     * int SDL_HapticNumEffectsPlaying(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticNumEffectsPlaying(MemorySegment haptic) {
        var mh$ = SDL_HapticNumEffectsPlaying$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$0,"SDL_HapticQuery");
    }
    /**
     * {@snippet :
     * unsigned int SDL_HapticQuery(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticQuery(MemorySegment haptic) {
        var mh$ = SDL_HapticQuery$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticNumAxes$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"SDL_HapticNumAxes");
    }
    /**
     * {@snippet :
     * int SDL_HapticNumAxes(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticNumAxes(MemorySegment haptic) {
        var mh$ = SDL_HapticNumAxes$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticEffectSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"SDL_HapticEffectSupported");
    }
    /**
     * {@snippet :
     * int SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect);
     * }
     */
    public static int SDL_HapticEffectSupported(MemorySegment haptic, MemorySegment effect) {
        var mh$ = SDL_HapticEffectSupported$MH();
        try {
            return (int)mh$.invokeExact(haptic, effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticNewEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$3,"SDL_HapticNewEffect");
    }
    /**
     * {@snippet :
     * int SDL_HapticNewEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect);
     * }
     */
    public static int SDL_HapticNewEffect(MemorySegment haptic, MemorySegment effect) {
        var mh$ = SDL_HapticNewEffect$MH();
        try {
            return (int)mh$.invokeExact(haptic, effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticUpdateEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$4,"SDL_HapticUpdateEffect");
    }
    /**
     * {@snippet :
     * int SDL_HapticUpdateEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data);
     * }
     */
    public static int SDL_HapticUpdateEffect(MemorySegment haptic, int effect, MemorySegment data) {
        var mh$ = SDL_HapticUpdateEffect$MH();
        try {
            return (int)mh$.invokeExact(haptic, effect, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticRunEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$5,"SDL_HapticRunEffect");
    }
    /**
     * {@snippet :
     * int SDL_HapticRunEffect(SDL_Haptic* haptic, int effect, Uint32 iterations);
     * }
     */
    public static int SDL_HapticRunEffect(MemorySegment haptic, int effect, int iterations) {
        var mh$ = SDL_HapticRunEffect$MH();
        try {
            return (int)mh$.invokeExact(haptic, effect, iterations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticStopEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"SDL_HapticStopEffect");
    }
    /**
     * {@snippet :
     * int SDL_HapticStopEffect(SDL_Haptic* haptic, int effect);
     * }
     */
    public static int SDL_HapticStopEffect(MemorySegment haptic, int effect) {
        var mh$ = SDL_HapticStopEffect$MH();
        try {
            return (int)mh$.invokeExact(haptic, effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticDestroyEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$1,"SDL_HapticDestroyEffect");
    }
    /**
     * {@snippet :
     * void SDL_HapticDestroyEffect(SDL_Haptic* haptic, int effect);
     * }
     */
    public static void SDL_HapticDestroyEffect(MemorySegment haptic, int effect) {
        var mh$ = SDL_HapticDestroyEffect$MH();
        try {
            mh$.invokeExact(haptic, effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticGetEffectStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"SDL_HapticGetEffectStatus");
    }
    /**
     * {@snippet :
     * int SDL_HapticGetEffectStatus(SDL_Haptic* haptic, int effect);
     * }
     */
    public static int SDL_HapticGetEffectStatus(MemorySegment haptic, int effect) {
        var mh$ = SDL_HapticGetEffectStatus$MH();
        try {
            return (int)mh$.invokeExact(haptic, effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticSetGain$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$3,"SDL_HapticSetGain");
    }
    /**
     * {@snippet :
     * int SDL_HapticSetGain(SDL_Haptic* haptic, int gain);
     * }
     */
    public static int SDL_HapticSetGain(MemorySegment haptic, int gain) {
        var mh$ = SDL_HapticSetGain$MH();
        try {
            return (int)mh$.invokeExact(haptic, gain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticSetAutocenter$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"SDL_HapticSetAutocenter");
    }
    /**
     * {@snippet :
     * int SDL_HapticSetAutocenter(SDL_Haptic* haptic, int autocenter);
     * }
     */
    public static int SDL_HapticSetAutocenter(MemorySegment haptic, int autocenter) {
        var mh$ = SDL_HapticSetAutocenter$MH();
        try {
            return (int)mh$.invokeExact(haptic, autocenter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticPause$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"SDL_HapticPause");
    }
    /**
     * {@snippet :
     * int SDL_HapticPause(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticPause(MemorySegment haptic) {
        var mh$ = SDL_HapticPause$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticUnpause$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$0,"SDL_HapticUnpause");
    }
    /**
     * {@snippet :
     * int SDL_HapticUnpause(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticUnpause(MemorySegment haptic) {
        var mh$ = SDL_HapticUnpause$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticStopAll$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"SDL_HapticStopAll");
    }
    /**
     * {@snippet :
     * int SDL_HapticStopAll(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticStopAll(MemorySegment haptic) {
        var mh$ = SDL_HapticStopAll$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticRumbleSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"SDL_HapticRumbleSupported");
    }
    /**
     * {@snippet :
     * int SDL_HapticRumbleSupported(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticRumbleSupported(MemorySegment haptic) {
        var mh$ = SDL_HapticRumbleSupported$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticRumbleInit$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"SDL_HapticRumbleInit");
    }
    /**
     * {@snippet :
     * int SDL_HapticRumbleInit(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticRumbleInit(MemorySegment haptic) {
        var mh$ = SDL_HapticRumbleInit$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticRumblePlay$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"SDL_HapticRumblePlay");
    }
    /**
     * {@snippet :
     * int SDL_HapticRumblePlay(SDL_Haptic* haptic, float strength, Uint32 length);
     * }
     */
    public static int SDL_HapticRumblePlay(MemorySegment haptic, float strength, int length) {
        var mh$ = SDL_HapticRumblePlay$MH();
        try {
            return (int)mh$.invokeExact(haptic, strength, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HapticRumbleStop$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$0,"SDL_HapticRumbleStop");
    }
    /**
     * {@snippet :
     * int SDL_HapticRumbleStop(SDL_Haptic* haptic);
     * }
     */
    public static int SDL_HapticRumbleStop(MemorySegment haptic) {
        var mh$ = SDL_HapticRumbleStop$MH();
        try {
            return (int)mh$.invokeExact(haptic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_init$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$4,"SDL_hid_init");
    }
    /**
     * {@snippet :
     * int SDL_hid_init();
     * }
     */
    public static int SDL_hid_init() {
        var mh$ = SDL_hid_init$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$5,"SDL_hid_exit");
    }
    /**
     * {@snippet :
     * int SDL_hid_exit();
     * }
     */
    public static int SDL_hid_exit() {
        var mh$ = SDL_hid_exit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_device_change_count$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$0,"SDL_hid_device_change_count");
    }
    /**
     * {@snippet :
     * Uint32 SDL_hid_device_change_count();
     * }
     */
    public static int SDL_hid_device_change_count() {
        var mh$ = SDL_hid_device_change_count$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_enumerate$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$2,"SDL_hid_enumerate");
    }
    /**
     * {@snippet :
     * SDL_hid_device_info* SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);
     * }
     */
    public static MemorySegment SDL_hid_enumerate(short vendor_id, short product_id) {
        var mh$ = SDL_hid_enumerate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vendor_id, product_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_free_enumeration$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$3,"SDL_hid_free_enumeration");
    }
    /**
     * {@snippet :
     * void SDL_hid_free_enumeration(SDL_hid_device_info* devs);
     * }
     */
    public static void SDL_hid_free_enumeration(MemorySegment devs) {
        var mh$ = SDL_hid_free_enumeration$MH();
        try {
            mh$.invokeExact(devs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_open$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$5,"SDL_hid_open");
    }
    /**
     * {@snippet :
     * SDL_hid_device* SDL_hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t* serial_number);
     * }
     */
    public static MemorySegment SDL_hid_open(short vendor_id, short product_id, MemorySegment serial_number) {
        var mh$ = SDL_hid_open$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vendor_id, product_id, serial_number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_open_path$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$0,"SDL_hid_open_path");
    }
    /**
     * {@snippet :
     * SDL_hid_device* SDL_hid_open_path(char* path, int bExclusive);
     * }
     */
    public static MemorySegment SDL_hid_open_path(MemorySegment path, int bExclusive) {
        var mh$ = SDL_hid_open_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, bExclusive);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_write$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"SDL_hid_write");
    }
    /**
     * {@snippet :
     * int SDL_hid_write(SDL_hid_device* dev, unsigned char* data, size_t length);
     * }
     */
    public static int SDL_hid_write(MemorySegment dev, MemorySegment data, long length) {
        var mh$ = SDL_hid_write$MH();
        try {
            return (int)mh$.invokeExact(dev, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_read_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"SDL_hid_read_timeout");
    }
    /**
     * {@snippet :
     * int SDL_hid_read_timeout(SDL_hid_device* dev, unsigned char* data, size_t length, int milliseconds);
     * }
     */
    public static int SDL_hid_read_timeout(MemorySegment dev, MemorySegment data, long length, int milliseconds) {
        var mh$ = SDL_hid_read_timeout$MH();
        try {
            return (int)mh$.invokeExact(dev, data, length, milliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_read$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$5,"SDL_hid_read");
    }
    /**
     * {@snippet :
     * int SDL_hid_read(SDL_hid_device* dev, unsigned char* data, size_t length);
     * }
     */
    public static int SDL_hid_read(MemorySegment dev, MemorySegment data, long length) {
        var mh$ = SDL_hid_read$MH();
        try {
            return (int)mh$.invokeExact(dev, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_set_nonblocking$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$0,"SDL_hid_set_nonblocking");
    }
    /**
     * {@snippet :
     * int SDL_hid_set_nonblocking(SDL_hid_device* dev, int nonblock);
     * }
     */
    public static int SDL_hid_set_nonblocking(MemorySegment dev, int nonblock) {
        var mh$ = SDL_hid_set_nonblocking$MH();
        try {
            return (int)mh$.invokeExact(dev, nonblock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_send_feature_report$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"SDL_hid_send_feature_report");
    }
    /**
     * {@snippet :
     * int SDL_hid_send_feature_report(SDL_hid_device* dev, unsigned char* data, size_t length);
     * }
     */
    public static int SDL_hid_send_feature_report(MemorySegment dev, MemorySegment data, long length) {
        var mh$ = SDL_hid_send_feature_report$MH();
        try {
            return (int)mh$.invokeExact(dev, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_get_feature_report$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$2,"SDL_hid_get_feature_report");
    }
    /**
     * {@snippet :
     * int SDL_hid_get_feature_report(SDL_hid_device* dev, unsigned char* data, size_t length);
     * }
     */
    public static int SDL_hid_get_feature_report(MemorySegment dev, MemorySegment data, long length) {
        var mh$ = SDL_hid_get_feature_report$MH();
        try {
            return (int)mh$.invokeExact(dev, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_close$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"SDL_hid_close");
    }
    /**
     * {@snippet :
     * void SDL_hid_close(SDL_hid_device* dev);
     * }
     */
    public static void SDL_hid_close(MemorySegment dev) {
        var mh$ = SDL_hid_close$MH();
        try {
            mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_get_manufacturer_string$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"SDL_hid_get_manufacturer_string");
    }
    /**
     * {@snippet :
     * int SDL_hid_get_manufacturer_string(SDL_hid_device* dev, wchar_t* string, size_t maxlen);
     * }
     */
    public static int SDL_hid_get_manufacturer_string(MemorySegment dev, MemorySegment string, long maxlen) {
        var mh$ = SDL_hid_get_manufacturer_string$MH();
        try {
            return (int)mh$.invokeExact(dev, string, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_get_product_string$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$5,"SDL_hid_get_product_string");
    }
    /**
     * {@snippet :
     * int SDL_hid_get_product_string(SDL_hid_device* dev, wchar_t* string, size_t maxlen);
     * }
     */
    public static int SDL_hid_get_product_string(MemorySegment dev, MemorySegment string, long maxlen) {
        var mh$ = SDL_hid_get_product_string$MH();
        try {
            return (int)mh$.invokeExact(dev, string, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_get_serial_number_string$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$0,"SDL_hid_get_serial_number_string");
    }
    /**
     * {@snippet :
     * int SDL_hid_get_serial_number_string(SDL_hid_device* dev, wchar_t* string, size_t maxlen);
     * }
     */
    public static int SDL_hid_get_serial_number_string(MemorySegment dev, MemorySegment string, long maxlen) {
        var mh$ = SDL_hid_get_serial_number_string$MH();
        try {
            return (int)mh$.invokeExact(dev, string, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_get_indexed_string$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$2,"SDL_hid_get_indexed_string");
    }
    /**
     * {@snippet :
     * int SDL_hid_get_indexed_string(SDL_hid_device* dev, int string_index, wchar_t* string, size_t maxlen);
     * }
     */
    public static int SDL_hid_get_indexed_string(MemorySegment dev, int string_index, MemorySegment string, long maxlen) {
        var mh$ = SDL_hid_get_indexed_string$MH();
        try {
            return (int)mh$.invokeExact(dev, string_index, string, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_hid_ble_scan$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$3,"SDL_hid_ble_scan");
    }
    /**
     * {@snippet :
     * void SDL_hid_ble_scan(SDL_bool active);
     * }
     */
    public static void SDL_hid_ble_scan(int active) {
        var mh$ = SDL_hid_ble_scan$MH();
        try {
            mh$.invokeExact(active);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_HINT_DEFAULT = 0;
     * }
     */
    public static int SDL_HINT_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_HINT_NORMAL = 1;
     * }
     */
    public static int SDL_HINT_NORMAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_HINT_OVERRIDE = 2;
     * }
     */
    public static int SDL_HINT_OVERRIDE() {
        return (int)2L;
    }
    public static MethodHandle SDL_SetHintWithPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$4,"SDL_SetHintWithPriority");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_SetHintWithPriority(char* name, char* value, SDL_HintPriority priority);
     * }
     */
    public static int SDL_SetHintWithPriority(MemorySegment name, MemorySegment value, int priority) {
        var mh$ = SDL_SetHintWithPriority$MH();
        try {
            return (int)mh$.invokeExact(name, value, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetHint$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$5,"SDL_SetHint");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_SetHint(char* name, char* value);
     * }
     */
    public static int SDL_SetHint(MemorySegment name, MemorySegment value) {
        var mh$ = SDL_SetHint$MH();
        try {
            return (int)mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ResetHint$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$0,"SDL_ResetHint");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_ResetHint(char* name);
     * }
     */
    public static int SDL_ResetHint(MemorySegment name) {
        var mh$ = SDL_ResetHint$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ResetHints$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$1,"SDL_ResetHints");
    }
    /**
     * {@snippet :
     * void SDL_ResetHints();
     * }
     */
    public static void SDL_ResetHints() {
        var mh$ = SDL_ResetHints$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetHint$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$2,"SDL_GetHint");
    }
    /**
     * {@snippet :
     * char* SDL_GetHint(char* name);
     * }
     */
    public static MemorySegment SDL_GetHint(MemorySegment name) {
        var mh$ = SDL_GetHint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetHintBoolean$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$3,"SDL_GetHintBoolean");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_GetHintBoolean(char* name, SDL_bool default_value);
     * }
     */
    public static int SDL_GetHintBoolean(MemorySegment name, int default_value) {
        var mh$ = SDL_GetHintBoolean$MH();
        try {
            return (int)mh$.invokeExact(name, default_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AddHintCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"SDL_AddHintCallback");
    }
    /**
     * {@snippet :
     * void SDL_AddHintCallback(char* name, SDL_HintCallback callback, void* userdata);
     * }
     */
    public static void SDL_AddHintCallback(MemorySegment name, MemorySegment callback, MemorySegment userdata) {
        var mh$ = SDL_AddHintCallback$MH();
        try {
            mh$.invokeExact(name, callback, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DelHintCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$2,"SDL_DelHintCallback");
    }
    /**
     * {@snippet :
     * void SDL_DelHintCallback(char* name, SDL_HintCallback callback, void* userdata);
     * }
     */
    public static void SDL_DelHintCallback(MemorySegment name, MemorySegment callback, MemorySegment userdata) {
        var mh$ = SDL_DelHintCallback$MH();
        try {
            mh$.invokeExact(name, callback, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ClearHints$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"SDL_ClearHints");
    }
    /**
     * {@snippet :
     * void SDL_ClearHints();
     * }
     */
    public static void SDL_ClearHints() {
        var mh$ = SDL_ClearHints$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadObject$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"SDL_LoadObject");
    }
    /**
     * {@snippet :
     * void* SDL_LoadObject(char* sofile);
     * }
     */
    public static MemorySegment SDL_LoadObject(MemorySegment sofile) {
        var mh$ = SDL_LoadObject$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sofile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$5,"SDL_LoadFunction");
    }
    /**
     * {@snippet :
     * void* SDL_LoadFunction(void* handle, char* name);
     * }
     */
    public static MemorySegment SDL_LoadFunction(MemorySegment handle, MemorySegment name) {
        var mh$ = SDL_LoadFunction$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(handle, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnloadObject$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$0,"SDL_UnloadObject");
    }
    /**
     * {@snippet :
     * void SDL_UnloadObject(void* handle);
     * }
     */
    public static void SDL_UnloadObject(MemorySegment handle) {
        var mh$ = SDL_UnloadObject$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_APPLICATION = 0;
     * }
     */
    public static int SDL_LOG_CATEGORY_APPLICATION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_ERROR = 1;
     * }
     */
    public static int SDL_LOG_CATEGORY_ERROR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_ASSERT = 2;
     * }
     */
    public static int SDL_LOG_CATEGORY_ASSERT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_SYSTEM = 3;
     * }
     */
    public static int SDL_LOG_CATEGORY_SYSTEM() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_AUDIO = 4;
     * }
     */
    public static int SDL_LOG_CATEGORY_AUDIO() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_VIDEO = 5;
     * }
     */
    public static int SDL_LOG_CATEGORY_VIDEO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RENDER = 6;
     * }
     */
    public static int SDL_LOG_CATEGORY_RENDER() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_INPUT = 7;
     * }
     */
    public static int SDL_LOG_CATEGORY_INPUT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_TEST = 8;
     * }
     */
    public static int SDL_LOG_CATEGORY_TEST() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED1 = 9;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED1() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED2 = 10;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED2() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED3 = 11;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED3() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED4 = 12;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED4() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED5 = 13;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED5() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED6 = 14;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED6() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED7 = 15;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED7() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED8 = 16;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED8() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED9 = 17;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED9() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_RESERVED10 = 18;
     * }
     */
    public static int SDL_LOG_CATEGORY_RESERVED10() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_CATEGORY_CUSTOM = 19;
     * }
     */
    public static int SDL_LOG_CATEGORY_CUSTOM() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_PRIORITY_VERBOSE = 1;
     * }
     */
    public static int SDL_LOG_PRIORITY_VERBOSE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_PRIORITY_DEBUG = 2;
     * }
     */
    public static int SDL_LOG_PRIORITY_DEBUG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_PRIORITY_INFO = 3;
     * }
     */
    public static int SDL_LOG_PRIORITY_INFO() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_PRIORITY_WARN = 4;
     * }
     */
    public static int SDL_LOG_PRIORITY_WARN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_PRIORITY_ERROR = 5;
     * }
     */
    public static int SDL_LOG_PRIORITY_ERROR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SDL_LOG_PRIORITY_CRITICAL = 6;
     * }
     */
    public static int SDL_LOG_PRIORITY_CRITICAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SDL_NUM_LOG_PRIORITIES = 7;
     * }
     */
    public static int SDL_NUM_LOG_PRIORITIES() {
        return (int)7L;
    }
    public static MethodHandle SDL_LogSetAllPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$1,"SDL_LogSetAllPriority");
    }
    /**
     * {@snippet :
     * void SDL_LogSetAllPriority(SDL_LogPriority priority);
     * }
     */
    public static void SDL_LogSetAllPriority(int priority) {
        var mh$ = SDL_LogSetAllPriority$MH();
        try {
            mh$.invokeExact(priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogSetPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$2,"SDL_LogSetPriority");
    }
    /**
     * {@snippet :
     * void SDL_LogSetPriority(int category, SDL_LogPriority priority);
     * }
     */
    public static void SDL_LogSetPriority(int category, int priority) {
        var mh$ = SDL_LogSetPriority$MH();
        try {
            mh$.invokeExact(category, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogGetPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$3,"SDL_LogGetPriority");
    }
    /**
     * {@snippet :
     * SDL_LogPriority SDL_LogGetPriority(int category);
     * }
     */
    public static int SDL_LogGetPriority(int category) {
        var mh$ = SDL_LogGetPriority$MH();
        try {
            return (int)mh$.invokeExact(category);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogResetPriorities$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$4,"SDL_LogResetPriorities");
    }
    /**
     * {@snippet :
     * void SDL_LogResetPriorities();
     * }
     */
    public static void SDL_LogResetPriorities() {
        var mh$ = SDL_LogResetPriorities$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Log$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$5,"SDL_Log");
    }
    /**
     * {@snippet :
     * void SDL_Log(char* fmt,...);
     * }
     */
    public static void SDL_Log(MemorySegment fmt, Object... x1) {
        var mh$ = SDL_Log$MH();
        try {
            mh$.invokeExact(fmt, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogVerbose$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$1,"SDL_LogVerbose");
    }
    /**
     * {@snippet :
     * void SDL_LogVerbose(int category, char* fmt,...);
     * }
     */
    public static void SDL_LogVerbose(int category, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_LogVerbose$MH();
        try {
            mh$.invokeExact(category, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogDebug$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$2,"SDL_LogDebug");
    }
    /**
     * {@snippet :
     * void SDL_LogDebug(int category, char* fmt,...);
     * }
     */
    public static void SDL_LogDebug(int category, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_LogDebug$MH();
        try {
            mh$.invokeExact(category, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$3,"SDL_LogInfo");
    }
    /**
     * {@snippet :
     * void SDL_LogInfo(int category, char* fmt,...);
     * }
     */
    public static void SDL_LogInfo(int category, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_LogInfo$MH();
        try {
            mh$.invokeExact(category, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogWarn$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$4,"SDL_LogWarn");
    }
    /**
     * {@snippet :
     * void SDL_LogWarn(int category, char* fmt,...);
     * }
     */
    public static void SDL_LogWarn(int category, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_LogWarn$MH();
        try {
            mh$.invokeExact(category, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogError$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$5,"SDL_LogError");
    }
    /**
     * {@snippet :
     * void SDL_LogError(int category, char* fmt,...);
     * }
     */
    public static void SDL_LogError(int category, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_LogError$MH();
        try {
            mh$.invokeExact(category, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogCritical$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$0,"SDL_LogCritical");
    }
    /**
     * {@snippet :
     * void SDL_LogCritical(int category, char* fmt,...);
     * }
     */
    public static void SDL_LogCritical(int category, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_LogCritical$MH();
        try {
            mh$.invokeExact(category, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$2,"SDL_LogMessage");
    }
    /**
     * {@snippet :
     * void SDL_LogMessage(int category, SDL_LogPriority priority, char* fmt,...);
     * }
     */
    public static void SDL_LogMessage(int category, int priority, MemorySegment fmt, Object... x3) {
        var mh$ = SDL_LogMessage$MH();
        try {
            mh$.invokeExact(category, priority, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogMessageV$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$4,"SDL_LogMessageV");
    }
    /**
     * {@snippet :
     * void SDL_LogMessageV(int category, SDL_LogPriority priority, char* fmt, va_list ap);
     * }
     */
    public static void SDL_LogMessageV(int category, int priority, MemorySegment fmt, MemorySegment ap) {
        var mh$ = SDL_LogMessageV$MH();
        try {
            mh$.invokeExact(category, priority, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogGetOutputFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$2,"SDL_LogGetOutputFunction");
    }
    /**
     * {@snippet :
     * void SDL_LogGetOutputFunction(SDL_LogOutputFunction* callback, void** userdata);
     * }
     */
    public static void SDL_LogGetOutputFunction(MemorySegment callback, MemorySegment userdata) {
        var mh$ = SDL_LogGetOutputFunction$MH();
        try {
            mh$.invokeExact(callback, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LogSetOutputFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$3,"SDL_LogSetOutputFunction");
    }
    /**
     * {@snippet :
     * void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void* userdata);
     * }
     */
    public static void SDL_LogSetOutputFunction(MemorySegment callback, MemorySegment userdata) {
        var mh$ = SDL_LogSetOutputFunction$MH();
        try {
            mh$.invokeExact(callback, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_ERROR = 16;
     * }
     */
    public static int SDL_MESSAGEBOX_ERROR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_WARNING = 32;
     * }
     */
    public static int SDL_MESSAGEBOX_WARNING() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_INFORMATION = 64;
     * }
     */
    public static int SDL_MESSAGEBOX_INFORMATION() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128;
     * }
     */
    public static int SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256;
     * }
     */
    public static int SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1;
     * }
     */
    public static int SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2;
     * }
     */
    public static int SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
     * }
     */
    public static int SDL_MESSAGEBOX_COLOR_BACKGROUND() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_COLOR_TEXT = 1;
     * }
     */
    public static int SDL_MESSAGEBOX_COLOR_TEXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
     * }
     */
    public static int SDL_MESSAGEBOX_COLOR_BUTTON_BORDER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
     * }
     */
    public static int SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
     * }
     */
    public static int SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_MESSAGEBOX_COLOR_MAX = 5;
     * }
     */
    public static int SDL_MESSAGEBOX_COLOR_MAX() {
        return (int)5L;
    }
    public static MethodHandle SDL_ShowMessageBox$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$3,"SDL_ShowMessageBox");
    }
    /**
     * {@snippet :
     * int SDL_ShowMessageBox(const SDL_MessageBoxData* messageboxdata, int* buttonid);
     * }
     */
    public static int SDL_ShowMessageBox(MemorySegment messageboxdata, MemorySegment buttonid) {
        var mh$ = SDL_ShowMessageBox$MH();
        try {
            return (int)mh$.invokeExact(messageboxdata, buttonid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ShowSimpleMessageBox$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$4,"SDL_ShowSimpleMessageBox");
    }
    /**
     * {@snippet :
     * int SDL_ShowSimpleMessageBox(Uint32 flags, char* title, char* message, SDL_Window* window);
     * }
     */
    public static int SDL_ShowSimpleMessageBox(int flags, MemorySegment title, MemorySegment message, MemorySegment window) {
        var mh$ = SDL_ShowSimpleMessageBox$MH();
        try {
            return (int)mh$.invokeExact(flags, title, message, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* SDL_MetalView;
     * }
     */
    public static final OfAddress SDL_MetalView = RuntimeHelper.POINTER;
    public static MethodHandle SDL_Metal_CreateView$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$5,"SDL_Metal_CreateView");
    }
    /**
     * {@snippet :
     * SDL_MetalView SDL_Metal_CreateView(SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_Metal_CreateView(MemorySegment window) {
        var mh$ = SDL_Metal_CreateView$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Metal_DestroyView$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$0,"SDL_Metal_DestroyView");
    }
    /**
     * {@snippet :
     * void SDL_Metal_DestroyView(SDL_MetalView view);
     * }
     */
    public static void SDL_Metal_DestroyView(MemorySegment view) {
        var mh$ = SDL_Metal_DestroyView$MH();
        try {
            mh$.invokeExact(view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Metal_GetLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$1,"SDL_Metal_GetLayer");
    }
    /**
     * {@snippet :
     * void* SDL_Metal_GetLayer(SDL_MetalView view);
     * }
     */
    public static MemorySegment SDL_Metal_GetLayer(MemorySegment view) {
        var mh$ = SDL_Metal_GetLayer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Metal_GetDrawableSize$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$2,"SDL_Metal_GetDrawableSize");
    }
    /**
     * {@snippet :
     * void SDL_Metal_GetDrawableSize(SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_Metal_GetDrawableSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_Metal_GetDrawableSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_POWERSTATE_UNKNOWN = 0;
     * }
     */
    public static int SDL_POWERSTATE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_POWERSTATE_ON_BATTERY = 1;
     * }
     */
    public static int SDL_POWERSTATE_ON_BATTERY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_POWERSTATE_NO_BATTERY = 2;
     * }
     */
    public static int SDL_POWERSTATE_NO_BATTERY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_POWERSTATE_CHARGING = 3;
     * }
     */
    public static int SDL_POWERSTATE_CHARGING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SDL_POWERSTATE_CHARGED = 4;
     * }
     */
    public static int SDL_POWERSTATE_CHARGED() {
        return (int)4L;
    }
    public static MethodHandle SDL_GetPowerInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$3,"SDL_GetPowerInfo");
    }
    /**
     * {@snippet :
     * SDL_PowerState SDL_GetPowerInfo(int* secs, int* pct);
     * }
     */
    public static int SDL_GetPowerInfo(MemorySegment secs, MemorySegment pct) {
        var mh$ = SDL_GetPowerInfo$MH();
        try {
            return (int)mh$.invokeExact(secs, pct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SDL_RENDERER_SOFTWARE = 1;
     * }
     */
    public static int SDL_RENDERER_SOFTWARE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_RENDERER_ACCELERATED = 2;
     * }
     */
    public static int SDL_RENDERER_ACCELERATED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_RENDERER_PRESENTVSYNC = 4;
     * }
     */
    public static int SDL_RENDERER_PRESENTVSYNC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SDL_RENDERER_TARGETTEXTURE = 8;
     * }
     */
    public static int SDL_RENDERER_TARGETTEXTURE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SDL_ScaleModeNearest = 0;
     * }
     */
    public static int SDL_ScaleModeNearest() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_ScaleModeLinear = 1;
     * }
     */
    public static int SDL_ScaleModeLinear() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_ScaleModeBest = 2;
     * }
     */
    public static int SDL_ScaleModeBest() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTUREACCESS_STATIC = 0;
     * }
     */
    public static int SDL_TEXTUREACCESS_STATIC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTUREACCESS_STREAMING = 1;
     * }
     */
    public static int SDL_TEXTUREACCESS_STREAMING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTUREACCESS_TARGET = 2;
     * }
     */
    public static int SDL_TEXTUREACCESS_TARGET() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTUREMODULATE_NONE = 0;
     * }
     */
    public static int SDL_TEXTUREMODULATE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTUREMODULATE_COLOR = 1;
     * }
     */
    public static int SDL_TEXTUREMODULATE_COLOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_TEXTUREMODULATE_ALPHA = 2;
     * }
     */
    public static int SDL_TEXTUREMODULATE_ALPHA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SDL_FLIP_NONE = 0;
     * }
     */
    public static int SDL_FLIP_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDL_FLIP_HORIZONTAL = 1;
     * }
     */
    public static int SDL_FLIP_HORIZONTAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SDL_FLIP_VERTICAL = 2;
     * }
     */
    public static int SDL_FLIP_VERTICAL() {
        return (int)2L;
    }
    public static MethodHandle SDL_GetNumRenderDrivers$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$5,"SDL_GetNumRenderDrivers");
    }
    /**
     * {@snippet :
     * int SDL_GetNumRenderDrivers();
     * }
     */
    public static int SDL_GetNumRenderDrivers() {
        var mh$ = SDL_GetNumRenderDrivers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderDriverInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$0,"SDL_GetRenderDriverInfo");
    }
    /**
     * {@snippet :
     * int SDL_GetRenderDriverInfo(int index, SDL_RendererInfo* info);
     * }
     */
    public static int SDL_GetRenderDriverInfo(int index, MemorySegment info) {
        var mh$ = SDL_GetRenderDriverInfo$MH();
        try {
            return (int)mh$.invokeExact(index, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateWindowAndRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$2,"SDL_CreateWindowAndRenderer");
    }
    /**
     * {@snippet :
     * int SDL_CreateWindowAndRenderer(int width, int height, Uint32 window_flags, SDL_Window** window, SDL_Renderer** renderer);
     * }
     */
    public static int SDL_CreateWindowAndRenderer(int width, int height, int window_flags, MemorySegment window, MemorySegment renderer) {
        var mh$ = SDL_CreateWindowAndRenderer$MH();
        try {
            return (int)mh$.invokeExact(width, height, window_flags, window, renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$3,"SDL_CreateRenderer");
    }
    /**
     * {@snippet :
     * SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, int index, Uint32 flags);
     * }
     */
    public static MemorySegment SDL_CreateRenderer(MemorySegment window, int index, int flags) {
        var mh$ = SDL_CreateRenderer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, index, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateSoftwareRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$4,"SDL_CreateSoftwareRenderer");
    }
    /**
     * {@snippet :
     * SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface);
     * }
     */
    public static MemorySegment SDL_CreateSoftwareRenderer(MemorySegment surface) {
        var mh$ = SDL_CreateSoftwareRenderer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$5,"SDL_GetRenderer");
    }
    /**
     * {@snippet :
     * SDL_Renderer* SDL_GetRenderer(SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetRenderer(MemorySegment window) {
        var mh$ = SDL_GetRenderer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$0,"SDL_RenderGetWindow");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_RenderGetWindow(SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_RenderGetWindow(MemorySegment renderer) {
        var mh$ = SDL_RenderGetWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRendererInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$1,"SDL_GetRendererInfo");
    }
    /**
     * {@snippet :
     * int SDL_GetRendererInfo(SDL_Renderer* renderer, SDL_RendererInfo* info);
     * }
     */
    public static int SDL_GetRendererInfo(MemorySegment renderer, MemorySegment info) {
        var mh$ = SDL_GetRendererInfo$MH();
        try {
            return (int)mh$.invokeExact(renderer, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRendererOutputSize$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$2,"SDL_GetRendererOutputSize");
    }
    /**
     * {@snippet :
     * int SDL_GetRendererOutputSize(SDL_Renderer* renderer, int* w, int* h);
     * }
     */
    public static int SDL_GetRendererOutputSize(MemorySegment renderer, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetRendererOutputSize$MH();
        try {
            return (int)mh$.invokeExact(renderer, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$4,"SDL_CreateTexture");
    }
    /**
     * {@snippet :
     * SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, Uint32 format, int access, int w, int h);
     * }
     */
    public static MemorySegment SDL_CreateTexture(MemorySegment renderer, int format, int access, int w, int h) {
        var mh$ = SDL_CreateTexture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer, format, access, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateTextureFromSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$5,"SDL_CreateTextureFromSurface");
    }
    /**
     * {@snippet :
     * SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface);
     * }
     */
    public static MemorySegment SDL_CreateTextureFromSurface(MemorySegment renderer, MemorySegment surface) {
        var mh$ = SDL_CreateTextureFromSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer, surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_QueryTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$0,"SDL_QueryTexture");
    }
    /**
     * {@snippet :
     * int SDL_QueryTexture(SDL_Texture* texture, Uint32* format, int* access, int* w, int* h);
     * }
     */
    public static int SDL_QueryTexture(MemorySegment texture, MemorySegment format, MemorySegment access, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_QueryTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, format, access, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$1,"SDL_SetTextureColorMod");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureColorMod(SDL_Texture* texture, Uint8 r, Uint8 g, Uint8 b);
     * }
     */
    public static int SDL_SetTextureColorMod(MemorySegment texture, byte r, byte g, byte b) {
        var mh$ = SDL_SetTextureColorMod$MH();
        try {
            return (int)mh$.invokeExact(texture, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$2,"SDL_GetTextureColorMod");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureColorMod(SDL_Texture* texture, Uint8* r, Uint8* g, Uint8* b);
     * }
     */
    public static int SDL_GetTextureColorMod(MemorySegment texture, MemorySegment r, MemorySegment g, MemorySegment b) {
        var mh$ = SDL_GetTextureColorMod$MH();
        try {
            return (int)mh$.invokeExact(texture, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$3,"SDL_SetTextureAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureAlphaMod(SDL_Texture* texture, Uint8 alpha);
     * }
     */
    public static int SDL_SetTextureAlphaMod(MemorySegment texture, byte alpha) {
        var mh$ = SDL_SetTextureAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(texture, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$4,"SDL_GetTextureAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureAlphaMod(SDL_Texture* texture, Uint8* alpha);
     * }
     */
    public static int SDL_GetTextureAlphaMod(MemorySegment texture, MemorySegment alpha) {
        var mh$ = SDL_GetTextureAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(texture, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$5,"SDL_SetTextureBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode);
     * }
     */
    public static int SDL_SetTextureBlendMode(MemorySegment texture, int blendMode) {
        var mh$ = SDL_SetTextureBlendMode$MH();
        try {
            return (int)mh$.invokeExact(texture, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$0,"SDL_GetTextureBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode);
     * }
     */
    public static int SDL_GetTextureBlendMode(MemorySegment texture, MemorySegment blendMode) {
        var mh$ = SDL_GetTextureBlendMode$MH();
        try {
            return (int)mh$.invokeExact(texture, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureScaleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$1,"SDL_SetTextureScaleMode");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode);
     * }
     */
    public static int SDL_SetTextureScaleMode(MemorySegment texture, int scaleMode) {
        var mh$ = SDL_SetTextureScaleMode$MH();
        try {
            return (int)mh$.invokeExact(texture, scaleMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureScaleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$2,"SDL_GetTextureScaleMode");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode);
     * }
     */
    public static int SDL_GetTextureScaleMode(MemorySegment texture, MemorySegment scaleMode) {
        var mh$ = SDL_GetTextureScaleMode$MH();
        try {
            return (int)mh$.invokeExact(texture, scaleMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$3,"SDL_SetTextureUserData");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureUserData(SDL_Texture* texture, void* userdata);
     * }
     */
    public static int SDL_SetTextureUserData(MemorySegment texture, MemorySegment userdata) {
        var mh$ = SDL_SetTextureUserData$MH();
        try {
            return (int)mh$.invokeExact(texture, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$4,"SDL_GetTextureUserData");
    }
    /**
     * {@snippet :
     * void* SDL_GetTextureUserData(SDL_Texture* texture);
     * }
     */
    public static MemorySegment SDL_GetTextureUserData(MemorySegment texture) {
        var mh$ = SDL_GetTextureUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$5,"SDL_UpdateTexture");
    }
    /**
     * {@snippet :
     * int SDL_UpdateTexture(SDL_Texture* texture, const SDL_Rect* rect, void* pixels, int pitch);
     * }
     */
    public static int SDL_UpdateTexture(MemorySegment texture, MemorySegment rect, MemorySegment pixels, int pitch) {
        var mh$ = SDL_UpdateTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, pixels, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateYUVTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$1,"SDL_UpdateYUVTexture");
    }
    /**
     * {@snippet :
     * int SDL_UpdateYUVTexture(SDL_Texture* texture, const SDL_Rect* rect, const Uint8* Yplane, int Ypitch, const Uint8* Uplane, int Upitch, const Uint8* Vplane, int Vpitch);
     * }
     */
    public static int SDL_UpdateYUVTexture(MemorySegment texture, MemorySegment rect, MemorySegment Yplane, int Ypitch, MemorySegment Uplane, int Upitch, MemorySegment Vplane, int Vpitch) {
        var mh$ = SDL_UpdateYUVTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateNVTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$3,"SDL_UpdateNVTexture");
    }
    /**
     * {@snippet :
     * int SDL_UpdateNVTexture(SDL_Texture* texture, const SDL_Rect* rect, const Uint8* Yplane, int Ypitch, const Uint8* UVplane, int UVpitch);
     * }
     */
    public static int SDL_UpdateNVTexture(MemorySegment texture, MemorySegment rect, MemorySegment Yplane, int Ypitch, MemorySegment UVplane, int UVpitch) {
        var mh$ = SDL_UpdateNVTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, Yplane, Ypitch, UVplane, UVpitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$4,"SDL_LockTexture");
    }
    /**
     * {@snippet :
     * int SDL_LockTexture(SDL_Texture* texture, const SDL_Rect* rect, void** pixels, int* pitch);
     * }
     */
    public static int SDL_LockTexture(MemorySegment texture, MemorySegment rect, MemorySegment pixels, MemorySegment pitch) {
        var mh$ = SDL_LockTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, pixels, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockTextureToSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$5,"SDL_LockTextureToSurface");
    }
    /**
     * {@snippet :
     * int SDL_LockTextureToSurface(SDL_Texture* texture, const SDL_Rect* rect, SDL_Surface** surface);
     * }
     */
    public static int SDL_LockTextureToSurface(MemorySegment texture, MemorySegment rect, MemorySegment surface) {
        var mh$ = SDL_LockTextureToSurface$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$0,"SDL_UnlockTexture");
    }
    /**
     * {@snippet :
     * void SDL_UnlockTexture(SDL_Texture* texture);
     * }
     */
    public static void SDL_UnlockTexture(MemorySegment texture) {
        var mh$ = SDL_UnlockTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderTargetSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$1,"SDL_RenderTargetSupported");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_RenderTargetSupported(SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderTargetSupported(MemorySegment renderer) {
        var mh$ = SDL_RenderTargetSupported$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetRenderTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$2,"SDL_SetRenderTarget");
    }
    /**
     * {@snippet :
     * int SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);
     * }
     */
    public static int SDL_SetRenderTarget(MemorySegment renderer, MemorySegment texture) {
        var mh$ = SDL_SetRenderTarget$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$3,"SDL_GetRenderTarget");
    }
    /**
     * {@snippet :
     * SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_GetRenderTarget(MemorySegment renderer) {
        var mh$ = SDL_GetRenderTarget$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetLogicalSize$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$4,"SDL_RenderSetLogicalSize");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetLogicalSize(SDL_Renderer* renderer, int w, int h);
     * }
     */
    public static int SDL_RenderSetLogicalSize(MemorySegment renderer, int w, int h) {
        var mh$ = SDL_RenderSetLogicalSize$MH();
        try {
            return (int)mh$.invokeExact(renderer, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetLogicalSize$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$5,"SDL_RenderGetLogicalSize");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetLogicalSize(SDL_Renderer* renderer, int* w, int* h);
     * }
     */
    public static void SDL_RenderGetLogicalSize(MemorySegment renderer, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_RenderGetLogicalSize$MH();
        try {
            mh$.invokeExact(renderer, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetIntegerScale$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$0,"SDL_RenderSetIntegerScale");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetIntegerScale(SDL_Renderer* renderer, SDL_bool enable);
     * }
     */
    public static int SDL_RenderSetIntegerScale(MemorySegment renderer, int enable) {
        var mh$ = SDL_RenderSetIntegerScale$MH();
        try {
            return (int)mh$.invokeExact(renderer, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetIntegerScale$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$1,"SDL_RenderGetIntegerScale");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_RenderGetIntegerScale(SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderGetIntegerScale(MemorySegment renderer) {
        var mh$ = SDL_RenderGetIntegerScale$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$2,"SDL_RenderSetViewport");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetViewport(SDL_Renderer* renderer, const SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderSetViewport(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderSetViewport$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$3,"SDL_RenderGetViewport");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetViewport(SDL_Renderer* renderer, SDL_Rect* rect);
     * }
     */
    public static void SDL_RenderGetViewport(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderGetViewport$MH();
        try {
            mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$4,"SDL_RenderSetClipRect");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetClipRect(SDL_Renderer* renderer, const SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderSetClipRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderSetClipRect$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$5,"SDL_RenderGetClipRect");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetClipRect(SDL_Renderer* renderer, SDL_Rect* rect);
     * }
     */
    public static void SDL_RenderGetClipRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderGetClipRect$MH();
        try {
            mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderIsClipEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$0,"SDL_RenderIsClipEnabled");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_RenderIsClipEnabled(SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderIsClipEnabled(MemorySegment renderer) {
        var mh$ = SDL_RenderIsClipEnabled$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$2,"SDL_RenderSetScale");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetScale(SDL_Renderer* renderer, float scaleX, float scaleY);
     * }
     */
    public static int SDL_RenderSetScale(MemorySegment renderer, float scaleX, float scaleY) {
        var mh$ = SDL_RenderSetScale$MH();
        try {
            return (int)mh$.invokeExact(renderer, scaleX, scaleY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$3,"SDL_RenderGetScale");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetScale(SDL_Renderer* renderer, float* scaleX, float* scaleY);
     * }
     */
    public static void SDL_RenderGetScale(MemorySegment renderer, MemorySegment scaleX, MemorySegment scaleY) {
        var mh$ = SDL_RenderGetScale$MH();
        try {
            mh$.invokeExact(renderer, scaleX, scaleY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderWindowToLogical$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$5,"SDL_RenderWindowToLogical");
    }
    /**
     * {@snippet :
     * void SDL_RenderWindowToLogical(SDL_Renderer* renderer, int windowX, int windowY, float* logicalX, float* logicalY);
     * }
     */
    public static void SDL_RenderWindowToLogical(MemorySegment renderer, int windowX, int windowY, MemorySegment logicalX, MemorySegment logicalY) {
        var mh$ = SDL_RenderWindowToLogical$MH();
        try {
            mh$.invokeExact(renderer, windowX, windowY, logicalX, logicalY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderLogicalToWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$1,"SDL_RenderLogicalToWindow");
    }
    /**
     * {@snippet :
     * void SDL_RenderLogicalToWindow(SDL_Renderer* renderer, float logicalX, float logicalY, int* windowX, int* windowY);
     * }
     */
    public static void SDL_RenderLogicalToWindow(MemorySegment renderer, float logicalX, float logicalY, MemorySegment windowX, MemorySegment windowY) {
        var mh$ = SDL_RenderLogicalToWindow$MH();
        try {
            mh$.invokeExact(renderer, logicalX, logicalY, windowX, windowY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetRenderDrawColor$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$2,"SDL_SetRenderDrawColor");
    }
    /**
     * {@snippet :
     * int SDL_SetRenderDrawColor(SDL_Renderer* renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
     * }
     */
    public static int SDL_SetRenderDrawColor(MemorySegment renderer, byte r, byte g, byte b, byte a) {
        var mh$ = SDL_SetRenderDrawColor$MH();
        try {
            return (int)mh$.invokeExact(renderer, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderDrawColor$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$3,"SDL_GetRenderDrawColor");
    }
    /**
     * {@snippet :
     * int SDL_GetRenderDrawColor(SDL_Renderer* renderer, Uint8* r, Uint8* g, Uint8* b, Uint8* a);
     * }
     */
    public static int SDL_GetRenderDrawColor(MemorySegment renderer, MemorySegment r, MemorySegment g, MemorySegment b, MemorySegment a) {
        var mh$ = SDL_GetRenderDrawColor$MH();
        try {
            return (int)mh$.invokeExact(renderer, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetRenderDrawBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$4,"SDL_SetRenderDrawBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode);
     * }
     */
    public static int SDL_SetRenderDrawBlendMode(MemorySegment renderer, int blendMode) {
        var mh$ = SDL_SetRenderDrawBlendMode$MH();
        try {
            return (int)mh$.invokeExact(renderer, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderDrawBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$5,"SDL_GetRenderDrawBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode);
     * }
     */
    public static int SDL_GetRenderDrawBlendMode(MemorySegment renderer, MemorySegment blendMode) {
        var mh$ = SDL_GetRenderDrawBlendMode$MH();
        try {
            return (int)mh$.invokeExact(renderer, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderClear$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$0,"SDL_RenderClear");
    }
    /**
     * {@snippet :
     * int SDL_RenderClear(SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderClear(MemorySegment renderer) {
        var mh$ = SDL_RenderClear$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$1,"SDL_RenderDrawPoint");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPoint(SDL_Renderer* renderer, int x, int y);
     * }
     */
    public static int SDL_RenderDrawPoint(MemorySegment renderer, int x, int y) {
        var mh$ = SDL_RenderDrawPoint$MH();
        try {
            return (int)mh$.invokeExact(renderer, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$2,"SDL_RenderDrawPoints");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPoints(SDL_Renderer* renderer, const SDL_Point* points, int count);
     * }
     */
    public static int SDL_RenderDrawPoints(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawPoints$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLine$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$3,"SDL_RenderDrawLine");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLine(SDL_Renderer* renderer, int x1, int y1, int x2, int y2);
     * }
     */
    public static int SDL_RenderDrawLine(MemorySegment renderer, int x1, int y1, int x2, int y2) {
        var mh$ = SDL_RenderDrawLine$MH();
        try {
            return (int)mh$.invokeExact(renderer, x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLines$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$4,"SDL_RenderDrawLines");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLines(SDL_Renderer* renderer, const SDL_Point* points, int count);
     * }
     */
    public static int SDL_RenderDrawLines(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawLines$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRect$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$5,"SDL_RenderDrawRect");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRect(SDL_Renderer* renderer, const SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderDrawRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderDrawRect$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRects$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$0,"SDL_RenderDrawRects");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRects(SDL_Renderer* renderer, const SDL_Rect* rects, int count);
     * }
     */
    public static int SDL_RenderDrawRects(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderDrawRects$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRect$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$1,"SDL_RenderFillRect");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRect(SDL_Renderer* renderer, const SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderFillRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderFillRect$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRects$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$2,"SDL_RenderFillRects");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRects(SDL_Renderer* renderer, const SDL_Rect* rects, int count);
     * }
     */
    public static int SDL_RenderFillRects(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderFillRects$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$3,"SDL_RenderCopy");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopy(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_Rect* srcrect, const SDL_Rect* dstrect);
     * }
     */
    public static int SDL_RenderCopy(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect) {
        var mh$ = SDL_RenderCopy$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopyEx$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$5,"SDL_RenderCopyEx");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopyEx(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_Rect* srcrect, const SDL_Rect* dstrect, double angle, const SDL_Point* center, const SDL_RendererFlip flip);
     * }
     */
    public static int SDL_RenderCopyEx(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect, double angle, MemorySegment center, int flip) {
        var mh$ = SDL_RenderCopyEx$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect, angle, center, flip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPointF$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$0,"SDL_RenderDrawPointF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPointF(SDL_Renderer* renderer, float x, float y);
     * }
     */
    public static int SDL_RenderDrawPointF(MemorySegment renderer, float x, float y) {
        var mh$ = SDL_RenderDrawPointF$MH();
        try {
            return (int)mh$.invokeExact(renderer, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPointsF$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$1,"SDL_RenderDrawPointsF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPointsF(SDL_Renderer* renderer, const SDL_FPoint* points, int count);
     * }
     */
    public static int SDL_RenderDrawPointsF(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawPointsF$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLineF$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$3,"SDL_RenderDrawLineF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLineF(SDL_Renderer* renderer, float x1, float y1, float x2, float y2);
     * }
     */
    public static int SDL_RenderDrawLineF(MemorySegment renderer, float x1, float y1, float x2, float y2) {
        var mh$ = SDL_RenderDrawLineF$MH();
        try {
            return (int)mh$.invokeExact(renderer, x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLinesF$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$4,"SDL_RenderDrawLinesF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLinesF(SDL_Renderer* renderer, const SDL_FPoint* points, int count);
     * }
     */
    public static int SDL_RenderDrawLinesF(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawLinesF$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRectF$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$5,"SDL_RenderDrawRectF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRectF(SDL_Renderer* renderer, const SDL_FRect* rect);
     * }
     */
    public static int SDL_RenderDrawRectF(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderDrawRectF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRectsF$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$0,"SDL_RenderDrawRectsF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRectsF(SDL_Renderer* renderer, const SDL_FRect* rects, int count);
     * }
     */
    public static int SDL_RenderDrawRectsF(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderDrawRectsF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRectF$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$1,"SDL_RenderFillRectF");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRectF(SDL_Renderer* renderer, const SDL_FRect* rect);
     * }
     */
    public static int SDL_RenderFillRectF(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderFillRectF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRectsF$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$2,"SDL_RenderFillRectsF");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRectsF(SDL_Renderer* renderer, const SDL_FRect* rects, int count);
     * }
     */
    public static int SDL_RenderFillRectsF(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderFillRectsF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopyF$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$3,"SDL_RenderCopyF");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopyF(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_Rect* srcrect, const SDL_FRect* dstrect);
     * }
     */
    public static int SDL_RenderCopyF(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect) {
        var mh$ = SDL_RenderCopyF$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopyExF$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$4,"SDL_RenderCopyExF");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopyExF(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_Rect* srcrect, const SDL_FRect* dstrect, double angle, const SDL_FPoint* center, const SDL_RendererFlip flip);
     * }
     */
    public static int SDL_RenderCopyExF(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect, double angle, MemorySegment center, int flip) {
        var mh$ = SDL_RenderCopyExF$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect, angle, center, flip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$5,"SDL_RenderGeometry");
    }
    /**
     * {@snippet :
     * int SDL_RenderGeometry(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_Vertex* vertices, int num_vertices, int* indices, int num_indices);
     * }
     */
    public static int SDL_RenderGeometry(MemorySegment renderer, MemorySegment texture, MemorySegment vertices, int num_vertices, MemorySegment indices, int num_indices) {
        var mh$ = SDL_RenderGeometry$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, vertices, num_vertices, indices, num_indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGeometryRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$1,"SDL_RenderGeometryRaw");
    }
    /**
     * {@snippet :
     * int SDL_RenderGeometryRaw(SDL_Renderer* renderer, SDL_Texture* texture, float* xy, int xy_stride, const SDL_Color* color, int color_stride, float* uv, int uv_stride, int num_vertices, void* indices, int num_indices, int size_indices);
     * }
     */
    public static int SDL_RenderGeometryRaw(MemorySegment renderer, MemorySegment texture, MemorySegment xy, int xy_stride, MemorySegment color, int color_stride, MemorySegment uv, int uv_stride, int num_vertices, MemorySegment indices, int num_indices, int size_indices) {
        var mh$ = SDL_RenderGeometryRaw$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, xy, xy_stride, color, color_stride, uv, uv_stride, num_vertices, indices, num_indices, size_indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$3,"SDL_RenderReadPixels");
    }
    /**
     * {@snippet :
     * int SDL_RenderReadPixels(SDL_Renderer* renderer, const SDL_Rect* rect, Uint32 format, void* pixels, int pitch);
     * }
     */
    public static int SDL_RenderReadPixels(MemorySegment renderer, MemorySegment rect, int format, MemorySegment pixels, int pitch) {
        var mh$ = SDL_RenderReadPixels$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect, format, pixels, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$4,"SDL_RenderPresent");
    }
    /**
     * {@snippet :
     * void SDL_RenderPresent(SDL_Renderer* renderer);
     * }
     */
    public static void SDL_RenderPresent(MemorySegment renderer) {
        var mh$ = SDL_RenderPresent$MH();
        try {
            mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$5,"SDL_DestroyTexture");
    }
    /**
     * {@snippet :
     * void SDL_DestroyTexture(SDL_Texture* texture);
     * }
     */
    public static void SDL_DestroyTexture(MemorySegment texture) {
        var mh$ = SDL_DestroyTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$0,"SDL_DestroyRenderer");
    }
    /**
     * {@snippet :
     * void SDL_DestroyRenderer(SDL_Renderer* renderer);
     * }
     */
    public static void SDL_DestroyRenderer(MemorySegment renderer) {
        var mh$ = SDL_DestroyRenderer$MH();
        try {
            mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$1,"SDL_RenderFlush");
    }
    /**
     * {@snippet :
     * int SDL_RenderFlush(SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderFlush(MemorySegment renderer) {
        var mh$ = SDL_RenderFlush$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_BindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$2,"SDL_GL_BindTexture");
    }
    /**
     * {@snippet :
     * int SDL_GL_BindTexture(SDL_Texture* texture, float* texw, float* texh);
     * }
     */
    public static int SDL_GL_BindTexture(MemorySegment texture, MemorySegment texw, MemorySegment texh) {
        var mh$ = SDL_GL_BindTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, texw, texh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_UnbindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$3,"SDL_GL_UnbindTexture");
    }
    /**
     * {@snippet :
     * int SDL_GL_UnbindTexture(SDL_Texture* texture);
     * }
     */
    public static int SDL_GL_UnbindTexture(MemorySegment texture) {
        var mh$ = SDL_GL_UnbindTexture$MH();
        try {
            return (int)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetMetalLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$4,"SDL_RenderGetMetalLayer");
    }
    /**
     * {@snippet :
     * void* SDL_RenderGetMetalLayer(SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_RenderGetMetalLayer(MemorySegment renderer) {
        var mh$ = SDL_RenderGetMetalLayer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetMetalCommandEncoder$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$5,"SDL_RenderGetMetalCommandEncoder");
    }
    /**
     * {@snippet :
     * void* SDL_RenderGetMetalCommandEncoder(SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_RenderGetMetalCommandEncoder(MemorySegment renderer) {
        var mh$ = SDL_RenderGetMetalCommandEncoder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetVSync$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$0,"SDL_RenderSetVSync");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetVSync(SDL_Renderer* renderer, int vsync);
     * }
     */
    public static int SDL_RenderSetVSync(MemorySegment renderer, int vsync) {
        var mh$ = SDL_RenderSetVSync$MH();
        try {
            return (int)mh$.invokeExact(renderer, vsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateShapedWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$1,"SDL_CreateShapedWindow");
    }
    /**
     * {@snippet :
     * SDL_Window* SDL_CreateShapedWindow(char* title, unsigned int x, unsigned int y, unsigned int w, unsigned int h, Uint32 flags);
     * }
     */
    public static MemorySegment SDL_CreateShapedWindow(MemorySegment title, int x, int y, int w, int h, int flags) {
        var mh$ = SDL_CreateShapedWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(title, x, y, w, h, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsShapedWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$2,"SDL_IsShapedWindow");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IsShapedWindow(const SDL_Window* window);
     * }
     */
    public static int SDL_IsShapedWindow(MemorySegment window) {
        var mh$ = SDL_IsShapedWindow$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .ShapeModeDefault = 0;
     * }
     */
    public static int ShapeModeDefault() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .ShapeModeBinarizeAlpha = 1;
     * }
     */
    public static int ShapeModeBinarizeAlpha() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ShapeModeReverseBinarizeAlpha = 2;
     * }
     */
    public static int ShapeModeReverseBinarizeAlpha() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ShapeModeColorKey = 3;
     * }
     */
    public static int ShapeModeColorKey() {
        return (int)3L;
    }
    public static MethodHandle SDL_SetWindowShape$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$1,"SDL_SetWindowShape");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowShape(SDL_Window* window, SDL_Surface* shape, SDL_WindowShapeMode* shape_mode);
     * }
     */
    public static int SDL_SetWindowShape(MemorySegment window, MemorySegment shape, MemorySegment shape_mode) {
        var mh$ = SDL_SetWindowShape$MH();
        try {
            return (int)mh$.invokeExact(window, shape, shape_mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetShapedWindowMode$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$2,"SDL_GetShapedWindowMode");
    }
    /**
     * {@snippet :
     * int SDL_GetShapedWindowMode(SDL_Window* window, SDL_WindowShapeMode* shape_mode);
     * }
     */
    public static int SDL_GetShapedWindowMode(MemorySegment window, MemorySegment shape_mode) {
        var mh$ = SDL_GetShapedWindowMode$MH();
        try {
            return (int)mh$.invokeExact(window, shape_mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LinuxSetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$4,"SDL_LinuxSetThreadPriority");
    }
    /**
     * {@snippet :
     * int SDL_LinuxSetThreadPriority(Sint64 threadID, int priority);
     * }
     */
    public static int SDL_LinuxSetThreadPriority(long threadID, int priority) {
        var mh$ = SDL_LinuxSetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(threadID, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LinuxSetThreadPriorityAndPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$6,"SDL_LinuxSetThreadPriorityAndPolicy");
    }
    /**
     * {@snippet :
     * int SDL_LinuxSetThreadPriorityAndPolicy(Sint64 threadID, int sdlPriority, int schedPolicy);
     * }
     */
    public static int SDL_LinuxSetThreadPriorityAndPolicy(long threadID, int sdlPriority, int schedPolicy) {
        var mh$ = SDL_LinuxSetThreadPriorityAndPolicy$MH();
        try {
            return (int)mh$.invokeExact(threadID, sdlPriority, schedPolicy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsTablet$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$0,"SDL_IsTablet");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_IsTablet();
     * }
     */
    public static int SDL_IsTablet() {
        var mh$ = SDL_IsTablet$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OnApplicationWillTerminate$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$1,"SDL_OnApplicationWillTerminate");
    }
    /**
     * {@snippet :
     * void SDL_OnApplicationWillTerminate();
     * }
     */
    public static void SDL_OnApplicationWillTerminate() {
        var mh$ = SDL_OnApplicationWillTerminate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OnApplicationDidReceiveMemoryWarning$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$2,"SDL_OnApplicationDidReceiveMemoryWarning");
    }
    /**
     * {@snippet :
     * void SDL_OnApplicationDidReceiveMemoryWarning();
     * }
     */
    public static void SDL_OnApplicationDidReceiveMemoryWarning() {
        var mh$ = SDL_OnApplicationDidReceiveMemoryWarning$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OnApplicationWillResignActive$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$3,"SDL_OnApplicationWillResignActive");
    }
    /**
     * {@snippet :
     * void SDL_OnApplicationWillResignActive();
     * }
     */
    public static void SDL_OnApplicationWillResignActive() {
        var mh$ = SDL_OnApplicationWillResignActive$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OnApplicationDidEnterBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$4,"SDL_OnApplicationDidEnterBackground");
    }
    /**
     * {@snippet :
     * void SDL_OnApplicationDidEnterBackground();
     * }
     */
    public static void SDL_OnApplicationDidEnterBackground() {
        var mh$ = SDL_OnApplicationDidEnterBackground$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OnApplicationWillEnterForeground$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$5,"SDL_OnApplicationWillEnterForeground");
    }
    /**
     * {@snippet :
     * void SDL_OnApplicationWillEnterForeground();
     * }
     */
    public static void SDL_OnApplicationWillEnterForeground() {
        var mh$ = SDL_OnApplicationWillEnterForeground$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OnApplicationDidBecomeActive$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$0,"SDL_OnApplicationDidBecomeActive");
    }
    /**
     * {@snippet :
     * void SDL_OnApplicationDidBecomeActive();
     * }
     */
    public static void SDL_OnApplicationDidBecomeActive() {
        var mh$ = SDL_OnApplicationDidBecomeActive$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTicks$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$1,"SDL_GetTicks");
    }
    /**
     * {@snippet :
     * Uint32 SDL_GetTicks();
     * }
     */
    public static int SDL_GetTicks() {
        var mh$ = SDL_GetTicks$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTicks64$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$2,"SDL_GetTicks64");
    }
    /**
     * {@snippet :
     * Uint64 SDL_GetTicks64();
     * }
     */
    public static long SDL_GetTicks64() {
        var mh$ = SDL_GetTicks64$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetPerformanceCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$3,"SDL_GetPerformanceCounter");
    }
    /**
     * {@snippet :
     * Uint64 SDL_GetPerformanceCounter();
     * }
     */
    public static long SDL_GetPerformanceCounter() {
        var mh$ = SDL_GetPerformanceCounter$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetPerformanceFrequency$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$4,"SDL_GetPerformanceFrequency");
    }
    /**
     * {@snippet :
     * Uint64 SDL_GetPerformanceFrequency();
     * }
     */
    public static long SDL_GetPerformanceFrequency() {
        var mh$ = SDL_GetPerformanceFrequency$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Delay$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$5,"SDL_Delay");
    }
    /**
     * {@snippet :
     * void SDL_Delay(Uint32 ms);
     * }
     */
    public static void SDL_Delay(int ms) {
        var mh$ = SDL_Delay$MH();
        try {
            mh$.invokeExact(ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_TimerID;
     * }
     */
    public static final OfInt SDL_TimerID = JAVA_INT;
    public static MethodHandle SDL_AddTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$2,"SDL_AddTimer");
    }
    /**
     * {@snippet :
     * SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void* param);
     * }
     */
    public static int SDL_AddTimer(int interval, MemorySegment callback, MemorySegment param) {
        var mh$ = SDL_AddTimer$MH();
        try {
            return (int)mh$.invokeExact(interval, callback, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RemoveTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$3,"SDL_RemoveTimer");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_RemoveTimer(SDL_TimerID id);
     * }
     */
    public static int SDL_RemoveTimer(int id) {
        var mh$ = SDL_RemoveTimer$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$2,"SDL_GetVersion");
    }
    /**
     * {@snippet :
     * void SDL_GetVersion(SDL_version* ver);
     * }
     */
    public static void SDL_GetVersion(MemorySegment ver) {
        var mh$ = SDL_GetVersion$MH();
        try {
            mh$.invokeExact(ver);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRevision$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$3,"SDL_GetRevision");
    }
    /**
     * {@snippet :
     * char* SDL_GetRevision();
     * }
     */
    public static MemorySegment SDL_GetRevision() {
        var mh$ = SDL_GetRevision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRevisionNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$4,"SDL_GetRevisionNumber");
    }
    /**
     * {@snippet :
     * int SDL_GetRevisionNumber();
     * }
     */
    public static int SDL_GetRevisionNumber() {
        var mh$ = SDL_GetRevisionNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetPreferredLocales$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$2,"SDL_GetPreferredLocales");
    }
    /**
     * {@snippet :
     * SDL_Locale* SDL_GetPreferredLocales();
     * }
     */
    public static MemorySegment SDL_GetPreferredLocales() {
        var mh$ = SDL_GetPreferredLocales$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_OpenURL$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$3,"SDL_OpenURL");
    }
    /**
     * {@snippet :
     * int SDL_OpenURL(char* url);
     * }
     */
    public static int SDL_OpenURL(MemorySegment url) {
        var mh$ = SDL_OpenURL$MH();
        try {
            return (int)mh$.invokeExact(url);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Init$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$4,"SDL_Init");
    }
    /**
     * {@snippet :
     * int SDL_Init(Uint32 flags);
     * }
     */
    public static int SDL_Init(int flags) {
        var mh$ = SDL_Init$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_InitSubSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$5,"SDL_InitSubSystem");
    }
    /**
     * {@snippet :
     * int SDL_InitSubSystem(Uint32 flags);
     * }
     */
    public static int SDL_InitSubSystem(int flags) {
        var mh$ = SDL_InitSubSystem$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_QuitSubSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$0,"SDL_QuitSubSystem");
    }
    /**
     * {@snippet :
     * void SDL_QuitSubSystem(Uint32 flags);
     * }
     */
    public static void SDL_QuitSubSystem(int flags) {
        var mh$ = SDL_QuitSubSystem$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WasInit$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$1,"SDL_WasInit");
    }
    /**
     * {@snippet :
     * Uint32 SDL_WasInit(Uint32 flags);
     * }
     */
    public static int SDL_WasInit(int flags) {
        var mh$ = SDL_WasInit$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Quit$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$2,"SDL_Quit");
    }
    /**
     * {@snippet :
     * void SDL_Quit();
     * }
     */
    public static void SDL_Quit() {
        var mh$ = SDL_Quit$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkInstance_T* VkInstance;
     * }
     */
    public static final OfAddress VkInstance = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct VkSurfaceKHR_T* VkSurfaceKHR;
     * }
     */
    public static final OfAddress VkSurfaceKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct VkInstance_T* SDL_vulkanInstance;
     * }
     */
    public static final OfAddress SDL_vulkanInstance = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct VkSurfaceKHR_T* SDL_vulkanSurface;
     * }
     */
    public static final OfAddress SDL_vulkanSurface = RuntimeHelper.POINTER;
    public static MethodHandle SDL_Vulkan_LoadLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$3,"SDL_Vulkan_LoadLibrary");
    }
    /**
     * {@snippet :
     * int SDL_Vulkan_LoadLibrary(char* path);
     * }
     */
    public static int SDL_Vulkan_LoadLibrary(MemorySegment path) {
        var mh$ = SDL_Vulkan_LoadLibrary$MH();
        try {
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Vulkan_GetVkGetInstanceProcAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$4,"SDL_Vulkan_GetVkGetInstanceProcAddr");
    }
    /**
     * {@snippet :
     * void* SDL_Vulkan_GetVkGetInstanceProcAddr();
     * }
     */
    public static MemorySegment SDL_Vulkan_GetVkGetInstanceProcAddr() {
        var mh$ = SDL_Vulkan_GetVkGetInstanceProcAddr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Vulkan_UnloadLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$5,"SDL_Vulkan_UnloadLibrary");
    }
    /**
     * {@snippet :
     * void SDL_Vulkan_UnloadLibrary();
     * }
     */
    public static void SDL_Vulkan_UnloadLibrary() {
        var mh$ = SDL_Vulkan_UnloadLibrary$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Vulkan_GetInstanceExtensions$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$0,"SDL_Vulkan_GetInstanceExtensions");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_Vulkan_GetInstanceExtensions(SDL_Window* window, unsigned int* pCount, char** pNames);
     * }
     */
    public static int SDL_Vulkan_GetInstanceExtensions(MemorySegment window, MemorySegment pCount, MemorySegment pNames) {
        var mh$ = SDL_Vulkan_GetInstanceExtensions$MH();
        try {
            return (int)mh$.invokeExact(window, pCount, pNames);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Vulkan_CreateSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$1,"SDL_Vulkan_CreateSurface");
    }
    /**
     * {@snippet :
     * SDL_bool SDL_Vulkan_CreateSurface(SDL_Window* window, VkInstance instance, VkSurfaceKHR* surface);
     * }
     */
    public static int SDL_Vulkan_CreateSurface(MemorySegment window, MemorySegment instance, MemorySegment surface) {
        var mh$ = SDL_Vulkan_CreateSurface$MH();
        try {
            return (int)mh$.invokeExact(window, instance, surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Vulkan_GetDrawableSize$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$2,"SDL_Vulkan_GetDrawableSize");
    }
    /**
     * {@snippet :
     * void SDL_Vulkan_GetDrawableSize(SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_Vulkan_GetDrawableSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_Vulkan_GetDrawableSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define SDL_FILE "/tmp/jextract$3622914355630244005.h"
     * }
     */
    public static MemorySegment SDL_FILE() {
        return constants$224.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_LINE 215
     * }
     */
    public static int SDL_LINE() {
        return (int)215L;
    }
    /**
     * {@snippet :
     * #define SDL_NULL_WHILE_LOOP_CONDITION 0
     * }
     */
    public static int SDL_NULL_WHILE_LOOP_CONDITION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_BYTEORDER 1234
     * }
     */
    public static int SDL_BYTEORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define SDL_FLOATWORDORDER 1234
     * }
     */
    public static int SDL_FLOATWORDORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define SDL_MUTEX_MAXWAIT 4294967295
     * }
     */
    public static int SDL_MUTEX_MAXWAIT() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_UNKNOWN 0
     * }
     */
    public static int SDL_RWOPS_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_WINFILE 1
     * }
     */
    public static int SDL_RWOPS_WINFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_STDFILE 2
     * }
     */
    public static int SDL_RWOPS_STDFILE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_JNIFILE 3
     * }
     */
    public static int SDL_RWOPS_JNIFILE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_MEMORY 4
     * }
     */
    public static int SDL_RWOPS_MEMORY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_MEMORY_RO 5
     * }
     */
    public static int SDL_RWOPS_MEMORY_RO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_MASK_BITSIZE 255
     * }
     */
    public static int SDL_AUDIO_MASK_BITSIZE() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_MASK_DATATYPE 256
     * }
     */
    public static int SDL_AUDIO_MASK_DATATYPE() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_MASK_ENDIAN 4096
     * }
     */
    public static int SDL_AUDIO_MASK_ENDIAN() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_MASK_SIGNED 32768
     * }
     */
    public static int SDL_AUDIO_MASK_SIGNED() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define AUDIO_U16 16
     * }
     */
    public static int AUDIO_U16() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AUDIO_S16 32784
     * }
     */
    public static int AUDIO_S16() {
        return (int)32784L;
    }
    /**
     * {@snippet :
     * #define AUDIO_S32 32800
     * }
     */
    public static int AUDIO_S32() {
        return (int)32800L;
    }
    /**
     * {@snippet :
     * #define AUDIO_F32 33056
     * }
     */
    public static int AUDIO_F32() {
        return (int)33056L;
    }
    /**
     * {@snippet :
     * #define AUDIO_U16SYS 16
     * }
     */
    public static int AUDIO_U16SYS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AUDIO_S16SYS 32784
     * }
     */
    public static int AUDIO_S16SYS() {
        return (int)32784L;
    }
    /**
     * {@snippet :
     * #define AUDIO_S32SYS 32800
     * }
     */
    public static int AUDIO_S32SYS() {
        return (int)32800L;
    }
    /**
     * {@snippet :
     * #define AUDIO_F32SYS 33056
     * }
     */
    public static int AUDIO_F32SYS() {
        return (int)33056L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_ALLOW_ANY_CHANGE 15
     * }
     */
    public static int SDL_AUDIO_ALLOW_ANY_CHANGE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_UNDEFINED_MASK 536805376
     * }
     */
    public static int SDL_WINDOWPOS_UNDEFINED_MASK() {
        return (int)536805376L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_UNDEFINED 536805376
     * }
     */
    public static int SDL_WINDOWPOS_UNDEFINED() {
        return (int)536805376L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_CENTERED_MASK 805240832
     * }
     */
    public static int SDL_WINDOWPOS_CENTERED_MASK() {
        return (int)805240832L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_CENTERED 805240832
     * }
     */
    public static int SDL_WINDOWPOS_CENTERED() {
        return (int)805240832L;
    }
    /**
     * {@snippet :
     * #define SDLK_SCANCODE_MASK 1073741824
     * }
     */
    public static int SDLK_SCANCODE_MASK() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_LMASK 1
     * }
     */
    public static int SDL_BUTTON_LMASK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_MMASK 2
     * }
     */
    public static int SDL_BUTTON_MMASK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_RMASK 4
     * }
     */
    public static int SDL_BUTTON_RMASK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_X1MASK 8
     * }
     */
    public static int SDL_BUTTON_X1MASK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_X2MASK 16
     * }
     */
    public static int SDL_BUTTON_X2MASK() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SDL_IPHONE_MAX_GFORCE 5.0
     * }
     */
    public static double SDL_IPHONE_MAX_GFORCE() {
        return 5.0d;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_AXIS_MIN -32768
     * }
     */
    public static int SDL_JOYSTICK_AXIS_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHTUP 3
     * }
     */
    public static int SDL_HAT_RIGHTUP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHTDOWN 6
     * }
     */
    public static int SDL_HAT_RIGHTDOWN() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFTUP 9
     * }
     */
    public static int SDL_HAT_LEFTUP() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFTDOWN 12
     * }
     */
    public static int SDL_HAT_LEFTDOWN() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define SDL_STANDARD_GRAVITY 9.806650161743164
     * }
     */
    public static float SDL_STANDARD_GRAVITY() {
        return 9.806650161743164f;
    }
    /**
     * {@snippet :
     * #define SDL_TOUCH_MOUSEID 4294967295
     * }
     */
    public static int SDL_TOUCH_MOUSEID() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define SDL_MOUSE_TOUCHID -1
     * }
     */
    public static long SDL_MOUSE_TOUCHID() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SDL_TEXTEDITINGEVENT_TEXT_SIZE 32
     * }
     */
    public static int SDL_TEXTEDITINGEVENT_TEXT_SIZE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SDL_TEXTINPUTEVENT_TEXT_SIZE 32
     * }
     */
    public static int SDL_TEXTINPUTEVENT_TEXT_SIZE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SDL_QUERY -1
     * }
     */
    public static int SDL_QUERY() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_CONSTANT 1
     * }
     */
    public static int SDL_HAPTIC_CONSTANT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_SINE 2
     * }
     */
    public static int SDL_HAPTIC_SINE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_LEFTRIGHT 4
     * }
     */
    public static int SDL_HAPTIC_LEFTRIGHT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_TRIANGLE 8
     * }
     */
    public static int SDL_HAPTIC_TRIANGLE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_SAWTOOTHUP 16
     * }
     */
    public static int SDL_HAPTIC_SAWTOOTHUP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_SAWTOOTHDOWN 32
     * }
     */
    public static int SDL_HAPTIC_SAWTOOTHDOWN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_RAMP 64
     * }
     */
    public static int SDL_HAPTIC_RAMP() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_SPRING 128
     * }
     */
    public static int SDL_HAPTIC_SPRING() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_DAMPER 256
     * }
     */
    public static int SDL_HAPTIC_DAMPER() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_INERTIA 512
     * }
     */
    public static int SDL_HAPTIC_INERTIA() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_FRICTION 1024
     * }
     */
    public static int SDL_HAPTIC_FRICTION() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_CUSTOM 2048
     * }
     */
    public static int SDL_HAPTIC_CUSTOM() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_GAIN 4096
     * }
     */
    public static int SDL_HAPTIC_GAIN() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_AUTOCENTER 8192
     * }
     */
    public static int SDL_HAPTIC_AUTOCENTER() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_STATUS 16384
     * }
     */
    public static int SDL_HAPTIC_STATUS() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_PAUSE 32768
     * }
     */
    public static int SDL_HAPTIC_PAUSE() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_INFINITY 4294967295
     * }
     */
    public static int SDL_HAPTIC_INFINITY() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ACCELEROMETER_AS_JOYSTICK "SDL_ACCELEROMETER_AS_JOYSTICK"
     * }
     */
    public static MemorySegment SDL_HINT_ACCELEROMETER_AS_JOYSTICK() {
        return constants$224.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED "SDL_ALLOW_ALT_TAB_WHILE_GRABBED"
     * }
     */
    public static MemorySegment SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED() {
        return constants$224.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ALLOW_TOPMOST "SDL_ALLOW_TOPMOST"
     * }
     */
    public static MemorySegment SDL_HINT_ALLOW_TOPMOST() {
        return constants$225.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION "SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION() {
        return constants$225.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION "SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION() {
        return constants$225.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_BLOCK_ON_PAUSE "SDL_ANDROID_BLOCK_ON_PAUSE"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_BLOCK_ON_PAUSE() {
        return constants$225.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO() {
        return constants$225.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_TRAP_BACK_BUTTON "SDL_ANDROID_TRAP_BACK_BUTTON"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_TRAP_BACK_BUTTON() {
        return constants$225.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_APP_NAME "SDL_APP_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_APP_NAME() {
        return constants$226.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS() {
        return constants$226.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"
     * }
     */
    public static MemorySegment SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION() {
        return constants$226.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_CATEGORY "SDL_AUDIO_CATEGORY"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_CATEGORY() {
        return constants$226.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_DEVICE_APP_NAME "SDL_AUDIO_DEVICE_APP_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_DEVICE_APP_NAME() {
        return constants$226.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_DEVICE_STREAM_NAME "SDL_AUDIO_DEVICE_STREAM_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_DEVICE_STREAM_NAME() {
        return constants$226.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE "SDL_AUDIO_DEVICE_STREAM_ROLE"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_DEVICE_STREAM_ROLE() {
        return constants$227.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_RESAMPLING_MODE "SDL_AUDIO_RESAMPLING_MODE"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_RESAMPLING_MODE() {
        return constants$227.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUTO_UPDATE_JOYSTICKS "SDL_AUTO_UPDATE_JOYSTICKS"
     * }
     */
    public static MemorySegment SDL_HINT_AUTO_UPDATE_JOYSTICKS() {
        return constants$227.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUTO_UPDATE_SENSORS "SDL_AUTO_UPDATE_SENSORS"
     * }
     */
    public static MemorySegment SDL_HINT_AUTO_UPDATE_SENSORS() {
        return constants$227.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_BMP_SAVE_LEGACY_FORMAT "SDL_BMP_SAVE_LEGACY_FORMAT"
     * }
     */
    public static MemorySegment SDL_HINT_BMP_SAVE_LEGACY_FORMAT() {
        return constants$227.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_DISPLAY_USABLE_BOUNDS "SDL_DISPLAY_USABLE_BOUNDS"
     * }
     */
    public static MemorySegment SDL_HINT_DISPLAY_USABLE_BOUNDS() {
        return constants$227.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_EMSCRIPTEN_ASYNCIFY "SDL_EMSCRIPTEN_ASYNCIFY"
     * }
     */
    public static MemorySegment SDL_HINT_EMSCRIPTEN_ASYNCIFY() {
        return constants$228.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"
     * }
     */
    public static MemorySegment SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT() {
        return constants$228.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ENABLE_STEAM_CONTROLLERS "SDL_ENABLE_STEAM_CONTROLLERS"
     * }
     */
    public static MemorySegment SDL_HINT_ENABLE_STEAM_CONTROLLERS() {
        return constants$228.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_EVENT_LOGGING "SDL_EVENT_LOGGING"
     * }
     */
    public static MemorySegment SDL_HINT_EVENT_LOGGING() {
        return constants$228.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_FORCE_RAISEWINDOW "SDL_HINT_FORCE_RAISEWINDOW"
     * }
     */
    public static MemorySegment SDL_HINT_FORCE_RAISEWINDOW() {
        return constants$228.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_FRAMEBUFFER_ACCELERATION "SDL_FRAMEBUFFER_ACCELERATION"
     * }
     */
    public static MemorySegment SDL_HINT_FRAMEBUFFER_ACCELERATION() {
        return constants$228.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLERCONFIG "SDL_GAMECONTROLLERCONFIG"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLERCONFIG() {
        return constants$229.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLERCONFIG_FILE "SDL_GAMECONTROLLERCONFIG_FILE"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLERCONFIG_FILE() {
        return constants$229.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLERTYPE "SDL_GAMECONTROLLERTYPE"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLERTYPE() {
        return constants$229.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES "SDL_GAMECONTROLLER_IGNORE_DEVICES"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES() {
        return constants$229.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT() {
        return constants$229.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS "SDL_GAMECONTROLLER_USE_BUTTON_LABELS"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS() {
        return constants$229.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GRAB_KEYBOARD "SDL_GRAB_KEYBOARD"
     * }
     */
    public static MemorySegment SDL_HINT_GRAB_KEYBOARD() {
        return constants$230.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_HIDAPI_IGNORE_DEVICES "SDL_HIDAPI_IGNORE_DEVICES"
     * }
     */
    public static MemorySegment SDL_HINT_HIDAPI_IGNORE_DEVICES() {
        return constants$230.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IDLE_TIMER_DISABLED "SDL_IOS_IDLE_TIMER_DISABLED"
     * }
     */
    public static MemorySegment SDL_HINT_IDLE_TIMER_DISABLED() {
        return constants$230.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IME_INTERNAL_EDITING "SDL_IME_INTERNAL_EDITING"
     * }
     */
    public static MemorySegment SDL_HINT_IME_INTERNAL_EDITING() {
        return constants$230.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IME_SHOW_UI "SDL_IME_SHOW_UI"
     * }
     */
    public static MemorySegment SDL_HINT_IME_SHOW_UI() {
        return constants$230.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IME_SUPPORT_EXTENDED_TEXT "SDL_IME_SUPPORT_EXTENDED_TEXT"
     * }
     */
    public static MemorySegment SDL_HINT_IME_SUPPORT_EXTENDED_TEXT() {
        return constants$230.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IOS_HIDE_HOME_INDICATOR "SDL_IOS_HIDE_HOME_INDICATOR"
     * }
     */
    public static MemorySegment SDL_HINT_IOS_HIDE_HOME_INDICATOR() {
        return constants$231.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS() {
        return constants$231.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI "SDL_JOYSTICK_HIDAPI"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI() {
        return constants$231.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE "SDL_JOYSTICK_HIDAPI_GAMECUBE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE() {
        return constants$231.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE "SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE() {
        return constants$231.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS "SDL_JOYSTICK_HIDAPI_JOY_CONS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS() {
        return constants$231.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS() {
        return constants$232.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS() {
        return constants$232.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_LUNA "SDL_JOYSTICK_HIDAPI_LUNA"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_LUNA() {
        return constants$232.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC() {
        return constants$232.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SHIELD "SDL_JOYSTICK_HIDAPI_SHIELD"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SHIELD() {
        return constants$232.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS3 "SDL_JOYSTICK_HIDAPI_PS3"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS3() {
        return constants$232.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS4 "SDL_JOYSTICK_HIDAPI_PS4"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS4() {
        return constants$233.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE() {
        return constants$233.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS5 "SDL_JOYSTICK_HIDAPI_PS5"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS5() {
        return constants$233.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED() {
        return constants$233.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE() {
        return constants$233.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_STADIA "SDL_JOYSTICK_HIDAPI_STADIA"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_STADIA() {
        return constants$233.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_STEAM "SDL_JOYSTICK_HIDAPI_STEAM"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_STEAM() {
        return constants$234.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SWITCH "SDL_JOYSTICK_HIDAPI_SWITCH"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SWITCH() {
        return constants$234.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED() {
        return constants$234.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED() {
        return constants$234.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED() {
        return constants$234.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_WII "SDL_JOYSTICK_HIDAPI_WII"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_WII() {
        return constants$234.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED() {
        return constants$235.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX "SDL_JOYSTICK_HIDAPI_XBOX"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX() {
        return constants$235.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 "SDL_JOYSTICK_HIDAPI_XBOX_360"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_360() {
        return constants$235.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE "SDL_JOYSTICK_HIDAPI_XBOX_ONE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_RAWINPUT "SDL_JOYSTICK_RAWINPUT"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_RAWINPUT() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_ROG_CHAKRAM "SDL_JOYSTICK_ROG_CHAKRAM"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_ROG_CHAKRAM() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_THREAD "SDL_JOYSTICK_THREAD"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_THREAD() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER "SDL_KMSDRM_REQUIRE_DRM_MASTER"
     * }
     */
    public static MemorySegment SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_DEVICE "SDL_JOYSTICK_DEVICE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_DEVICE() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_DIGITAL_HATS "SDL_LINUX_DIGITAL_HATS"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_DIGITAL_HATS() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_HAT_DEADZONES "SDL_LINUX_HAT_DEADZONES"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_HAT_DEADZONES() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_JOYSTICK_CLASSIC "SDL_LINUX_JOYSTICK_CLASSIC"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_JOYSTICK_CLASSIC() {
        return constants$237.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_JOYSTICK_DEADZONES "SDL_LINUX_JOYSTICK_DEADZONES"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_JOYSTICK_DEADZONES() {
        return constants$237.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MAC_BACKGROUND_APP "SDL_MAC_BACKGROUND_APP"
     * }
     */
    public static MemorySegment SDL_HINT_MAC_BACKGROUND_APP() {
        return constants$237.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"
     * }
     */
    public static MemorySegment SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK() {
        return constants$238.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH "SDL_MAC_OPENGL_ASYNC_DISPATCH"
     * }
     */
    public static MemorySegment SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH() {
        return constants$238.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS "SDL_MOUSE_DOUBLE_CLICK_RADIUS"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS() {
        return constants$238.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME "SDL_MOUSE_DOUBLE_CLICK_TIME"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_DOUBLE_CLICK_TIME() {
        return constants$238.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH "SDL_MOUSE_FOCUS_CLICKTHROUGH"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH() {
        return constants$238.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE "SDL_MOUSE_NORMAL_SPEED_SCALE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_NORMAL_SPEED_SCALE() {
        return constants$238.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER "SDL_MOUSE_RELATIVE_MODE_CENTER"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_MODE_CENTER() {
        return constants$239.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_MODE_WARP "SDL_MOUSE_RELATIVE_MODE_WARP"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_MODE_WARP() {
        return constants$239.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_SCALING "SDL_MOUSE_RELATIVE_SCALING"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_SCALING() {
        return constants$239.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE "SDL_MOUSE_RELATIVE_SPEED_SCALE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE() {
        return constants$239.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE "SDL_MOUSE_RELATIVE_SYSTEM_SCALE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE() {
        return constants$239.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION "SDL_MOUSE_RELATIVE_WARP_MOTION"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_WARP_MOTION() {
        return constants$239.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_TOUCH_EVENTS "SDL_MOUSE_TOUCH_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_TOUCH_EVENTS() {
        return constants$240.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_AUTO_CAPTURE "SDL_MOUSE_AUTO_CAPTURE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_AUTO_CAPTURE() {
        return constants$240.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_NO_SIGNAL_HANDLERS "SDL_NO_SIGNAL_HANDLERS"
     * }
     */
    public static MemorySegment SDL_HINT_NO_SIGNAL_HANDLERS() {
        return constants$240.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_OPENGL_ES_DRIVER "SDL_OPENGL_ES_DRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_OPENGL_ES_DRIVER() {
        return constants$240.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ORIENTATIONS "SDL_IOS_ORIENTATIONS"
     * }
     */
    public static MemorySegment SDL_HINT_ORIENTATIONS() {
        return constants$240.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_POLL_SENTINEL "SDL_POLL_SENTINEL"
     * }
     */
    public static MemorySegment SDL_HINT_POLL_SENTINEL() {
        return constants$240.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_PREFERRED_LOCALES "SDL_PREFERRED_LOCALES"
     * }
     */
    public static MemorySegment SDL_HINT_PREFERRED_LOCALES() {
        return constants$241.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION "SDL_QTWAYLAND_CONTENT_ORIENTATION"
     * }
     */
    public static MemorySegment SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION() {
        return constants$241.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_QTWAYLAND_WINDOW_FLAGS "SDL_QTWAYLAND_WINDOW_FLAGS"
     * }
     */
    public static MemorySegment SDL_HINT_QTWAYLAND_WINDOW_FLAGS() {
        return constants$241.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_BATCHING "SDL_RENDER_BATCHING"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_BATCHING() {
        return constants$241.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_LINE_METHOD "SDL_RENDER_LINE_METHOD"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_LINE_METHOD() {
        return constants$241.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_DIRECT3D11_DEBUG "SDL_RENDER_DIRECT3D11_DEBUG"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_DIRECT3D11_DEBUG() {
        return constants$241.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_DIRECT3D_THREADSAFE "SDL_RENDER_DIRECT3D_THREADSAFE"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_DIRECT3D_THREADSAFE() {
        return constants$242.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_DRIVER "SDL_RENDER_DRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_DRIVER() {
        return constants$242.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_LOGICAL_SIZE_MODE "SDL_RENDER_LOGICAL_SIZE_MODE"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_LOGICAL_SIZE_MODE() {
        return constants$242.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_OPENGL_SHADERS "SDL_RENDER_OPENGL_SHADERS"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_OPENGL_SHADERS() {
        return constants$242.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_SCALE_QUALITY "SDL_RENDER_SCALE_QUALITY"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_SCALE_QUALITY() {
        return constants$242.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_VSYNC "SDL_RENDER_VSYNC"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_VSYNC() {
        return constants$242.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_PS2_DYNAMIC_VSYNC "SDL_PS2_DYNAMIC_VSYNC"
     * }
     */
    public static MemorySegment SDL_HINT_PS2_DYNAMIC_VSYNC() {
        return constants$243.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RETURN_KEY_HIDES_IME "SDL_RETURN_KEY_HIDES_IME"
     * }
     */
    public static MemorySegment SDL_HINT_RETURN_KEY_HIDES_IME() {
        return constants$243.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RPI_VIDEO_LAYER "SDL_RPI_VIDEO_LAYER"
     * }
     */
    public static MemorySegment SDL_HINT_RPI_VIDEO_LAYER() {
        return constants$243.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME() {
        return constants$243.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"
     * }
     */
    public static MemorySegment SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL() {
        return constants$243.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_THREAD_PRIORITY_POLICY "SDL_THREAD_PRIORITY_POLICY"
     * }
     */
    public static MemorySegment SDL_HINT_THREAD_PRIORITY_POLICY() {
        return constants$243.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_THREAD_STACK_SIZE "SDL_THREAD_STACK_SIZE"
     * }
     */
    public static MemorySegment SDL_HINT_THREAD_STACK_SIZE() {
        return constants$244.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_TIMER_RESOLUTION "SDL_TIMER_RESOLUTION"
     * }
     */
    public static MemorySegment SDL_HINT_TIMER_RESOLUTION() {
        return constants$244.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_TOUCH_MOUSE_EVENTS "SDL_TOUCH_MOUSE_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_TOUCH_MOUSE_EVENTS() {
        return constants$244.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE"
     * }
     */
    public static MemorySegment SDL_HINT_VITA_TOUCH_MOUSE_DEVICE() {
        return constants$244.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_TV_REMOTE_AS_JOYSTICK "SDL_TV_REMOTE_AS_JOYSTICK"
     * }
     */
    public static MemorySegment SDL_HINT_TV_REMOTE_AS_JOYSTICK() {
        return constants$244.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_ALLOW_SCREENSAVER "SDL_VIDEO_ALLOW_SCREENSAVER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_ALLOW_SCREENSAVER() {
        return constants$244.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_DOUBLE_BUFFER "SDL_VIDEO_DOUBLE_BUFFER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_DOUBLE_BUFFER() {
        return constants$245.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY "SDL_VIDEO_EGL_ALLOW_TRANSPARENCY"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY() {
        return constants$245.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_EXTERNAL_CONTEXT "SDL_VIDEO_EXTERNAL_CONTEXT"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_EXTERNAL_CONTEXT() {
        return constants$245.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_HIGHDPI_DISABLED "SDL_VIDEO_HIGHDPI_DISABLED"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_HIGHDPI_DISABLED() {
        return constants$245.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES "SDL_VIDEO_MAC_FULLSCREEN_SPACES"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES() {
        return constants$245.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS() {
        return constants$245.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR() {
        return constants$246.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR() {
        return constants$246.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION "SDL_VIDEO_WAYLAND_MODE_EMULATION"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION() {
        return constants$246.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP "SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP() {
        return constants$246.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT() {
        return constants$246.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL "SDL_VIDEO_FOREIGN_WINDOW_OPENGL"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL() {
        return constants$246.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN "SDL_VIDEO_FOREIGN_WINDOW_VULKAN"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN() {
        return constants$247.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WIN_D3DCOMPILER "SDL_VIDEO_WIN_D3DCOMPILER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WIN_D3DCOMPILER() {
        return constants$247.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_FORCE_EGL "SDL_VIDEO_X11_FORCE_EGL"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_FORCE_EGL() {
        return constants$247.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR() {
        return constants$247.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_NET_WM_PING "SDL_VIDEO_X11_NET_WM_PING"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_NET_WM_PING() {
        return constants$247.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_WINDOW_VISUALID "SDL_VIDEO_X11_WINDOW_VISUALID"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_WINDOW_VISUALID() {
        return constants$247.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_XINERAMA "SDL_VIDEO_X11_XINERAMA"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_XINERAMA() {
        return constants$248.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_XRANDR "SDL_VIDEO_X11_XRANDR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_XRANDR() {
        return constants$248.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_XVIDMODE "SDL_VIDEO_X11_XVIDMODE"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_XVIDMODE() {
        return constants$248.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WAVE_FACT_CHUNK "SDL_WAVE_FACT_CHUNK"
     * }
     */
    public static MemorySegment SDL_HINT_WAVE_FACT_CHUNK() {
        return constants$248.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WAVE_RIFF_CHUNK_SIZE "SDL_WAVE_RIFF_CHUNK_SIZE"
     * }
     */
    public static MemorySegment SDL_HINT_WAVE_RIFF_CHUNK_SIZE() {
        return constants$248.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WAVE_TRUNCATION "SDL_WAVE_TRUNCATION"
     * }
     */
    public static MemorySegment SDL_HINT_WAVE_TRUNCATION() {
        return constants$248.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING "SDL_WINDOWS_DISABLE_THREAD_NAMING"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING() {
        return constants$249.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP "SDL_WINDOWS_ENABLE_MESSAGELOOP"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP() {
        return constants$249.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS() {
        return constants$249.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL() {
        return constants$249.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_INTRESOURCE_ICON "SDL_WINDOWS_INTRESOURCE_ICON"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_INTRESOURCE_ICON() {
        return constants$249.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL "SDL_WINDOWS_INTRESOURCE_ICON_SMALL"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL() {
        return constants$249.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4() {
        return constants$250.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_USE_D3D9EX "SDL_WINDOWS_USE_D3D9EX"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_USE_D3D9EX() {
        return constants$250.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_DPI_AWARENESS "SDL_WINDOWS_DPI_AWARENESS"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_DPI_AWARENESS() {
        return constants$250.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_DPI_SCALING "SDL_WINDOWS_DPI_SCALING"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_DPI_SCALING() {
        return constants$250.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN() {
        return constants$250.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN "SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN() {
        return constants$250.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINRT_HANDLE_BACK_BUTTON "SDL_WINRT_HANDLE_BACK_BUTTON"
     * }
     */
    public static MemorySegment SDL_HINT_WINRT_HANDLE_BACK_BUTTON() {
        return constants$251.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINRT_PRIVACY_POLICY_LABEL "SDL_WINRT_PRIVACY_POLICY_LABEL"
     * }
     */
    public static MemorySegment SDL_HINT_WINRT_PRIVACY_POLICY_LABEL() {
        return constants$251.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINRT_PRIVACY_POLICY_URL "SDL_WINRT_PRIVACY_POLICY_URL"
     * }
     */
    public static MemorySegment SDL_HINT_WINRT_PRIVACY_POLICY_URL() {
        return constants$251.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT "SDL_X11_FORCE_OVERRIDE_REDIRECT"
     * }
     */
    public static MemorySegment SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT() {
        return constants$251.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_XINPUT_ENABLED "SDL_XINPUT_ENABLED"
     * }
     */
    public static MemorySegment SDL_HINT_XINPUT_ENABLED() {
        return constants$251.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_DIRECTINPUT_ENABLED "SDL_DIRECTINPUT_ENABLED"
     * }
     */
    public static MemorySegment SDL_HINT_DIRECTINPUT_ENABLED() {
        return constants$251.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING"
     * }
     */
    public static MemorySegment SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING() {
        return constants$252.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_INCLUDE_MONITORS "SDL_AUDIO_INCLUDE_MONITORS"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_INCLUDE_MONITORS() {
        return constants$252.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_X11_WINDOW_TYPE "SDL_X11_WINDOW_TYPE"
     * }
     */
    public static MemorySegment SDL_HINT_X11_WINDOW_TYPE() {
        return constants$252.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE "SDL_QUIT_ON_LAST_WINDOW_CLOSE"
     * }
     */
    public static MemorySegment SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE() {
        return constants$252.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEODRIVER "SDL_VIDEODRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEODRIVER() {
        return constants$252.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIODRIVER "SDL_AUDIODRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIODRIVER() {
        return constants$252.const$5;
    }
}


