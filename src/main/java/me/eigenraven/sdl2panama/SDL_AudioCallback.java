// Generated by jextract

package me.eigenraven.sdl2panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*SDL_AudioCallback)(void* userdata,unsigned char* stream,int len);
 * }
 */
public interface SDL_AudioCallback {

    void apply(java.lang.foreign.MemorySegment userdata, java.lang.foreign.MemorySegment stream, int len);
    static MemorySegment allocate(SDL_AudioCallback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$24.const$4, fi, constants$24.const$3, scope);
    }
    static SDL_AudioCallback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _userdata, java.lang.foreign.MemorySegment _stream, int _len) -> {
            try {
                constants$24.const$5.invokeExact(symbol, _userdata, _stream, _len);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


